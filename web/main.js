(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof innerRequire=="function"&&innerRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof innerRequire=="function"&&innerRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(innerRequire,module,exports){
innerRequire("./avalon.getModel");innerRequire("./accordion/avalon.accordion");innerRequire("./animation/avalon.animation");innerRequire("./at/avalon.at");innerRequire("./browser/avalon.browser");innerRequire("./button/avalon.button");innerRequire("./camera/avalon.camera");innerRequire("./carousel/avalon.carousel");innerRequire("./checkboxlist/avalon.checkboxlist");innerRequire("./colorpicker/avalon.colorpicker");innerRequire("./cookie/avalon.cookie");innerRequire("./datepicker/avalon.coupledatepicker");innerRequire("./datepicker/avalon.datepicker");innerRequire("./datepicker/avalon.datepicker.lang");innerRequire("./datepicker/avalon.daterangepicker");innerRequire("./dialog/avalon.dialog");innerRequire("./doublelist/avalon.doublelist");innerRequire("./draggable/avalon.draggable");innerRequire("./dropdownlist/avalon.dropdownlist");innerRequire("./dropdown/avalon.dropdown");innerRequire("./flipswitch/avalon.flipswitch");innerRequire("./hotkeys/avalon.hotkeys");innerRequire("./i18n/avalon.datepicker.lang-en");innerRequire("./i18n/avalon.pager.lang-en");innerRequire("./json/avalon.json");innerRequire("./kindeditor/avalon.kindeditor");innerRequire("./kindeditor/kindeditor.4.1.0");innerRequire("./layout/avalon.layout");innerRequire("./lazyload/avalon.lazyload");innerRequire("./live/avalon.live");innerRequire("./loading/avalon.loading");innerRequire("./mask/avalon.mask");innerRequire("./menu/avalon.menu");innerRequire("./miniswitch/avalon.miniswitch");innerRequire("./mmPromise/avalon.mmPromise");innerRequire("./mmPromise/mmPromise");innerRequire("./mmRequest/avalon.mmRequest");innerRequire("./mmRequest/mmRequest");innerRequire("./mmRouter/avalon.mmRouter");innerRequire("./mmRouter/mmHistory");innerRequire("./mmRouter/mmRouter");innerRequire("./mmRouter/mmState");innerRequire("./notice/avalon.notice");innerRequire("./pager/avalon.pager");innerRequire("./position/avalon.position");innerRequire("./preview/avalon.preview");innerRequire("./progressbar/avalon.progressbar");innerRequire("./rating/avalon.rating");innerRequire("./resizable/avalon.resizable");innerRequire("./scrollbar/avalon.scrollbar");innerRequire("./scrollspy/avalon.scrollspy");innerRequire("./simplegrid/avalon.simplegrid");innerRequire("./slider/avalon.slider");innerRequire("./smartgrid/avalon.smartgrid");innerRequire("./spinner/avalon.spinner");innerRequire("./store/avalon.store");innerRequire("./switchdropdown/avalon.switchdropdown");innerRequire("./tab/avalon.tab");innerRequire("./textbox/avalon.suggest");innerRequire("./textbox/avalon.textbox");innerRequire("./timer/avalon.timer");innerRequire("./tooltip/avalon.tooltip");innerRequire("./tree/avalon.tree.async");innerRequire("./tree/avalon.tree.check");innerRequire("./tree/avalon.tree.edit");innerRequire("./tree/avalon.tree");innerRequire("./tree/avalon.tree.menu");innerRequire("./uptop/avalon.uptop");innerRequire("./validation/avalon.validation");
},{"./accordion/avalon.accordion":3,"./animation/avalon.animation":4,"./at/avalon.at":5,"./avalon.getModel":6,"./browser/avalon.browser":7,"./button/avalon.button":8,"./camera/avalon.camera":9,"./carousel/avalon.carousel":10,"./checkboxlist/avalon.checkboxlist":11,"./colorpicker/avalon.colorpicker":12,"./cookie/avalon.cookie":13,"./datepicker/avalon.coupledatepicker":14,"./datepicker/avalon.datepicker":15,"./datepicker/avalon.datepicker.lang":16,"./datepicker/avalon.daterangepicker":17,"./dialog/avalon.dialog":18,"./doublelist/avalon.doublelist":19,"./draggable/avalon.draggable":20,"./dropdown/avalon.dropdown":21,"./dropdownlist/avalon.dropdownlist":22,"./flipswitch/avalon.flipswitch":23,"./hotkeys/avalon.hotkeys":24,"./i18n/avalon.datepicker.lang-en":25,"./i18n/avalon.pager.lang-en":26,"./json/avalon.json":27,"./kindeditor/avalon.kindeditor":28,"./kindeditor/kindeditor.4.1.0":29,"./layout/avalon.layout":30,"./lazyload/avalon.lazyload":31,"./live/avalon.live":32,"./loading/avalon.loading":33,"./mask/avalon.mask":34,"./menu/avalon.menu":35,"./miniswitch/avalon.miniswitch":36,"./mmPromise/avalon.mmPromise":37,"./mmPromise/mmPromise":38,"./mmRequest/avalon.mmRequest":39,"./mmRequest/mmRequest":40,"./mmRouter/avalon.mmRouter":41,"./mmRouter/mmHistory":42,"./mmRouter/mmRouter":43,"./mmRouter/mmState":44,"./notice/avalon.notice":45,"./pager/avalon.pager":46,"./position/avalon.position":47,"./preview/avalon.preview":48,"./progressbar/avalon.progressbar":49,"./rating/avalon.rating":50,"./resizable/avalon.resizable":51,"./scrollbar/avalon.scrollbar":52,"./scrollspy/avalon.scrollspy":53,"./simplegrid/avalon.simplegrid":54,"./slider/avalon.slider":55,"./smartgrid/avalon.smartgrid":56,"./spinner/avalon.spinner":57,"./store/avalon.store":58,"./switchdropdown/avalon.switchdropdown":59,"./tab/avalon.tab":60,"./textbox/avalon.suggest":61,"./textbox/avalon.textbox":62,"./timer/avalon.timer":63,"./tooltip/avalon.tooltip":64,"./tree/avalon.tree":68,"./tree/avalon.tree.async":65,"./tree/avalon.tree.check":66,"./tree/avalon.tree.edit":67,"./tree/avalon.tree.menu":69,"./uptop/avalon.uptop":70,"./validation/avalon.validation":71}],2:[function(innerRequire,module,exports){
var av = typeof avalon === "undefined" ? {} : avalon
module.exports = av
},{}],3:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<div class=\"oni-accordion-inner\" ms-each-item=\"data\" ms-class=\"oni-accordion-horizontal: direction==='horizontal'\">\n    <div class=\"oni-accordion-header oni-widget-header oni-state-default oni-accordion-trigger\"\n\n        ms-class=\"MS_OPTION_ACTIVECLASS:item.toggle\"\n        ms-class-1=\"oni-corner-top: item.toggle && direction==='vertical'\"\n        ms-class-2=\"oni-corner-all: direction==='vertical'\"\n        MS_OPTION_HORIZONTAL_HEADER_WIDTH_HEIGHT\n        ms-hover=\"oni-state-hover\">\n        <h2 ms-if=\"direction==='horizontal'\" MS_OPTION_HORIZONTAL_TITLE>{{item.title}} {{$index}}{{currentIndex}}</h2>\n        <span ms-if=\"direction==='vertical'\">{{item.title}}</span>\n    </div>\n    <div class=\"oni-accordion-content oni-widget-content oni-state-default\" \n         ms-visible=\"item.toggle\"\n         ms-class=\"oni-corner-bottom: direction==='vertical'\"\n         MS_OPTION_HORIZONTAL_CONTENT_WIDTH_HEIGHT>\n         <div MS_OPTION_HORIZONTAL_CONTENT_WIDTH_HEIGHT>\n            {{item.content|html}}\n         </div>\n    </div>\n</div>\nMS_OPTION_MODE_CARET\n<div class=\"oni-accordion-inner\" ms-each-item=\"data\">\n    <div class=\"oni-accordion-header oni-widget-header oni-state-default oni-corner-all\"\n        ms-class=\"MS_OPTION_ACTIVECLASS:item.toggle\"\n        ms-class-1=\"oni-corner-top: item.toggle\"\n        ms-hover=\"oni-state-hover\">\n        <span class=\"oni-accordion-icon-wrap oni-accordion-trigger\">\n            <i class=\"oni-icon oni-icon-caret-right\">&#xf040;</i>\n            <i class=\"oni-icon oni-icon-caret-down\">&#xf033;</i>\n        </span> \n        {{item.title}}\n    </div>\n    <div class=\"oni-accordion-content oni-state-default oni-widget-content oni-corner-bottom\" ms-visible=\"item.toggle\">\n        {{item.content|html}}\n    </div>\n</div>";

module.exports = (
function () {
    var template = sourceHTML, templateArr = template.split('MS_OPTION_MODE_CARET'), caretTemplate = templateArr[1], navTemplate = templateArr[0], accordionNum = 0;
    var widget = avalon.ui.accordion = function (element, data, vmodels) {
            var options = data.accordionOptions, vmodelsLength = vmodels.length, accordionOpts = data.value.split(',')[2], msData = Object.keys(element.msData), _data = [], dataVM = [], accordionTemp = '', horizontalHeaderStyle = 'ms-css-width=\'headerWidth\' ms-css-height=\'headerAndContentHeight\'', horizontalH2Style = 'ms-css-bottom=\'-headerWidth\' ms-css-width=\'headerAndContentHeight\' ms-css-height=\'headerWidth\'', horizontalContentStyle = 'ms-css-width=\'contentWidth\' ms-css-height=\'headerAndContentHeight\'', animateTime = 0;
            accordionNum += 1;
            if (vmodelsLength > 1) {
                // 存在嵌套的accordion时，需要手动将配置对象mix到options上，这就要求所有accordion的组件定义必须存在id和options选项，比如：ms-widget="accordion,accordionId,accordionOpts"
                avalon.mix(options, vmodels[vmodelsLength - 1][accordionOpts]);
            }
            navTemplate = options.direction === 'vertical' ? navTemplate.replace('MS_OPTION_HORIZONTAL_HEADER_WIDTH_HEIGHT', '').replace(/MS_OPTION_HORIZONTAL_CONTENT_WIDTH_HEIGHT/g, '') : navTemplate.replace('MS_OPTION_HORIZONTAL_HEADER_WIDTH_HEIGHT', horizontalHeaderStyle).replace(/MS_OPTION_HORIZONTAL_CONTENT_WIDTH_HEIGHT/g, horizontalContentStyle);
            if (options.direction === 'vertical') {
                accordionTemp = options.mode == 'caret' ? caretTemplate : navTemplate;
            } else {
                options.mode = 'nav';
                options.multiple = false;
                accordionTemp = navTemplate.replace('MS_OPTION_HORIZONTAL_TITLE', horizontalH2Style);
            }
            // 根据mode的不同使用不同的template
            options.template = options.getTemplate(accordionTemp, options);
            msData.forEach(function (item) {
                if (item.indexOf('ms-each') === 0) {
                    _data = element.msData[item];
                    dataVM = avalon.getModel(_data, vmodels);
                    _data = dataVM[1][dataVM[0]];
                    element.removeAttribute(item);
                    return false;
                }
            });
            options.data = !options.data.length ? _data.$model || _data : options.data;
            avalon.each(options.data, function (index, item) {
                var toggle = item.toggle;
                item.toggle = toggle !== void 0 ? toggle : false;
            });
            var vmodel = avalon.define(data.accordionId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'rendered',
                        'autoRun',
                        'template',
                        'accordionClass',
                        'currentTrigge',
                        'initIndex',
                        'multiple',
                        'trigger',
                        'triggerType',
                        'accordionVmodel',
                        'rootElement'
                    ];
                    vm.widgetElement = element;
                    vm.rootElement = {};
                    vm.$headers = [];
                    // 保存所有面板的header
                    vm.$panels = [];
                    // 保存所有的面板content
                    vm.$triggers = [];
                    /**
             * @interface 组件是否完成渲染,false未完成，true完成
             */
                    vm.rendered = false;
                    vm._renderView = function (continueScan) {
                        var template = options.template, accordionItems = '', elementClass = 'oni-accordion oni-accordion-mode-' + options.mode + ' js-accordion' + accordionNum + ' ' + options.accordionClass, header, content, trigger, accordionInnerWrapper, initIndex = options.initIndex;
                        avalon(element).addClass(elementClass);
                        element.setAttribute('ms-css-width', 'width');
                        template = template.replace(/MS_OPTION_ACTIVECLASS/g, options.currentTriggerClass);
                        element.innerHTML = template;
                        accordionInnerWrapper = element.children[0];
                        // accordion wrapper
                        accordionItems = accordionInnerWrapper.children;
                        header = accordionItems[0];
                        // header
                        content = accordionItems[1];
                        // panel
                        if (!!options.trigger) {
                            var headerChildren = header.children;
                            for (var i = 0, el; el = headerChildren[i++];) {
                                if (avalon(el).hasClass(options.trigger)) {
                                    trigger = el;
                                    break;
                                }
                            }
                        }
                        if (options.trigger && trigger) {
                            // 如果设置了触发 面板切换事件的节点class，那么将事件绑定在对应节点
                            trigger.setAttribute('ms-on-' + options.triggerType, options.triggerType + 'Callback($event,$index)');
                        } else {
                            // 未设置触发节点则在整个header上触发
                            header.setAttribute('ms-on-' + options.triggerType, options.triggerType + 'Callback($event,$index)');
                            avalon(header).css('cursor', 'pointer');
                        }
                        if (initIndex !== null) {
                            vmodel.currentIndex = initIndex;
                            vmodel.data[initIndex].toggle = true;
                        }
                        vm.rootElement = element.getElementsByTagName('*')[0];
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        vmodel.rendered = true;
                        setTimeout(function () {
                            // 渲染完组件之后，将对应面板的header和panel分别保存
                            for (var i = 0, el; el = accordionItems[i++];) {
                                var $el = avalon(el);
                                if ($el.hasClass('oni-accordion-header')) {
                                    vmodel.$headers.push(el);
                                    if (!!options.trigger) {
                                        var headerChildren = el.children;
                                        for (var j = 0, subEl; subEl = headerChildren[j++];) {
                                            if (avalon(subEl).hasClass(options.trigger)) {
                                                vmodel.$triggers.push(subEl);
                                                break;
                                            }
                                        }
                                    } else {
                                        vmodel.$triggers.push(el);
                                    }
                                } else if ($el.hasClass('oni-accordion-content')) {
                                    vmodel.$panels.push(el);
                                }
                            }
                        }, 400);
                    };
                    vm.$init = function (continueScan) {
                        if (!vmodel.data.length) {
                            // 从dom中抓取数据
                            var list = [], subEle, next = null;
                            while (subEle = element.firstChild) {
                                if (subEle.nodeType !== 1) {
                                    element.removeChild(subEle);
                                    continue;
                                }
                                next = subEle.nextSibling;
                                while (next.nodeType !== 1) {
                                    element.removeChild(next);
                                    next = subEle.nextSibling;
                                }
                                if (avalon(subEle).hasClass('title')) {
                                    list.push({
                                        title: subEle.innerHTML.trim(),
                                        content: next.innerHTML.trim(),
                                        toggle: false
                                    });
                                }
                                element.removeChild(subEle);
                                element.removeChild(next);
                            }
                            vmodel.data = list;
                        }
                        element.$vmodel = vmodel;
                        if (options.autoRun) {
                            vm._renderView(continueScan);
                        }
                    };
                    // 点击面板header时的回调,设置triggerType为click时执行
                    vm.clickCallback = function (event, index) {
                        vmodel._eventCallback(event, index);
                    };
                    // mouseenter面板header时的回调，设置triggerType为mouseenter时执行
                    vm.mouseenterCallback = function (event, index) {
                        vmodel._eventCallback(event, index);
                    };
                    /**
             * @interface 当组件移出DOM树时,系统自动调用的销毁函数
             */
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                    /**
             * @interface 重定义组件配置数据对象
             * @param data {Array} 结构如下：
             * <pre class="brush:javascript;gutter:false;toolbar:false">
                [{
                title: "标题1",
                content: "正文1"
                },
                {
                title: "标题2",
                content: "正文2"
                }] 
                </pre>
             *
             */
                    vm.setData = function (data) {
                        avalon.each(data, function (index, item) {
                            item.toggle = item.toggle !== void 0 ? item.toggle : false;
                        });
                        vmodel.data = data;
                        vmodel.currentIndex = -1;
                        vmodel._renderView();
                    };
                    /**
             * @interface 手工刷新组件视图,也可以传递参数data，重渲染组件视图
             * @param data {Array} 结构如下：
             * <pre class="brush:javascript;gutter:false;toolbar:false">
                [{
                title: "标题1",
                content: "正文1"
                },
                {
                title: "标题2",
                content: "正文2"
                }] 
                </pre>
             *
             */
                    vm.refresh = function (data) {
                        if (data) {
                            vmodel.setData(data);
                        } else if (!vmodel.rendered) {
                            vm._renderView();
                        }
                    };
                    /**
             * @interface 获得当前展开的accordion标题对象，仅在config.multiple == false时有效
             * @returns {ElementObj} 标题dom对象的引用
             */
                    vm.getCurrentHeader = function () {
                        if (options.multiple) {
                            return null;
                        }
                        return vmodel.$headers[this.currentIndex];
                    };
                    /**
             * @interface 获得当前展开的accordion面板对象，仅在config.multiple == false时有效
             * @returns {ElementObj} 面板dom对象的引用
             */
                    vm.getCurrentPanel = function () {
                        if (options.multiple) {
                            return null;
                        }
                        return vmodel.$panels[this.currentIndex];
                    };
                    /**
             * @interface 获得指定序号的accordion面板对应的标题节点对象
             * @param index {Number} 面板序号
             * @returns {ElementObj} 指定序号的标题dom对象的引用
             */
                    vm.getHeader = function (index) {
                        return vmodel.$headers[index];
                    };
                    /**
             * @interface 获得指定序号的accordion面板对应的面板节点对象
             * @param index {Number} 面板序号
             * @returns {ElementObj} 指定序号的面板dom对象的引用
             */
                    vm.getPanel = function (index) {
                        return vmodel.$panels[index];
                    };
                    /**
             * @interface 获得组件的面板数量
             * @returns {Number} 手风琴面板个数
             */
                    vm.getLength = function () {
                        return options.data.length;
                    };
                    /**
             * @interface 获得指定序号的accordion面板展开(1)/收起(0)状态
             * @param index {Number} 指定面板序号(从0开始)
             * @returns {Number} 1表示index对应面板展开，0表示收起
             */
                    vm.getStatus = function (index) {
                        return avalon(vmodel.$panels[index]).css('display') === 'none' ? 0 : 1;
                    };
                    /**
             * @interface 切换accordion面板的展开
             * @param index {Number} 指定面板序号(从0开始)
             */
                    vm.switchTo = function (index) {
                        var event = { target: vmodel.$triggers[index] };
                        if (options.onBeforeSwitch.call(event.target, index, vm.getHeader(index), vm.getPanel(index)) === false) {
                            return false;
                        }
                        vmodel.currentIndex = index;
                        vmodel.data[index].toggle = true;
                    };
                    vm._eventCallback = eventCallback;
                });
            vmodel.$watch('currentIndex', function (newVal, oldVal) {
                var panel = vmodel.getPanel(newVal);
                if (vmodel.direction == 'horizontal' && panel) {
                    clearTimeout(animateTime);
                    animate(panel, Number(vmodel.contentWidth) || 400);
                }
                if (!vmodel.multiple && oldVal !== -1) {
                    vmodel.data[oldVal].toggle = false;
                }
            });
            function eventCallback(event, index) {
                var header = vmodel.getHeader(index), $header = avalon(header), panel = vmodel.getPanel(index), dataItem = vmodel.data[index], itemToggle = !dataItem.toggle;
                if (index === vmodel.currentIndex && event.type === 'mouseenter') {
                    return;
                }
                if (options.onBeforeSwitch.call(event.target, index, header, panel) === false) {
                    return false;
                }
                vmodel.data[index].toggle = itemToggle;
                if (itemToggle) {
                    vmodel.currentIndex = index;
                }
                options.onSwitch.call(event.target, index, header, panel);
            }
            function animate(panel, width) {
                var currentWidth = 0;
                function widthAnimate() {
                    currentWidth += 10;
                    if (currentWidth > width) {
                        currentWidth = width;
                        panel.style.width = currentWidth + 'px';
                        clearTimeout(animateTime);
                        return false;
                    }
                    panel.style.width = currentWidth + 'px';
                    animateTime = setTimeout(widthAnimate, 10);
                }
                widthAnimate();
            }
            return vmodel;
        };
    widget.version = 1;
    widget.defaults = {
        width: '100%',
        //@config 配置组件宽度(type: Number || Percent)
        headerWidth: 30,
        //@config 组件水平展开时，头部的宽
        contentWidth: 400,
        //@config 组件水平展开时内容的宽
        headerAndContentHeight: 200,
        //@config 组件水平展开时的高度
        autoRun: true,
        //@config 告知组件是否自动渲染，设为false时需要手动调用refresh方法进行组件的解析渲染
        template: '',
        //@config 用户自定义template
        accordionClass: '',
        //@config 为accordion容器自定义的class
        currentTriggerClass: 'oni-state-active',
        //@config 展开accordion面板时，header添加的class
        /**
         * @interface 配置accordion组件要展示的数据对象，格式为
            <pre class="brush:javascript;gutter:false;toolbar:false">
            [
            {title: String, content: String},
            {title: String, content: String},
            {title: String, content: String}
             ]
            </pre> 
         */
        data: [],
        initIndex: null,
        //@config 初始展开第几个面板
        mode: 'caret',
        //@config 组件展开模式，取值说明："nav"=面板header无小三角图标，"caret"=展开面板有小三角图标，可以定义是点击图标展开面板还是点击header即展开，默认是点击header即展开，当然也可以通过getTemplate自定义模板
        multiple: false,
        //@config 是否可以同时打开多个面板
        widgetElement: '',
        //@interface 保存绑定组件元素的引用
        trigger: 'oni-accordion-header',
        //@config 触发展开面板的dom节点对应class，比如mode为caret时想要只通过小图标展开隐藏panel时可以设置为"oni-accordion-trigger"
        triggerType: 'click',
        //@config 触发展开面板的事件类型，可以是：click|mouseenter
        currentIndex: -1,
        //@interface 组件最新展开的面板序号，不可配置
        direction: 'vertical',
        //@config 组件的展开方向，默认为垂直展开，也可以水平展开("horizontal")
        /**
         * @config {Function} 组件面板展开前回调函数
         * @param index {Number} 面板序号
         * @param header {Object} 标题区域节点对象
         * @param panel {Object} 面板区域节点对象
         * @returns {Boolean| Undefined} 若返回false则不展开面板 
         */
        onBeforeSwitch: avalon.noop,
        //@config
        /**
         * @config {Function} 组件面板展开后的回调函数
         * @param index {Number} 面板序号
         * @param header {Object} 标题区域节点对象
         * @param panel {Object} 面板区域节点对象
         */
        onSwitch: avalon.noop,
        //@config
        /**
         * @config {Function} 远程更改数据
         * @param vmodel {Object} 组件自身vmodel
         * @param options {Object} 组件的配置对象
         * @param vmodels {Array} 组件的祖先vmodel组成的数组链
         */
        onInit: avalon.noop,
        //@config
        /**
         * @config {Function} 方便用户自定义模板
         * @param str {String} 默认模板
         * @param opts {Object} vmodel
         * @returns {String} 新模板
         */
        getTemplate: function (str, options) {
            return str;
        }
    };
    return avalon;
}
)();
},{"../avalon.getModel":6}],4:[function(innerRequire,module,exports){
innerRequire("avalon");

module.exports = (
function () {
    /*********************************************************************
     *                      主函数                                   *
     **********************************************************************/
    var effect = avalon.fn.animate = function (properties, options) {
            var frame = new Frame(this[0]);
            if (typeof properties === 'number') {
                //如果第一个为数字
                frame.duration = properties;
            } else if (typeof properties === 'object') {
                for (var name in properties) {
                    //处理第一个参数
                    var p = avalon.cssName(name) || name;
                    if (name !== p) {
                        properties[p] = properties[name];
                        //转换为驼峰风格borderTopWidth, styleFloat
                        delete properties[name]    //去掉连字符风格 border-top-width, float
;
                    }
                }
                frame.props = properties;
            }
            addOptions.apply(frame, arguments);
            //处理第二,第三...参数
            //将关键帧插入到时间轴中或插到已有的某一帧的子列队,等此帧完毕,让它再进入时间轴
            insertFrame(frame);
            return this;
        };
    //分解用户的传参
    function addOptions(properties) {
        //如果第二参数是对象
        for (var i = 1; i < arguments.length; i++) {
            addOption(this, arguments[i]);
        }
        this.duration = typeof this.duration === 'number' ? this.duration : 400;
        //动画时长
        this.queue = !!(this.queue == null || this.queue);
        //是否插入子列队
        this.easing = avalon.easing[this.easing] ? this.easing : 'swing';
        //缓动公式的名字
        this.update = true;
        //是否能更新
        this.gotoEnd = false    //是否立即跑到最后一帧
;
    }
    function addOption(frame, p, name) {
        if (p === 'slow') {
            frame.duration = 600;
        } else if (p === 'fast') {
            frame.duration = 200;
        } else {
            switch (avalon.type(p)) {
            case 'object':
                for (var i in p) {
                    addOption(frame, p[i], i);
                }
                break;
            case 'number':
                frame.duration = p;
                break;
            case 'string':
                frame.easing = p;
                break;
            case 'function':
                //绑定各种回调
                name = name || 'complete';
                frame.bind(name, p);
                break;
            }
        }
    }
    /*********************************************************************
     *                          缓动公式                              *
     **********************************************************************/
    avalon.mix(effect, { fps: 30 });
    var bezier = {
            'linear': [
                0.25,
                0.25,
                0.75,
                0.75
            ],
            'ease': [
                0.25,
                0.1,
                0.25,
                1
            ],
            'easeIn': [
                0.42,
                0,
                1,
                1
            ],
            'easeOut': [
                0,
                0,
                0.58,
                1
            ],
            'easeInOut': [
                0.42,
                0,
                0.58,
                1
            ],
            'easeInQuad': [
                0.55,
                0.085,
                0.68,
                0.53
            ],
            'easeInCubic': [
                0.55,
                0.055,
                0.675,
                0.19
            ],
            'easeInQuart': [
                0.895,
                0.03,
                0.685,
                0.22
            ],
            'easeInQuint': [
                0.755,
                0.05,
                0.855,
                0.06
            ],
            'easeInSine': [
                0.47,
                0,
                0.745,
                0.715
            ],
            'easeInExpo': [
                0.95,
                0.05,
                0.795,
                0.035
            ],
            'easeInCirc': [
                0.6,
                0.04,
                0.98,
                0.335
            ],
            'easeInBack': [
                0.6,
                -0.28,
                0.735,
                0.045
            ],
            'easeOutQuad': [
                0.25,
                0.46,
                0.45,
                0.94
            ],
            'easeOutCubic': [
                0.215,
                0.61,
                0.355,
                1
            ],
            'easeOutQuart': [
                0.165,
                0.84,
                0.44,
                1
            ],
            'easeOutQuint': [
                0.23,
                1,
                0.32,
                1
            ],
            'easeOutSine': [
                0.39,
                0.575,
                0.565,
                1
            ],
            'easeOutExpo': [
                0.19,
                1,
                0.22,
                1
            ],
            'easeOutCirc': [
                0.075,
                0.82,
                0.165,
                1
            ],
            'easeOutBack': [
                0.175,
                0.885,
                0.32,
                1.275
            ],
            'easeInOutQuad': [
                0.455,
                0.03,
                0.515,
                0.955
            ],
            'easeInOutCubic': [
                0.645,
                0.045,
                0.355,
                1
            ],
            'easeInOutQuart': [
                0.77,
                0,
                0.175,
                1
            ],
            'easeInOutQuint': [
                0.86,
                0,
                0.07,
                1
            ],
            'easeInOutSine': [
                0.445,
                0.05,
                0.55,
                0.95
            ],
            'easeInOutExpo': [
                1,
                0,
                0,
                1
            ],
            'easeInOutCirc': [
                0.785,
                0.135,
                0.15,
                0.86
            ],
            'easeInOutBack': [
                0.68,
                -0.55,
                0.265,
                1.55
            ],
            'custom': [
                0,
                0.35,
                0.5,
                1.3
            ],
            'random': [
                Math.random().toFixed(3),
                Math.random().toFixed(3),
                Math.random().toFixed(3),
                Math.random().toFixed(3)
            ]
        };
    avalon.easing = {
        //缓动公式
        linear: function (pos) {
            return pos;
        },
        swing: function (pos) {
            return -Math.cos(pos * Math.PI) / 2 + 0.5;
        }
    };
    //https://github.com/rdallasgray/bez
    //http://st-on-it.blogspot.com/2011/05/calculating-cubic-bezier-function.html
    //https://github.com/rightjs/rightjs-core/blob/master/src/fx/fx.js
    avalon.each(bezier, function (key, value) {
        avalon.easing[key] = bezierToEasing([
            value[0],
            value[1]
        ], [
            value[2],
            value[3]
        ]);
    });
    function bezierToEasing(p1, p2) {
        var A = [
                null,
                null
            ], B = [
                null,
                null
            ], C = [
                null,
                null
            ], derivative = function (t, ax) {
                C[ax] = 3 * p1[ax], B[ax] = 3 * (p2[ax] - p1[ax]) - C[ax], A[ax] = 1 - C[ax] - B[ax];
                return t * (C[ax] + t * (B[ax] + t * A[ax]));
            }, bezierXY = function (t) {
                return C[0] + t * (2 * B[0] + 3 * A[0] * t);
            }, parametric = function (t) {
                var x = t, i = 0, z;
                while (++i < 14) {
                    z = derivative(x, 0) - t;
                    if (Math.abs(z) < 0.001)
                        break;
                    x -= z / bezierXY(x);
                }
                return x;
            };
        return function (t) {
            return derivative(parametric(t), 1);
        };
    }
    /*********************************************************************
     *                      时间轴                                    *
     **********************************************************************/
    /**
     * @other
     * <p>一个时间轴<code>avalon.timeline</code>中包含许多帧, 一帧里面有各种渐变动画, 渐变的轨迹是由缓动公式所规定</p>
     */
    var timeline = avalon.timeline = [];
    function insertFrame(frame) {
        //插入关键帧
        if (frame.queue) {
            //如果插入到已有的某一帧的子列队
            var gotoQueue = 1;
            for (var i = timeline.length, el; el = timeline[--i];) {
                if (el.elem === frame.elem) {
                    //★★★第一步
                    el.troops.push(frame);
                    //子列队
                    gotoQueue = 0;
                    break;
                }
            }
            if (gotoQueue) {
                //★★★第二步
                timeline.unshift(frame);
            }
        } else {
            //插入时间轴
            timeline.push(frame);
        }
        if (insertFrame.id === null) {
            //时间轴只要存在帧就会执行定时器
            insertFrame.id = setInterval(deleteFrame, 1000 / effect.fps);
        }
    }
    insertFrame.id = null;
    function deleteFrame() {
        var i = timeline.length;
        while (--i >= 0) {
            if (!timeline[i].paused) {
                //如果没有被暂停
                //如果返回false或元素不存在,就从时间轴中删掉此关键帧
                if (!(timeline[i].elem && enterFrame(timeline[i], i))) {
                    timeline.splice(i, 1);
                }
            }
        }
        //如果时间轴里面没有关键帧,那么停止定时器,节约性能
        timeline.length || (clearInterval(insertFrame.id), insertFrame.id = null);
    }
    function enterFrame(frame, index) {
        //驱动主列队的动画实例进行补间动画(update)，
        //并在动画结束后，从子列队选取下一个动画实例取替自身
        var now = +new Date();
        if (!frame.startTime) {
            //第一帧
            frame.fire('before');
            //动画开始前做些预操作
            var elem = frame.elem;
            if (avalon.css(elem, 'display') === 'none' && !elem.dataShow) {
                frame.build()    //如果是一开始就隐藏,那就必须让它显示出来
;
            }
            frame.createTweens();
            frame.build();
            //如果是先hide再show,那么执行createTweens后再执行build则更为平滑
            frame.startTime = now;
        } else {
            //中间自动生成的补间
            var per = (now - frame.startTime) / frame.duration;
            var end = frame.gotoEnd || per >= 1;
            //gotoEnd可以被外面的stop方法操控,强制中止
            if (frame.update) {
                for (var i = 0, tween; tween = frame.tweens[i++];) {
                    tween.run(per, end);
                }
                frame.fire('step')    //每执行一帧调用的回调
;
            }
            if (end) {
                //最后一帧
                frame.fire('after');
                //动画结束后执行的一些收尾工作
                frame.fire('complete');
                //执行用户回调
                if (frame.revert) {
                    //如果设置了倒带
                    this.revertTweens();
                    delete this.startTime;
                    this.gotoEnd = false;
                } else {
                    var neo = frame.troops.shift();
                    if (!neo) {
                        return false;
                    }
                    //如果存在排队的动画,让它继续
                    timeline[index] = neo;
                    neo.troops = frame.troops;
                }
            }
        }
        return true;
    }
    /*********************************************************************
     *                                  逐帧动画                            *
     **********************************************************************/
    /**
     * @other
     * <p>avalon.fn.delay, avalon.fn.slideDown, avalon.fn.slideUp,
     * avalon.fn.slideToggle, avalon.fn.fadeIn, avalon.fn.fadeOut,avalon.fn.fadeToggle
     * avalon.fn.show, avalon.fn.hide, avalon.fn.toggle这些方法其实都是avalon.fn.animate的
     * 二次包装，包括<code>avalon.fn.animate</code>在内，他们的功能都是往时间轴添加一个帧对象(Frame)</p>
     *<p>帧对象能在时间轴内存在一段时间，持续修改某一元素的N个样式或属性。</p>
     *<p><strong>Frame</strong>对象拥有以下方法与属性</p>
     <table class="table-doc" border="1">
     <colgroup>
     <col width="180"/> <col width="80"/> <col width="120"/>
     </colgroup>
     <tr>
     <th>名字</th><th>类型</th><th>默认值</th><th>说明</th>
     </tr>
     <tr>
     <td>elem</td><td>Element</td><td></td><td>处于动画状态的元素节点</td>
     </tr>
     <tr>
     <td>$events</td><td>Object</td><td>{}</td><td>放置各种回调</td>
     </tr>
     <tr>
     <td>troops</td><td>Array</td><td>[]</td><td>当queue为true，同一个元素产生的帧对象会放在这里</td>
     </tr>
     <tr>
     <td>tweens</td><td>Array</td><td>[]</td><td>放置各种补间动画Tween</td>
     </tr>
     <tr>
     <td>orig</td><td>Object</td><td>{}</td><td>保存动画之前的样式，用于在隐藏后还原</td>
     </tr>
     <tr>
     <td>dataShow</td><td>Object</td><td>{}</td><td>保存元素在显示时的各种尺寸，用于在显示前还原</td>
     </tr>
     
     <tr>
     <td>bind(type, fn, unshift)</td><td></td><td></td><td>
     <table border="1">
     <tbody><tr>
     <th style="width:100px">参数名/返回值</th><th style="width:70px">类型</th> <th>说明</th> </tr>
     <tr>
     <td>type</td>
     <td>String</td>
     <td>事件名</td>
     </tr>
     <tr>
     <td>fn</td>
     <td>Function</td>
     <td>回调，this为元素节点</td>
     </tr>
     <tr>
     <td>unshift</td>
     <td>Undefined|String</td>
     <td>判定是插在最前还是最后</td>
     </tr>
     </tbody></table>
     </td>
     </tr>
     <tr>
     <td>fire(type, [otherArgs..])</td><td></td><td></td><td>触发回调，可以传N多参数</td></tr>           
     </table>
     */
    function Frame(elem) {
        this.$events = {};
        this.elem = elem;
        this.troops = [];
        this.tweens = [];
        this.orig = [];
        this.props = {};
        this.dataShow = {};
    }
    var root = document.documentElement;
    avalon.isHidden = function (node) {
        return node.sourceIndex === 0 || avalon.css(node, 'display') === 'none' || !avalon.contains(root, node);
    };
    Frame.prototype = {
        constructor: Frame,
        bind: function (type, fn, unshift) {
            var fns = this.$events[type] || (this.$events[type] = []);
            var method = unshift ? 'unshift' : 'push';
            fns[method](fn);
        },
        fire: function (type) {
            var args = Array.prototype.slice.call(arguments, 1);
            var fns = this.$events[type] || [];
            for (var i = 0, fn; fn = fns[i++];) {
                fn.call(this.elem, args);
            }
        },
        build: function () {
            var frame = this;
            var elem = frame.elem;
            var props = frame.props;
            var style = elem.style;
            var inlineBlockNeedsLayout = !window.getComputedStyle;
            //show 开始时计算其width1 height1 保存原来的width height display改为inline-block或block overflow处理 赋值（width1，height1）
            //hide 保存原来的width height 赋值为(0,0) overflow处理 结束时display改为none;
            //toggle 开始时判定其是否隐藏，使用再决定使用何种策略
            if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
                //如果是动画则必须将它显示出来
                frame.overflow = [
                    style.overflow,
                    style.overflowX,
                    style.overflowY
                ];
                var display = style.display || avalon.css(elem, 'display');
                var oldDisplay = elem.getAttribute('olddisplay');
                if (!oldDisplay) {
                    if (display === 'none') {
                        style.display = '';
                        //尝试清空行内的display
                        display = avalon.css(elem, 'display');
                        if (display === 'none') {
                            display = avalon.parseDisplay(elem.nodeName);
                        }
                    }
                    elem.setAttribute('olddisplay', display);
                } else {
                    if (display !== 'none') {
                        elem.setAttribute('olddisplay', display);
                    } else {
                        display = oldDisplay;
                    }
                }
                style.display = display;
                //修正内联元素的display为inline-block，以让其可以进行width/height的动画渐变
                if (display === 'inline' && avalon.css(elem, 'float') === 'none') {
                    if (!inlineBlockNeedsLayout || avalon.parseDisplay(elem.nodeName) === 'inline') {
                        style.display = 'inline-block';
                    } else {
                        style.zoom = 1;
                    }
                }
            }
            if (frame.overflow) {
                style.overflow = 'hidden';
                frame.bind('after', function () {
                    style.overflow = frame.overflow[0];
                    style.overflowX = frame.overflow[1];
                    style.overflowY = frame.overflow[2];
                    frame.overflow = null;
                });
            }
            frame.bind('after', function () {
                if (frame.showState === 'hide') {
                    this.style.display = 'none';
                    this.dataShow = {};
                    for (var i in frame.orig) {
                        //还原为初始状态
                        this.dataShow[i] = frame.orig[i];
                        avalon.css(this, i, frame.orig[i]);
                    }
                }
            });
            this.build = avalon.noop;
        },
        createTweens: function () {
            var hidden = avalon.isHidden(this.elem);
            for (var i in this.props) {
                createTweenImpl(this, i, this.props[i], hidden);
            }
        },
        revertTweens: function () {
            for (var i = 0, tween; tween = this.tweens[i++];) {
                var start = tween.start;
                var end = tween.end;
                tween.start = end;
                tween.end = start;
                this.props[tween.name] = Array.isArray(tween.start) ? 'rgb(' + tween.start + ')' : tween.unit ? tween.start + tween.unit : tween.start;
            }
            this.revert = !this.revert;
        }
    };
    var rfxnum = new RegExp('^(?:([+-])=|)(' + /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source + ')([a-z%]*)$', 'i');
    function createTweenImpl(frame, name, value, hidden) {
        var elem = frame.elem;
        var dataShow = elem.dataShow || {};
        var tween = new Tween(name, frame);
        var from = dataShow[name] || tween.cur();
        //取得起始值
        var to;
        if (/color$/.test(name)) {
            //用于分解属性包中的样式或属性,变成可以计算的因子
            parts = [
                color2array(from),
                color2array(value)
            ];
        } else {
            parts = rfxnum.exec(from);
            var unit = parts && parts[3] || (avalon.cssNumber[name] ? '' : 'px');
            //处理 toggle, show, hide
            if (value === 'toggle') {
                value = hidden ? 'show' : 'hide';
            }
            if (value === 'show') {
                frame.showState = 'show';
                avalon.css(elem, name, 0);
                parts = [
                    0,
                    parseFloat(from)
                ];
            } else if (value === 'hide') {
                frame.showState = 'hide';
                frame.orig[name] = from;
                parts = [
                    parseFloat(from),
                    0
                ];
                value = 0;
            } else {
                // "18em"  "+=18em"
                parts = rfxnum.exec(value);
                //["+=18em", "+=", "18", "em"]
                if (parts) {
                    parts[2] = parseFloat(parts[2]);
                    //18
                    if (parts[3] && parts[3] !== unit) {
                        //如果存在单位，并且与之前的不一样，需要转换
                        var clone = elem.cloneNode(true);
                        clone.style.visibility = 'hidden';
                        clone.style.position = 'absolute';
                        elem.parentNode.appendChild(clone);
                        avalon.css(clone, name, parts[2] + (parts[3] ? parts[3] : 0));
                        parts[2] = parseFloat(avalon.css(clone, name));
                        elem.parentNode.removeChild(clone);
                    }
                    to = parts[2];
                    from = parseFloat(from);
                    if (parts[1]) {
                        to = from + (parts[1] + 1) * parts[2];
                    }
                    parts = [
                        from,
                        to
                    ];
                }
            }
        }
        from = parts[0];
        to = parts[1];
        if (from + '' !== to + '') {
            //不处理起止值都一样的样式与属性
            tween.start = from;
            tween.end = to;
            tween.unit = unit;
            frame.tweens.push(tween);
        } else {
            delete frame.props[name];
        }
    }
    /*********************************************************************
     *                                 渐变动画                            *
     **********************************************************************/
    /**
     * @other
     * <p>渐变动画<code>Tween</code>是我们实现各种特效的最小单位，它用于修改某一个属性值或样式值</p>
     *<p><strong>Tween</strong>对象拥有以下方法与属性</p>
     <table class="table-doc" border="1">
     <colgroup>
     <col width="180"/> <col width="80"/> <col width="120"/>
     </colgroup>
     <tr>
     <th>名字</th><th>类型</th><th>默认值</th><th>说明</th>
     </tr>
     <tr>
     <td>elem</td><td>Element</td><td></td><td>元素节点</td>
     </tr>
     <tr>
     <td>prop</td><td>String</td><td>""</td><td>属性名或样式名，以驼峰风格存在</td>
     </tr>
     <tr>
     <td>start</td><td>Number</td><td>0</td><td>渐变的开始值</td>
     </tr>
     <tr>
     <td>end</td><td>Number</td><td>0</td><td>渐变的结束值</td>
     </tr>
     <tr>
     <td>now</td><td>Number</td><td>0</td><td>当前值</td>
     </tr>
     <tr>
     <td>run(per, end)</td><td></td><td></td><td>更新元素的某一样式或属性，内部调用</td>
     </tr>
     <tr>
     <td>cur()</td><td></td><td></td><td>取得当前值</td>
     </tr>
     </table>
     */
    function Tween(prop, options) {
        this.elem = options.elem;
        this.prop = prop;
        this.easing = avalon.easing[options.easing];
        if (/color$/i.test(prop)) {
            this.update = this.updateColor;
        }
    }
    Tween.prototype = {
        constructor: Tween,
        cur: function () {
            //取得当前值
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (per, end) {
            //更新元素的某一样式或属性
            this.update(per, end);
            var hook = Tween.propHooks[this.prop];
            if (hook && hook.set) {
                hook.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
        },
        updateColor: function (per, end) {
            if (end) {
                var rgb = this.end;
            } else {
                var pos = this.easing(per);
                rgb = this.start.map(function (from, i) {
                    return Math.max(Math.min(parseInt(from + (this.end[i] - from) * pos, 10), 255), 0);
                }, this);
            }
            this.now = 'rgb(' + rgb + ')';
        },
        update: function (per, end) {
            this.now = end ? this.end : this.start + this.easing(per) * (this.end - this.start);
        }
    };
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result = avalon.css(tween.elem, tween.prop);
                return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
                avalon.css(tween.elem, tween.prop, tween.now + tween.unit);
            }
        }
    };
    avalon.each([
        'scrollTop',
        'scollLeft'
    ], function (name) {
        Tween.propHooks[name] = {
            get: function (tween) {
                return tween.elem[tween.name];
            },
            set: function (tween) {
                tween.elem[tween.name] = tween.now;
            }
        };
    });
    /*********************************************************************
     *                                  原型方法                            *
     **********************************************************************/
    avalon.fn.mix({
        delay: function (ms) {
            return this.animate(ms);
        },
        pause: function () {
            var cur = this[0];
            for (var i = 0, frame; frame = timeline[i]; i++) {
                if (frame.elme === cur) {
                    frame.paused = new Date() - 0;
                }
            }
            return this;
        },
        resume: function () {
            var now = new Date();
            var elem = this[0];
            for (var i = 0, fx; fx = timeline[i]; i++) {
                if (fx.elem === elem) {
                    fx.startTime += now - fx.paused;
                    delete fx.paused;
                }
            }
            return this;
        },
        //如果clearQueue为true，是否清空列队
        //如果gotoEnd 为true，是否跳到此动画最后一帧
        stop: function (clearQueue, gotoEnd) {
            clearQueue = clearQueue ? '1' : '';
            gotoEnd = gotoEnd ? '1' : '0';
            var stopCode = parseInt(clearQueue + gotoEnd, 2);
            //返回0 1 2 3
            var node = this[0];
            for (var i = 0, frame; frame = timeline[i]; i++) {
                if (frame.elem === node) {
                    frame.gotoEnd = true;
                    switch (stopCode) {
                    //如果此时调用了stop方法
                    case 0:
                        //中断当前动画，继续下一个动画
                        frame.update = frame.revert = false;
                        break;
                    case 1:
                        //立即跳到最后一帧，继续下一个动画
                        frame.revert = false;
                        break;
                    case 2:
                        //清空该元素的所有动画
                        delete frame.elem;
                        break;
                    case 3:
                        //立即完成该元素的所有动画
                        frame.troops.forEach(function (a) {
                            a.gotoEnd = true;
                        });
                        break;
                    }
                }
            }
            return this;
        }
    });
    /*********************************************************************
     *                                 常用特效                            *
     **********************************************************************/
    var fxAttrs = [
            [
                'height',
                'marginTop',
                'marginBottom',
                'borderTopWidth',
                'borderBottomWidth',
                'paddingTop',
                'paddingBottom'
            ],
            [
                'width',
                'marginLeft',
                'marginRight',
                'borderLeftWidth',
                'borderRightWidth',
                'paddingLeft',
                'paddingRight'
            ],
            ['opacity']
        ];
    function genFx(type, num) {
        //生成属性包
        var obj = {};
        fxAttrs.concat.apply([], fxAttrs.slice(0, num)).forEach(function (name) {
            obj[name] = type;
            if (~name.indexOf('margin')) {
                Tween.propHooks[name] = {
                    get: Tween.propHooks._default.get,
                    set: function (tween) {
                        tween.elem.style[tween.name] = Math.max(tween.now, 0) + tween.unit;
                    }
                };
            }
        });
        return obj;
    }
    var effects = {
            slideDown: genFx('show', 1),
            slideUp: genFx('hide', 1),
            slideToggle: genFx('toggle', 1),
            fadeIn: { opacity: 'show' },
            fadeOut: { opacity: 'hide' },
            fadeToggle: { opacity: 'toggle' }
        };
    avalon.each(effects, function (method, props) {
        avalon.fn[method] = function () {
            var args = [].concat.apply([props], arguments);
            return this.animate.apply(this, args);
        };
    });
    String('toggle,show,hide').replace(avalon.rword, function (name) {
        avalon.fn[name] = function () {
            var args = [].concat.apply([genFx(name, 3)], arguments);
            return this.animate.apply(this, args);
        };
    });
    /*********************************************************************
     *                      转换各种颜色值为RGB数组                            *
     **********************************************************************/
    var colorMap = {
            'black': [
                0,
                0,
                0
            ],
            'gray': [
                128,
                128,
                128
            ],
            'white': [
                255,
                255,
                255
            ],
            'orange': [
                255,
                165,
                0
            ],
            'red': [
                255,
                0,
                0
            ],
            'green': [
                0,
                128,
                0
            ],
            'yellow': [
                255,
                255,
                0
            ],
            'blue': [
                0,
                0,
                255
            ]
        };
    if (window.VBArray) {
        var parseColor = new function () {
                var body;
                try {
                    var doc = new ActiveXObject('htmlfile');
                    doc.write('<body>');
                    doc.close();
                    body = doc.body;
                } catch (e) {
                    body = createPopup().document.body;
                }
                var range = body.createTextRange();
                return function (color) {
                    body.style.color = String(color).trim();
                    var value = range.queryCommandValue('ForeColor');
                    return [
                        value & 255,
                        (value & 65280) >> 8,
                        (value & 16711680) >> 16
                    ];
                };
            }();
    }
    function color2array(val) {
        //将字符串变成数组
        var color = val.toLowerCase(), ret = [];
        if (colorMap[color]) {
            return colorMap[color];
        }
        if (color.indexOf('rgb') === 0) {
            var match = color.match(/(\d+%?)/g), factor = match[0].indexOf('%') !== -1 ? 2.55 : 1;
            return colorMap[color] = [
                parseInt(match[0]) * factor,
                parseInt(match[1]) * factor,
                parseInt(match[2]) * factor
            ];
        } else if (color.charAt(0) === '#') {
            if (color.length === 4)
                color = color.replace(/([^#])/g, '$1$1');
            color.replace(/\w{2}/g, function (a) {
                ret.push(parseInt(a, 16));
            });
            return colorMap[color] = ret;
        }
        if (window.VBArray) {
            return colorMap[color] = parseColor(color);
        }
        return colorMap.white;
    }
    avalon.parseColor = color2array;
    return avalon;
}
)();
},{"avalon":2}],5:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<ul class=\"oni-at-popup\" >\n    <li class=\"oni-at-item\" \n        ms-repeat-item=\"_datalist\" \n        ms-class=\"oni-state-hover:activeIndex == $index\"\n        ms-mouseenter=\"_hover($event,$index)\"\n        ms-click=\"_select\"\n        >{{item | html}}</li>\n</ul>\n";

module.exports = (
function () {
    var widget = avalon.ui.at = function (element, data, vmodels) {
            var options = data.atOptions, $element = avalon(element), keyupCallback, blurCallback, keydownCallback, popup;
            options.template = options.getTemplate(template, options);
            var lastModified = new Date() - 0;
            //上次更新时间
            var queryStartIndex, fakeTextArea;
            var vmodel = avalon.define(data.atId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'at',
                        'widgetElement',
                        'datalist',
                        'template'
                    ];
                    vm.widgetElement = element;
                    vm.$init = function (continueScan) {
                        var _vmodels = [vmodel].concat(vmodels);
                        blurCallback = $element.bind('blur', function (e) {
                            if (!vmodel.$model.__mouseenter__ && vmodel.toggle) {
                                vmodel.toggle = false;
                            }
                        });
                        keydownCallback = $element.bind('keydown', function (e) {
                            if (e.keyCode === 13 && popup) {
                                //我们可以在菜单中上下移动，然后接回车选中并且最后隐藏菜单
                                //在这个过程中，不会触发浏览器默认的回车换行行为
                                e.preventDefault();
                            }
                            if (e.which === 38) {
                                e.preventDefault();
                            }
                        });
                        keyupCallback = $element.bind('keyup', function (e) {
                            var el = this;
                            if (e.shiftKey) {
                                //防止键入@时触发两次
                                return;
                            }
                            setTimeout(function () {
                                var caret = getCaretPosition(el);
                                var value = el.value;
                                var at = options.at;
                                //查询标记
                                var query = null;
                                //查询字符串,用于highlightData方法
                                //如果光标直接位于光标之后，那么就查询所有
                                var queryAll = value.charAt(caret - 1) === at;
                                //取得离光标左边最近的@的位置(也就是插入菜单的位置)
                                var _queryStartIndex = value.slice(0, caret).lastIndexOf(at);
                                if (_queryStartIndex !== -1) {
                                    queryStartIndex = _queryStartIndex + 1;
                                } else {
                                    //如果光标之前的element.value不存在@那么关闭菜单
                                    return vmodel.toggle = false;
                                    return;
                                }
                                if (queryAll) {
                                    query = '';
                                }
                                if (!queryAll && typeof queryStartIndex === 'number') {
                                    var query = value.slice(queryStartIndex, caret);
                                    if (query.indexOf(' ') >= 0 || query.length > options.maxLength) {
                                        return vmodel.toggle = false    //如果存在空白或超出长度, 就关闭子菜单
;
                                    } else {
                                        query = query.length >= options.minLength ? query : '';
                                    }
                                }
                                if (typeof query === 'string') {
                                    vmodel.query = query;
                                    if (!popup) {
                                        //如果菜单不存在创建菜单
                                        var rectValue = value.slice(0, caret);
                                        var rectHTML = rectValue;
                                        //每隔一个字符插入一个<wbr>，实现强制换行，插入<bdo>包围@，方便以后查找
                                        // var rectHTML = rectValue.split("").join("<wbr>") + "<wbr>"
                                        //为性能起见，只有用户定位于@后才重刷fakeTextArea里面的HTML结构
                                        rectHTML = rectHTML.replace(new RegExp(escapeRegExp(at), 'img'), '<bdo>' + at + '</bdo>');
                                        //创建弹出层
                                        popup = vmodel._popup.call(el, rectHTML);
                                        vmodel.activeIndex = 0;
                                        //重置高亮行
                                        avalon.scan(popup, _vmodels);
                                        avalon(popup).bind('mouseleave', function () {
                                            vmodel.$model.__mouseenter__ = false;
                                        });
                                    }
                                    function callback() {
                                        //对请求回来的数据进笨过滤排序
                                        var datalist = vmodel.filterData(vmodel);
                                        var toString = datalist.join(',');
                                        //只有发生改动才同步视图
                                        if (vmodel.$model.__toString__ !== toString) {
                                            //添加高亮
                                            datalist = datalist.map(function (el) {
                                                return vmodel.highlightData(el, query);
                                            });
                                            vmodel._datalist = datalist;
                                            vmodel.$model.__toString__ = toString;
                                        }
                                        vmodel.toggle = !!datalist.length;
                                    }
                                    var now = new Date();
                                    //时间闸
                                    if (lastModified - now > vmodel.delay && typeof vmodel.updateData === 'function') {
                                        //远程请求数据，自己实现updateData方法，主要是改变datalist数组，然后在调用callback
                                        vmodel.updateData(callback);
                                        lastModified = now;
                                    }
                                    callback();
                                    //用户在用键盘移动时，mouseenter将失效
                                    vmodel.$model.__keyup__ = true;
                                    moveIndex(e, vmodel);
                                    setTimeout(function () {
                                        vmodel.$model.__keyup__ = false;
                                    }, 150);
                                }
                            });
                        });
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('\u8BF7\u5C3D\u5FEB\u5347\u5230avalon1.3.7+');
                            avalon.scan(element, _vmodels);
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    /**
             * @interface 当组件移出DOM树时,系统自动调用的销毁函数
             */
                    vm.$remove = function () {
                        avalon(element).unbind('keyup', keyupCallback).unbind('blur', blurCallback).unbind('keydown', keydownCallback);
                        vm.toggle = false;
                        avalon.log('at $remove');
                    };
                    vm._popup = function (str) {
                        //创建测量用的DIV,它与当前textara, input的大小样式完全相同
                        fakeTextArea = fakeTextArea || document.createElement('div');
                        fakeTextArea.innerHTML = str;
                        document.body.appendChild(fakeTextArea);
                        //拷贝其样式
                        var styles = window.getComputedStyle ? getComputedStyle(this, null) : this.currentStyle;
                        var obj = {};
                        avalon(this).css('font-size');
                        //强制reflow
                        for (var i in styles) {
                            if (/^[a-z]+$/i.test(i) && styles[i] !== '' && typeof styles[i] !== 'function') {
                                obj[i] = styles[i];
                            }
                        }
                        avalon.mix(obj, {
                            width: avalon(this).width() + 'px',
                            height: avalon(this).height() + 'px',
                            border: '1px solid red',
                            display: 'block',
                            'word-wrap': 'break-word',
                            //强制换行 fix IE6-8
                            visibility: 'hidden'
                        });
                        var array = [];
                        for (var i in obj) {
                            array.push(hyphen(i) + ':' + obj[i]);
                        }
                        fakeTextArea.style.cssText = array.join('; ');
                        fakeTextArea.scrollTop = this.scrollTop;
                        fakeTextArea.scrollLeft = this.scrollLeft;
                        //取得textarea,input在页面上的坐标
                        var offset = avalon(this).offset();
                        var fakeRect = fakeTextArea.getBoundingClientRect();
                        var bdos = fakeTextArea.getElementsByTagName('bdo');
                        var bdo = bdos[bdos.length - 1];
                        //高亮@所在bdo元素，然后通过Range.getBoundingClientRect取得它在视口的坐标
                        if (document.createRange) {
                            //如果是IE10+或W3C  && document.documentMode != 9
                            var range = document.createRange();
                            range.selectNode(bdo);
                            var rangeRect = range.getBoundingClientRect();
                        } else {
                            //IE6-9
                            rangeRect = bdo.getBoundingClientRect();
                        }
                        //高亮@所在bdo元素在测量用的DIV的坐标
                        var top = rangeRect.bottom - fakeRect.top;
                        var left = rangeRect.left - fakeRect.left;
                        //创建弹出菜单
                        popup = popup || document.createElement('div');
                        popup.innerHTML = vmodel.template;
                        document.body.appendChild(popup);
                        popup.className = 'oni-at';
                        popup.setAttribute('ms-visible', 'toggle');
                        avalon(popup).css({
                            top: offset.top + top,
                            //得到@在textarea, input的坐标
                            left: offset.left + left,
                            position: 'absolute'
                        });
                        return popup;
                    };
                    vm._hover = function (e, index) {
                        e.preventDefault();
                        var model = vmodel.$model;
                        model.__mouseenter__ = true;
                        if (!model.__keyup__) {
                            vm.activeIndex = index;
                        }
                    };
                    vm.$watch('toggle', function (v) {
                        if (v === false && popup && popup.parentNode) {
                            popup.parentNode.removeChild(popup);
                            popup = null;
                            document.body.removeChild(fakeTextArea);
                            fakeTextArea = null;
                        }
                    });
                    vm._select = function (e) {
                        e.stopPropagation();
                        e.preventDefault();
                        var query = vmodel._datalist[vmodel.activeIndex];
                        var span = document.createElement('span');
                        span.innerHTML = query;
                        query = span.textContent || span.innerText;
                        //去掉高亮标签
                        var value = element.value;
                        element.value = value.slice(0, queryStartIndex) + query + ' ' + value.slice(queryStartIndex);
                        //销毁菜单
                        setCaretPosition(element, queryStartIndex + query.length + 1);
                        vmodel.toggle = false;
                    };
                });
            return vmodel;
        };
    widget.vertion = 1;
    widget.defaults = {
        at: '@',
        // @config 默认的标识符
        datalist: [],
        //@config 字符串数组，不可监控，(名字取自HTML的datalist同名元素)
        _datalist: [],
        //@interface 实际是应用于模板上的字符串数组，它里面的字符可能做了高亮处理
        template: '',
        // @config  弹出层的模板，如果为空，使用默认模板，注意要在上面添加点击或hover处理
        toggle: false,
        //@config 用于控制弹出层的显示隐藏
        activeIndex: 0,
        //@config 弹出层里面要高亮的列表项的索引值
        query: '',
        ///@config @后的查询字符串
        limit: 5,
        //@config  弹出层里面总共有多少个列表项
        maxLength: 20,
        //@config @后的查询字符串的最大长度，注意中间不能有空格
        minLength: 1,
        //@config @后的查询字符串只有出现了多少个字符后才显示弹出层
        /**
         * @config 我们是通过$update方法与后台进行AJAX连接，为了防止输入过快导致频繁，需要指定延时毫秒数
         * 远程更新函数,与后台进行AJAX连接，更新datalist，此方法有一个回调函数，里面将执行$filter、$highlight操作
         */
        delay: 500,
        /**
         * @config {Function} 远程更改数据
         * @param vm {Object} vmodel
         * @param callback {Function} 在vmodel.datalist被更新后执行的回调
         */
        updateData: function (vm, callback) {
        },
        /**
         * @config 模板函数,方便用户自定义模板
         * @param str {String} 默认模板
         * @param opts {Object} vmodel
         * @returns {String} 新模板
         */
        getTemplate: function (str, opts) {
            return str;
        },
        /**
         * @config 用于对datalist进行过滤排序，将得到的新数组赋给_datalist，实现弹出层的更新
         * @param opts {Object} vmodel
         * @returns {Array} datalist
         */
        filterData: function (opts) {
            //opts实质上就是vmodel，但由于在IE6-8下，this不指向调用者，因此需要手动传vmodel
            var unique = {}, query = opts.query, lowquery = query.toLowerCase();
            //精确匹配的项放在前面
            var datalist = opts.datalist.filter(function (el) {
                    if (el.indexOf(query) === 0) {
                        unique[el] = 1;
                        return true;
                    }
                });
            //模糊匹配的项放在后面
            opts.datalist.forEach(function (el) {
                var str = el.toLowerCase();
                if (!unique[el]) {
                    if (str.indexOf(lowquery) > -1) {
                        unique[el] = 1;
                        datalist.push(el);
                    }
                }
            });
            return datalist.slice(0, opts.limit)    //对显示个数进行限制
;
        },
        /*
         * @config 用于对_datalist中的字符串进行高亮处理，将得到的新数组赋给_datalist，实现弹出层的更新
         * @param items {String} datalist中的每一项
         * @returns {String} 查询字符串
         */
        highlightData: function (item, str) {
            var query = escapeRegExp(str);
            return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                return '<strong style="color:#FF6600;">' + match + '</strong>';
            });
        }
    };
    function hyphen(target) {
        //转换为连字符线风格
        return target.replace(/([A-Z]+)/g, function (a, b) {
            return '-' + b.toLowerCase();
        });
    }
    function escapeRegExp(str) {
        return str.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
    }
    function getCaretPosition(ctrl) {
        var caret;
        //取得光标的位置
        if (typeof ctrl.selectionStart === 'number') {
            caret = ctrl.selectionStart;
        } else {
            var selection = ctrl.selection.createRange();
            //这个TextRange对象不能重用
            selection.moveStart('character', -ctrl.value.length);
            caret = selection.text.length;
        }
        return caret;
    }
    function setCaretPosition(ctrl, pos) {
        if (ctrl.setSelectionRange) {
            ctrl.focus();
            ctrl.setSelectionRange(pos, pos);
        } else if (ctrl.createTextRange) {
            var range = ctrl.createTextRange();
            range.collapse(true);
            range.moveEnd('character', pos);
            range.moveStart('character', pos);
            range.select();
        }
    }
    /**
     * //获取光标位置 
function getCursor(elem) {
     //IE 9 ，10，其他浏览器
     if (elem.selectionStart !== undefined) {
         return elem.selectionStart;
     } else { //IE 6,7,8
         var range = document.selection.createRange();
         range.moveStart("character", -elem.value.length);
         var len = range.text.length;
         return len;
     }
 }
//设置光标位置
 function setCursor(elem, index) {
     //IE 9 ，10，其他浏览器
     if (elem.selectionStart !== undefined) {
         elem.selectionStart = index;
         elem.selectionEnd = index;
     } else { //IE 6,7,8
         var range = elem.createTextRange();
         range.moveStart("character", -elem.value.length); //左边界移动到起点
         range.move("character", index); //光标放到index位置
         range.select();
     }
 }
//获取选中文字
 function getSelection(elem) {
     //IE 9 ，10，其他浏览器
     if (elem.selectionStart !== undefined) {
         return elem.value.substring(elem.selectionStart, elem.selectionEnd);
     } else { //IE 6,7,8
         var range = document.selection.createRange();
         return range.text;
     }
 }
//设置选中范围
 function setSelection(elem, leftIndex, rightIndex) {
     if (elem.selectionStart !== undefined) { //IE 9 ，10，其他浏览器
         elem.selectionStart = leftIndex;
         elem.selectionEnd = rightIndex;
     } else { //IE 6,7,8
         var range = elem.createTextRange();
         range.move("character", -elem.value.length); //光标移到0位置。
         //这里一定是先moveEnd再moveStart
         //因为如果设置了左边界大于了右边界，那么浏览器会自动让右边界等于左边界。
         range.moveEnd("character", rightIndex);
         range.moveStart("character", leftIndex);
         range.select();
     }
 }
    */
    //通过监听textarea,input的keyup进行，移动列表项的高亮位置
    function moveIndex(e, vmodel) {
        var max = vmodel._datalist.size();
        var code = e.which || e.keyCode;
        //firefox down 为37
        switch (code) {
        case 13:
            // enter
            vmodel._select(e);
            break;
        case 9:
        // tab
        case 27:
            // escape
            e.preventDefault();
            break;
        case 38:
        case 63233:
            //safari
            // up arrow
            // avalon.log("+++++++++++++")
            var index = vmodel.activeIndex - 1;
            if (index < 0) {
                index = max - 1;
            }
            vmodel.activeIndex = index;
            break;
        case 40:
        case 63235:
            //safari
            // down arrow
            e.preventDefault();
            var index = vmodel.activeIndex + 1;
            if (index === max) {
                index = 0;
            }
            vmodel.activeIndex = index;
            break;
        }
    }
    return avalon;
}
)();
},{"avalon":2}],6:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    function getChildVM(expr, vm, strLen) {
        var t = vm, pre, _t;
        for (var i = 0, len = expr.length; i < len; i++) {
            var k = expr[i];
            _t = t.$model || t;
            if (typeof _t[k] !== 'undefined') {
                pre = t;
                t = t[k];
            } else {
                return;
            }
        }
        if (strLen > 1) {
            return pre[k];
        } else {
            return pre;
        }
    }
    // 在一堆VM中，提取某一个VM的符合条件的子VM
    // 比如 vm.aaa.bbb = {} ; 
    // avalon.getModel("aaa.bbb", vmodels) ==> ["bbb", bbbVM, bbbVM所在的祖先VM（它位于vmodels中）]
    avalon.getModel = function (expr, vmodels) {
        if (!expr) {
            return null;
        }
        var str = expr.split('.'), strLen = str.length, last = str[strLen - 1];
        if (str.length != 1) {
            str.pop();
        }
        for (var i = 0, len = vmodels.length; i < len; i++) {
            var ancestor = vmodels[i];
            var child = getChildVM(str, ancestor, strLen);
            if (typeof child !== 'undefined' && (child.hasOwnProperty(last) || Object.prototype.hasOwnProperty.call(child, last))) {
                return [
                    last,
                    child,
                    ancestor
                ];
            }
        }
        return null;
    };
    return avalon;
}
)();
},{"avalon":2}],7:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var pf = (navigator.platform || '').toLowerCase(), ua = navigator.userAgent.toLowerCase(), s;
    function toFixedVersion(ver, floatLength) {
        ver = ('' + ver).replace(/_/g, '.');
        floatLength = floatLength || 1;
        ver = String(ver).split('.');
        ver = ver[0] + '.' + (ver[1] || '0');
        ver = Number(ver).toFixed(floatLength);
        return ver;
    }
    function updateProperty(target, name, ver) {
        target = avalon[target];
        target.name = name;
        target.version = ver;
        target[name] = ver;
    }
    // 提供三个对象,每个对象都有name, version(version必然为字符串)
    // 取得用户操作系统名字与版本号，如果是0表示不是此操作系统
    var platform = avalon.platform = {
            name: window.orientation != undefined ? 'iPod' : (pf.match(/mac|win|linux/i) || ['unknown'])[0],
            version: 0,
            iPod: 0,
            iPad: 0,
            iPhone: 0,
            android: 0,
            win: 0,
            linux: 0,
            mac: 0
        };
    (s = ua.match(/windows ([\d.]+)/)) ? updateProperty('platform', 'win', toFixedVersion(s[1])) : (s = ua.match(/windows nt ([\d.]+)/)) ? updateProperty('platform', 'win', toFixedVersion(s[1])) : (s = ua.match(/linux ([\d.]+)/)) ? updateProperty('platform', 'linux', toFixedVersion(s[1])) : (s = ua.match(/mac ([\d.]+)/)) ? updateProperty('platform', 'mac', toFixedVersion(s[1])) : (s = ua.match(/ipod ([\d.]+)/)) ? updateProperty('platform', 'iPod', toFixedVersion(s[1])) : (s = ua.match(/ipad[\D]*os ([\d_]+)/)) ? updateProperty('platform', 'iPad', toFixedVersion(s[1])) : (s = ua.match(/iphone ([\d.]+)/)) ? updateProperty('platform', 'iPhone', toFixedVersion(s[1])) : (s = ua.match(/android ([\d.]+)/)) ? updateProperty('platform', 'android', toFixedVersion(s[1])) : 0;
    //============================================
    //取得用户的浏览器名与版本,如果是0表示不是此浏览器
    var browser = avalon.browser = {
            name: 'unknown',
            version: 0,
            ie: 0,
            firefox: 0,
            chrome: 0,
            opera: 0,
            safari: 0,
            mobileSafari: 0,
            adobeAir: 0    //adobe 的air内嵌浏览器
        };
    (s = ua.match(/trident.*; rv\:([\d.]+)/)) ? updateProperty('browser', 'ie', toFixedVersion(s[1])) : //IE11的UA改变了没有MSIE
    (s = ua.match(/msie ([\d.]+)/)) ? updateProperty('browser', 'ie', toFixedVersion(s[1])) : (s = ua.match(/firefox\/([\d.]+)/)) ? updateProperty('browser', 'firefox', toFixedVersion(s[1])) : (s = ua.match(/chrome\/([\d.]+)/)) ? updateProperty('browser', 'chrome', toFixedVersion(s[1])) : (s = ua.match(/opera.([\d.]+)/)) ? updateProperty('browser', 'opera', toFixedVersion(s[1])) : (s = ua.match(/adobeair\/([\d.]+)/)) ? updateProperty('browser', 'adobeAir', toFixedVersion(s[1])) : (s = ua.match(/version\/([\d.]+).*safari/)) ? updateProperty('browser', 'safari', toFixedVersion(s[1])) : 0;
    //下面是各种微调
    //mobile safari 判断，可与safari字段并存
    (s = ua.match(/version\/([\d.]+).*mobile.*safari/)) ? updateProperty('browser', 'mobileSafari', toFixedVersion(s[1])) : 0;
    if (platform.iPad) {
        updateProperty('browser', 'mobileSafari', '0.0');
    }
    if (browser.ie) {
        if (!document.documentMode) {
            document.documentMode = Math.floor(browser.ie)    //http://msdn.microsoft.com/zh-cn/library/cc817574.aspx
                                      //IE下可以通过设置 <meta http-equiv="X-UA-Compatible" content="IE=8"/>改变渲染模式
                                      //一切以实际渲染效果为准
;
        } else if (document.documentMode !== Math.floor(browser.ie)) {
            updateProperty('browser', 'ie', toFixedVersion(document.documentMode));
        }
    }
    //============================================
    //取得用户浏览器的渲染引擎名与版本,如果是0表示不是此浏览器
    avalon.engine = {
        name: 'unknown',
        version: 0,
        trident: 0,
        gecko: 0,
        webkit: 0,
        presto: 0
    };
    (s = ua.match(/trident\/([\d.]+)/)) ? updateProperty('engine', 'trident', toFixedVersion(s[1])) : (s = ua.match(/gecko\/([\d.]+)/)) ? updateProperty('engine', 'gecko', toFixedVersion(s[1])) : (s = ua.match(/applewebkit\/([\d.]+)/)) ? updateProperty('engine', 'webkit', toFixedVersion(s[1])) : (s = ua.match(/presto\/([\d.]+)/)) ? updateProperty('engine', 'presto', toFixedVersion(s[1])) : 0;
    if (avalon.browser.ie) {
        if (avalon.browser.ie == 6) {
            updateProperty('engine', 'trident', toFixedVersion('4'));
        } else if (browser.ie == 7 || browser.ie == 8) {
            updateProperty('engine', 'trident', toFixedVersion('5'));
        }
    }
    return avalon;
}
)();
},{"avalon":2}],8:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var baseClasses = [
            'oni-button',
            'oni-widget',
            'oni-state-default'
        ], typeClasses = 'oni-button-icons-only oni-button-icon-only oni-button-text-icons oni-button-text-icon-primary oni-button-text-icon-secondary oni-button-text-only';
    var widget = avalon.ui.button = function (element, data, vmodels) {
            var options = data.buttonOptions, btnModel, $element = avalon(element);
            function stop(event) {
                if (options.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            }
            btnModel = {
                $init: function () {
                    var data = options.data, elementType = '', label = options.label, buttonWidth = 0, elementTagName = element.tagName.toLowerCase();
                    if (options.groups && data.length > 1) {
                        var buttons = '';
                        data.forEach(function (button, index) {
                            var buttonStr = '<span ms-widget=\'button\'';
                            if (button.type !== void 0) {
                                buttonStr += ' data-button-type=\'' + button.type + '\'';
                            }
                            if (button.iconPosition !== void 0) {
                                buttonStr += ' data-button-icon-position=\'' + button.iconPosition + '\'';
                            }
                            if (button.icon !== void 0) {
                                buttonStr += ' data-button-icon=\'' + button.icon + '\'';
                            }
                            if (button.color !== void 0) {
                                buttonStr += ' data-button-color=\'' + button.color + '\'';
                            }
                            if (button.size !== void 0) {
                                buttonStr += ' data-button-size=\'' + button.size + '\'';
                            }
                            if (button.disabled !== void 0) {
                                buttonStr += ' data-button-disabled=\'' + button.disabled + '\'';
                            }
                            if (button.label !== void 0) {
                                buttonStr += ' data-button-label=\'' + button.label + '\'';
                            }
                            buttonStr += '>' + (button.text || '') + '</span>';
                            buttons += buttonStr;
                        });
                        element.innerHTML = buttons;
                        element.setAttribute('ms-widget', 'buttonset');
                        if (options.direction == 'vertical') {
                            element.setAttribute('data-buttonset-direction', 'vertical');
                        }
                        if (!options.corner) {
                            element.setAttribute('data-buttonset-corner', options.corner);
                        }
                        if (options.width) {
                            element.setAttribute('data-buttonset-width', parseInt(options.width));
                        }
                        avalon.scan(element, vmodels);
                        return;
                    }
                    if (typeof options.disabled !== 'boolean') {
                        options.disabled = !!element.disabled;
                    } else {
                        element.disabled = options.disabled;
                    }
                    if (elementTagName === 'input') {
                        elementType = 'input';
                    }
                    if (buttonWidth = parseInt(options.width)) {
                        element.style.width = buttonWidth + 'px';
                    }
                    $element.bind('mousedown', function (event) {
                        stop(event);
                        $element.addClass('oni-state-active');
                    });
                    $element.bind('mouseup', function (event) {
                        stop(event);
                        $element.removeClass('oni-state-active');
                    });
                    $element.bind('blur', function () {
                        $element.removeClass('oni-state-active');
                        $element.removeClass('oni-state-focus');
                    });
                    $element.bind('focus', function () {
                        $element.addClass('oni-state-focus');
                    });
                    if (!options.label) {
                        label = elementType === 'input' ? element.value : element.innerHTML;
                    }
                    options.elementType = elementType;
                    options.label = label;
                    createButton(element, options);
                    avalon.scan(element, vmodels);
                }
            };
            btnModel.$init();
        };
    avalon.ui.buttonset = function (element, data, vmodels) {
        var options = data.buttonsetOptions, buttonsetCorner = options.corner, direction = options.direction, $element = avalon(element);
        buttonsetCorner = buttonsetCorner !== void 0 ? buttonsetCorner : true;
        var btnGroup = {
                $init: function () {
                    var elementClass = [];
                    elementClass.push('oni-buttonset'), firstButtonClass = 'oni-corner-left', lastButtonClass = 'oni-corner-right', children = element.childNodes, buttons = [];
                    // 收集button组元素
                    buttonWidth = options.width, firstElement = true;
                    for (var i = 0, el; el = children[i++];) {
                        if (el.nodeType === 1) {
                            el.setAttribute('data-button-corner', 'false');
                            buttons.push(el);
                            if (firstElement) {
                                avalon(el).addClass('oni-button-first');
                                firstElement = false;
                            }
                        }
                    }
                    var n = buttons.length;
                    if (n && buttonsetCorner) {
                        if (direction === 'vertical') {
                            firstButtonClass = 'oni-corner-top';
                            lastButtonClass = 'oni-corner-bottom';
                        }
                        avalon(buttons[0]).addClass(firstButtonClass);
                        avalon(buttons[n - 1]).addClass(lastButtonClass);
                    }
                    if (direction === 'vertical') {
                        elementClass.push('oni-buttonset-vertical');
                    }
                    $element.addClass(elementClass.join(' '));
                    data.buttons = buttons;
                    avalon.scan(element, vmodels);
                    if (buttonWidth = parseInt(buttonWidth)) {
                        (function (buttonWidth) {
                            var btns = [].concat(buttons);
                            setTimeout(function () {
                                for (var i = 0; button = btns[i++];) {
                                    var $button = avalon(button), buttonName = button.tagName.toLowerCase();
                                    if (buttonName === 'input' || buttonName === 'button') {
                                        button.style.width = buttonWidth + 'px';
                                    } else {
                                        button.style.width = buttonWidth - parseInt($button.css('border-left-width')) - parseInt($button.css('border-right-width')) - parseInt($button.css('padding-left')) * 2 + 'px';
                                    }
                                }
                            }, 10);
                        }(buttonWidth));
                        return;
                    }
                    (function (buttons) {
                        var interval = 0, maxButtonWidth = 0;
                        buttons = buttons.concat();
                        interval = setInterval(function () {
                            var buttonWidth = 0, innerWidth = 0, $button;
                            for (var i = 0, button; button = buttons[i++];) {
                                buttonWidth = Math.max(buttonWidth, avalon(button).outerWidth());
                            }
                            if (buttonWidth === maxButtonWidth) {
                                maxButtonWidth += 1;
                                for (var i = 0, button; button = buttons[i++];) {
                                    var buttonName = button.tagName.toLowerCase(), $button = avalon(button);
                                    if (buttonName === 'input' || buttonName === 'button') {
                                        button.style.width = maxButtonWidth + 'px';
                                    } else {
                                        button.style.width = maxButtonWidth - parseInt($button.css('border-left-width')) - parseInt($button.css('border-right-width')) - parseInt($button.css('padding-left')) * 2 + 'px';
                                    }
                                }
                                clearInterval(interval);
                                return;
                            }
                            maxButtonWidth = buttonWidth;
                        }, 100);
                    }(buttons));
                }
            };
        btnGroup.$init();
    };
    function createButton(element, options) {
        var buttonText, buttonClasses = baseClasses.concat(), iconText = false, icons = options.icon || '', corner = options.corner;
        options.label = options.label || '';
        if (corner) {
            buttonClasses.push('oni-corner-all');
            if (corner = parseInt(corner)) {
                element.style.borderRadius = corner + 'px';
            }
        }
        if (options.size) {
            buttonClasses.push('oni-button-' + options.size);
        }
        if (options.color) {
            buttonClasses.push('oni-button-' + options.color);
        }
        if (options.disabled) {
            buttonClasses.push('oni-state-disabled');
        }
        avalon(element).addClass(buttonClasses.join(' '));
        if (options.elementType === 'input' && options.label) {
            avalon(element).val(options.label);
            return;
        }
        switch (options.type) {
        case 'text':
            buttonText = '<span class=\'oni-button-text\'>' + options.label + '</span>';
            break;
        case 'labeledIcon':
            iconText = true;
        case 'icon':
            switch (options.iconPosition) {
            case 'left':
                buttonText = '<i class=\'oni-icon oni-icon-left\'>' + icons.replace(/\\/g, '') + '</i>' + '<span class=\'oni-button-text oni-button-text-right' + (!iconText ? ' oni-button-text-hidden' : '') + '\'>' + options.label + '</span>';
                break;
            case 'right':
                buttonText = '<span class=\'oni-button-text oni-button-text-left' + (!iconText ? ' oni-button-text-hidden' : '') + '\'>' + options.label + '</span>' + '<i class=\'oni-icon oni-icon-right\'>' + icons.replace(/\\/g, '') + '</i>';
                break;
            case 'left-right':
                var iconArr = icons && icons.split('-') || [
                        '',
                        ''
                    ], iconLeft = iconArr[0], iconRight = iconArr[1];
                buttonText = '<i class=\'oni-icon oni-icon-left\'>' + iconLeft.replace(/\\/g, '') + '&nbsp;</i>' + '<span class=\'oni-button-text oni-button-text-middle' + (!iconText ? ' oni-button-text-hidden' : '') + '\'>' + options.label + '</span>' + '<i class=\'oni-icon oni-icon-right\'>&nbsp;' + iconRight.replace(/\\/g, '') + '</i>';
                break;
            }
            break;
        }
        element.innerHTML = buttonText;
    }
    widget.version = 1;
    widget.defaults = {
        groups: false,
        //@config 是否是button组
        direction: '',
        //@config button组的方向，有水平button组和垂直button组，默认是水平，可以设置为"vertical"
        /**
         * @config <p>data属性配置button组的内容，每一个数组元素都是一个包含单个按钮基本信息的对象。</p>
         * <p>注意，请只在button组由至少两个按钮组成时，才配置button组件为button组，也就是设置groups为true时，且配置相应的data</p>
         * <p>当然还有一种直接列出button组内容的方式，不过这种情况需要指定组件名为buttonset，请看<a href="./avalon.button.ex4.html">demo 4</a>a></p>
         * <pre>
            data: [{
                type: "labeledIcon",
                iconPosition: "right",
                icon: "\&\#xf04c;",
                size: "large",
                color: "success",
                text: "暂停"
            }, {
                type: "labeledIcon",
                iconPosition: "right",
                icon: "\&\#xf04b;",
                size: "large",
                color: "success",
                text: "播放"
            }, {
                type: "labeledIcon",
                iconPosition: "right",
                icon: "\&\#xf074;",
                size: "large",
                color: "success",
                text: "拖曳"
            }]                                
         </pre>
         */
        data: [],
        type: 'text',
        //@config 配置button的展示形式，仅文字展示，还是仅图标展示，或者文字加图标的展示方式，三种方式分别对应："text"、"icon"、"labeledIcon"
        iconPosition: 'left',
        //@config 当type为icon或者labeledIcon时，定义icon在哪边，默认在text的左边，也可以配置为右边("right"),或者两边都有("left-right")
        icon: '',
        //@config  当type为icon或者labeledIcon时，定义展示icon的内容，本组件的icon是使用web font实现，当iconPosition为"left"或者"right"时，将icon的码赋给icon，当iconPosition为"left-right",将left icon与right icon的码以"-"分隔，比如data-button-icon="\&\#xf001;-\&\#xf06b;"
        size: '',
        //@config button有四个尺寸"small", "default", "big", "large"
        color: '',
        //@config 定义button的颜色，默认提供了"primary", "warning", "danger", "success", "info", "inverse", "default" 7中颜色，与bootstrap保持一致
        corner: true,
        //@config 设置是否显示圆角，可以布尔值或者Number类型，布尔只是简单的说明显示或者不显示，Number则在表示显示与否的同时，也是在指定圆角的大小，圆角默认是2px。
        style: '',
        // 用于定义button的展现形式，比如"flat" "glow" "rounded" "3D" "pill" 本组件，仅提供flat的实现
        disabled: false,
        //@config 配置button的禁用状态
        label: '',
        //@config 设置button的显示文字，label的优先级高于元素的innerHTML
        width: ''    //@config 设置button的宽度，注意button的盒模型设为了border-box
    };
    return avalon;
}
)();
},{"avalon":2}],9:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div id=\"oni-camera\"\n\t class=\"oni-camera\"\n\t ms-css-width=\"pictureWidth\"\n\t ms-css-height=\"pictureHeight\"\n\t ms-mouseenter=\"stopPlay\"\n\t ms-mouseleave=\"restartPlay('carousel')\"\n\t >\n\t<div id=\"oni-camera-panel\"\n\t\t class=\"oni-camera-panel\"\n\t\t >\n\t\t<div class=\"oni-camera-item\"\n\t\t\t ms-repeat=\"pictures\"\n\t\t\t ms-css-width=\"pictureWidth\"\n\t\t\t ms-css-height=\"pictureHeight\"\n\t\t\t ms-visible=\"$index === pictureIndex\"\n\t\t\t >\n\t\t\t<img ms-src=\"{{el}}\" alt=\"\"/>\n\t\t</div>\n\t\t<div class=\"oni-camera-fakehover\"\n\t\t\t ms-visible=\"fakehoverVisible\">\n\t\t</div>\n\t</div>\n\t<div class=\"oni-camera-selection-wrap\"\n\t\t ms-visible=\"alwaysShowSelection\"\n\t\t ms-css-margin-left=\"selectionWrapOffset\"\n\t\t >\n\t\t<a ms-class=\"selected:el==selectionIndex\"\n\t\t   ms-repeat=\"selections\"\n\t\t   ms-click=\"navselect($index,$event)\"\n\t\t   ms-mouseenter=\"navselect($index,$event)\"\n\t\t\t>\n\t\t</a>\n\t</div>\n\t<a  ms-class=\"{{arrowLeftClass}}\"\n\t\tclass=\"arrow prev png24\"\n\t\tms-visible=\"arrowVisible\"\n\t\tms-click=\"lastPicture\"\n\t>\n\t</a>\n\t<a  ms-class=\"{{arrowRightClass}}\"\n\t\tclass=\"arrow after png24\"\n\t\tms-visible=\"arrowVisible\"\n\t\tms-click=\"nextPicture\"\n\t>\n\t</a>\n</div>\n";

module.exports = (
function () {
    var effects = [
            'slideX',
            'slideY',
            'fadeIn',
            'crossX',
            'crossY',
            'stepX',
            'stepY',
            'rotateFadeIn'
        ];
    var widget = avalon.ui.camera = function (element, data, vmodels) {
            var options = data.cameraOptions, fakepartWidth, fakepartHeight;
            options.template = options.getTemplate(template, options);
            var vmodel = avalon.define(data.cameraId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.pictureWidth = avalon.css(element, 'width');
                    // 图片显示宽度
                    vm.pictureHeight = avalon.css(element, 'height');
                    // 图片显示高度
                    vm.selections = avalon.range(vm.pictures.length);
                    // 圆形选择的数据数组（不包括复制到末尾的第一个元素）
                    vm.selectionWrapOffset = -vm.pictures.length * 20 / 2;
                    // 圆形选择CSS位置修正
                    vm.arrowVisible = vm.alwaysShowArrow ? true : false;
                    // 箭头是否可见
                    vm.pictureIndex = 0;
                    vm.selectionIndex = 0;
                    //导航index
                    vm.fakehoverVisible = false;
                    vm.nextPicture = function () {
                        _animate(_indexUpdate(1), vm.effect, 1);
                    };
                    vm.lastPicture = function () {
                        _animate(_indexUpdate(-1), vm.effect, -1);
                    };
                    var hoverIndex = 0;
                    vm.navselect = function (index, e) {
                        // 防止同一张图片重复刷新
                        if (index === vm.selectionIndex) {
                            return;
                        }
                        // 全局指定，获取鼠标当前index
                        hoverIndex = index;
                        // 执行动作
                        if (e.type === vm.eventType || vm.eventType === 'both') {
                            if (e.type === 'mouseenter') {
                                setTimeout(function () {
                                    _animate(index, vm.effect);
                                }, 300)    //mouseenter事件设置延时以防止切换时间间隔太小
;
                            } else {
                                _animate(index, vm.effect);
                            }
                        }
                        // 修复hover的TAB和select的TAB不一致
                        var fixIndex = setInterval(function () {
                                if (vm.selectionIndex !== hoverIndex) {
                                    _animate(hoverIndex, vm.effect);
                                } else {
                                    clearInterval(fixIndex);
                                }
                            }, 800);
                    };
                    vm.stopPlay = function () {
                        if (vm.hoverStop) {
                            clearInterval(playHandler);
                        }
                    };
                    vm.restartPlay = function () {
                        if (vm.hoverStop) {
                            start();
                        }
                    };
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'selectionWrapOffset',
                        'pictures',
                        'effect',
                        'alwaysShowArrow',
                        'timeout',
                        'speed',
                        'alwaysShowSelection',
                        'hoverStop',
                        'adaptiveWidth',
                        'adaptiveHeight',
                        'eventType',
                        'arrowLeftClass',
                        'arrowRightClass',
                        'slicedCols',
                        'slicedRows'
                    ];
                    var inited;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        var pageHTML = options.template;
                        element.style.display = 'none';
                        element.innerHTML = pageHTML;
                        element.style.display = 'block';
                        if (vm.adaptiveWidth) {
                            //自动填充外围容器宽度
                            vm.pictureWidth = element.offsetWidth;
                        }
                        if (vm.adaptiveHeight) {
                            //自动填充外围容器高度
                            element.style.height = '100%';
                            vm.pictureHeight = avalon.css(element, 'height');
                            //@config  图片显示高度
                            var children = element.children;
                            for (var i = 0, len = children.length; i < len; i++) {
                                if (children[i].id === 'oni-camera') {
                                    children[i].style.height = '100%';
                                }
                            }
                        }
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('\u8BF7\u5C3D\u5FEB\u5347\u5230avalon1.3.7+');
                            avalon.scan(element, _vmodels);
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                });
            var getReady = function () {
                    // 区块大小
                    fakepartWidth = vmodel.pictureWidth / vmodel.slicedCols;
                    fakepartHeight = vmodel.pictureHeight / vmodel.slicedRows;
                    // 分割区块
                    innerRequire([
                        'jquery',
                        'ready!'
                    ], function ($) {
                        var fakeHover = $(element).find('.oni-camera-fakehover');
                        fakeHover.css('display', 'none');
                        for (var i = 0; i < vmodel.slicedRows; i++) {
                            for (var j = 0; j < vmodel.slicedCols; j++) {
                                fakeHover.append('<div class=\'fakepart\'></div>');
                                $('.oni-camera-fakehover .fakepart:last').css({
                                    'background': 'url(' + vmodel.pictures[0] + ')',
                                    'background-position': -j * fakepartWidth + 'px ' + -i * fakepartHeight + 'px'
                                });
                            }
                            fakeHover.append('<br>');
                        }
                        $(element).find('.oni-camera-fakehover .fakepart').css({
                            'width': fakepartWidth,
                            'height': fakepartHeight
                        });
                        for (var i = 0; i < vmodel.slicedRows; i++) {
                            for (var j = 0; j < vmodel.slicedCols; j++) {
                                $(element).find('.oni-camera-fakehover .fakepart').eq(i * vmodel.slicedCols + j).css({
                                    'width': fakepartWidth,
                                    'height': fakepartHeight
                                });
                            }
                        }
                        start();
                    });
                },
                // 自动播放
                playHandler, start = function () {
                    playHandler = setInterval(function () {
                        _animate(_indexUpdate(1), vmodel.effect, 1);
                    }, vmodel.timeout);
                },
                // 图片切换
                animated = false, _animate = function (index, effect, indexDirection) {
                    indexDirection = indexDirection || 1;
                    // 防止积累
                    if (animated) {
                        return;
                    } else {
                        animated = true;
                        vmodel.selectionIndex = index;
                    }
                    // 准备动画
                    var fakeparts = $(element).find('.oni-camera-fakehover .fakepart'), finishCount = 0, effect = effect === 'random' ? effects[Math.floor(Math.random() * effects.length)] : effect;
                    for (var i = 0; i < vmodel.slicedRows; i++) {
                        for (var j = 0; j < vmodel.slicedCols; j++) {
                            var _part = fakeparts.eq(i * vmodel.slicedCols + j), _speed = vmodel.speed, _delay = 0, _movingDirection = j % 2 === 0 ? 1 : -1;
                            _part.css({
                                'background': 'url(' + vmodel.pictures[index] + ')',
                                'background-position': -j * fakepartWidth + 'px ' + -i * fakepartHeight + 'px',
                                'background-size': vmodel.pictureWidth + 'px ' + vmodel.pictureHeight + 'px',
                                'top': i * fakepartHeight + 'px',
                                'left': j * fakepartWidth + 'px'
                            });
                            var _yStart = parseFloat(_part.css('top')), _xStart = parseFloat(_part.css('left'));
                            // 计算起始位置、延时
                            switch (effect) {
                            case 'slideX':
                                _part.css({ 'left': _xStart + vmodel.pictureWidth * indexDirection });
                                break;
                            case 'slideY':
                                _part.css({ 'top': _yStart + vmodel.pictureHeight * indexDirection });
                                break;
                            case 'fadeIn':
                                _part.css({ 'opacity': 0 });
                                break;
                            case 'crossX':
                                _movingDirection = i % 2 === 0 ? 1 : -1;
                                _part.css({ 'left': _xStart + _movingDirection * vmodel.pictureWidth * indexDirection });
                                break;
                            case 'crossY':
                                _part.css({ 'top': _yStart + _movingDirection * vmodel.pictureHeight * indexDirection });
                                break;
                            case 'stepX':
                                _part.css({ 'left': _xStart + (vmodel.pictureWidth + vmodel.pictureWidth / vmodel.slicedRows * i) * indexDirection });
                                _speed += i * (vmodel.speed / vmodel.slicedRows);
                                break;
                            case 'stepY':
                                _part.css({ 'top': _yStart + (vmodel.pictureHeight + vmodel.pictureHeight / vmodel.slicedCols * j) * indexDirection });
                                _speed += j * (vmodel.speed / vmodel.slicedCols);
                                break;
                            case 'rotateFadeIn':
                                _part.css({ 'opacity': 0 });
                                var arr = _getRotateArr(vmodel.slicedCols, vmodel.slicedRows);
                                _delay = arr[i][j] * (vmodel.speed / (vmodel.slicedCols * vmodel.slicedRows));
                                break;
                            default:
                            }
                            // animation
                            vmodel.fakehoverVisible = true;
                            _part.delay(_delay).animate({
                                'top': _yStart + 'px',
                                'left': _xStart + 'px',
                                'opacity': 1
                            }, _speed, function () {
                                finishCount += 1;
                                if (finishCount === vmodel.slicedRows * vmodel.slicedCols) {
                                    vmodel.fakehoverVisible = false;
                                    vmodel.pictureIndex = index;
                                    animated = false;
                                }
                            });
                        }
                    }
                },
                // 更新index
                _indexUpdate = function (direction) {
                    var _index = vmodel.pictureIndex;
                    _index = direction === 1 ? _index + 1 : _index - 1;
                    if (_index === vmodel.pictures.length) {
                        _index = 0;
                    } else if (_index === -1) {
                        _index = vmodel.pictures.length - 1;
                    }
                    return _index;
                };
            // 初始尺寸
            if (avalon.css(element, 'height') === 0) {
                //未设置widget高度
                _getImageSize(vmodel.pictures[0], function () {
                    //以第一张图片的尺寸为widget尺寸
                    vmodel.pictureHeight = this.height;
                    vmodel.pictureWidth = this.width;
                    getReady()    // 图片加载会有一定延迟，放在回调中
;
                });
            } else {
                getReady()    // 已经设置好widget尺寸
;
            }
            return vmodel;
        };
    // 获取旋转矩阵
    var _getRotateArr = function (mx, my) {
        var helix = [];
        for (var i = 0; i < my; i++) {
            helix[i] = new Array(mx);
        }
        var minX = 0, minY = 0, maxX = mx - 1, maxY = my - 1;
        var row = 0, col = 0;
        for (var i = 0; i < mx * my; i++) {
            helix[row][col] = i + 1;
            if (row == minY && col < maxX) {
                col++;
            } else if (row < maxY && col == maxX) {
                row++;
            } else if (row == maxY && col > minX) {
                col--;
            } else if (row > minY && col == minX) {
                row--;
            }
            if (row - 1 == minY && col == minX) {
                // 在一个周期结束时修改最大最小值
                minY++;
                minX++;
                maxX--;
                maxY--;
            }
        }
        return helix;
    };
    var _getImageSize = function () {
            var list = [], intervalId = null,
                // 用来执行队列
                tick = function () {
                    var i = 0;
                    for (; i < list.length; i++) {
                        list[i].end ? list.splice(i--, 1) : list[i]();
                    }
                    ;
                    !list.length && stop();
                },
                // 停止所有定时器队列
                stop = function () {
                    clearInterval(intervalId);
                    intervalId = null;
                };
            return function (url, ready, load, error) {
                var onready, width, height, newWidth, newHeight, img = new Image();
                img.src = url;
                // 如果图片被缓存，则直接返回缓存数据
                if (img.complete) {
                    ready.call(img);
                    load && load.call(img);
                    return;
                }
                ;
                width = img.width;
                height = img.height;
                // 加载错误后的事件
                img.onerror = function () {
                    error && error.call(img);
                    onready.end = true;
                    img = img.onload = img.onerror = null;
                };
                // 图片尺寸就绪
                onready = function () {
                    newWidth = img.width;
                    newHeight = img.height;
                    if (newWidth !== width || newHeight !== height || // 如果图片已经在其他地方加载可使用面积检测
                        newWidth * newHeight > 1024) {
                        ready.call(img);
                        onready.end = true;
                    }
                    ;
                };
                onready();
                // 完全加载完毕的事件
                img.onload = function () {
                    // onload在定时器时间差范围内可能比onready快
                    // 这里进行检查并保证onready优先执行
                    !onready.end && onready();
                    load && load.call(img);
                    // IE gif动画会循环执行onload，置空onload即可
                    img = img.onload = img.onerror = null;
                };
                // 加入队列中定期执行
                if (!onready.end) {
                    list.push(onready);
                    // 无论何时只允许出现一个定时器，减少浏览器性能损耗
                    if (intervalId === null)
                        intervalId = setInterval(tick, 40);
                }
                ;
            };
        }();
    widget.vertion = 1.1;
    widget.defaults = {
        pictures: [],
        //@config  轮播图片素材
        effect: 'random',
        //@config  图片切换类型，取值：random:全部随机 / none:无特效 / slideX:横向滑动 / slideY:纵向滑动 / fadeIn:渐入 / crossX:横向交叉 / crossY:纵向交叉 / stepX:横向阶梯 / stepY:纵向阶梯 / rotateFadeIn:旋转式渐入
        timeout: 2500,
        //@config  切换时间间隔
        speed: 600,
        //@config  切换速度，数值越小速度越快，单位为毫秒
        alwaysShowArrow: true,
        //@config  显示左右切换箭头
        alwaysShowSelection: true,
        //@config  显示底部圆形切换部件
        hoverStop: true,
        //@config  鼠标经过停止播放
        adaptiveWidth: false,
        //@config  适应外围宽度
        adaptiveHeight: false,
        //@config  适应外围高度
        eventType: 'click',
        //@config  触发tab切换的nav上的事件类型，取值click\mouseenter\both
        arrowLeftClass: '',
        //@config  左右箭头的className，可不传
        arrowRightClass: '',
        //@config  左右箭头的className，可不传
        slicedCols: 5,
        //@config  区块列数
        slicedRows: 4,
        //@config  区块行数
        onInit: avalon.noop,
        //@optMethod onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        getTemplate: function (tmpl, opts, tplName) {
            return tmpl;
        },
        //@optMethod getTemplate(tpl, opts, tplName) 定制修改模板接口
        $author: 'heiwu805@hotmail.com'
    };
}
)();
},{"avalon":2}],10:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-carousel\"\n     ms-css-width=\"pictureWidth\"\n     ms-css-height=\"pictureHeight\"\n     ms-mouseenter=\"stopPlay\"\n     ms-mouseleave=\"restartPlay('carousel')\"\n        >\n    <div class=\"oni-carousel-panel\"\n         ms-css-width=\"pictureWidth* picNum\"\n         ms-css-left=\"panelOffsetX\"\n         ms-css-position=\"panelPosition\"\n            >\n        <div class=\"oni-carousel-item\"\n             ms-repeat=\"pictures\"\n             ms-css-width=\"pictureWidth\"\n             ms-css-position=\"itemPosition\"\n             ms-css-opacity=\"getOpacity($index)\"\n                >\n            <img class=\"oni-img-placeholder\" ms-if=\"lazyloading\" ms-src=\"placeholderImg\" />\n            <img class=\"oni-img-origin\" ms-src=\"{{el.src}}\" ms-on-load=\"imgOnload($event, $index)\" ms-attr-alt=\"{{el.alt}}\"/>\n            <a class=\"oni-carousel-link\"\n               target=\"_blank\"\n               ms-if=\"typeof links[$index] !== 'undefined' && links[$index] !== ''\"\n               ms-attr-title=\"{{links[$index].title}}\"\n               ms-href=\"{{links[$index].href}}\"\n               ms-css-width=\"pictureWidth\"\n               ms-css-height=\"pictureHeight\">\n            </a>\n        </div>\n    </div>\n    <div class=\"oni-carousel-selection-wrap\"\n         ms-visible=\"alwaysShowSelection\"\n         ms-css-margin-left=\"selectionWrapOffset\"\n            >\n        <a ms-class=\"selected:el==currentIndex\"\n           ms-mouseenter=\"selectPic($index,$event)\"\n           ms-click=\"selectPic($index,$event)\"\n           ms-mouseleave=\"restartPlay('tab')\"\n           ms-repeat=\"selections\"\n                ></a>\n    </div>\n    <a ms-class=\"{{arrowLeftClass}}\" class=\"arrow prev png24\"\n       ms-click=\"animate(-1)\"\n       ms-mouseenter=\"arrowHover('left')\"\n       ms-mouseleave=\"arrowBlur('left')\"\n       ms-visible=\"arrowVisible\"\n       ms-css-background-image=\"arrowLeftBg\"\n            >\n    </a>\n    <a ms-class=\"{{arrowRightClass}}\" class=\"arrow after png24\"\n       ms-click=\"animate(1)\"\n       ms-mouseenter=\"arrowHover('right')\"\n       ms-mouseleave=\"arrowBlur('right')\"\n       ms-visible=\"arrowVisible\"\n       ms-css-background-image=\"arrowRightBg\"\n            >\n    </a>\n</div>\n";

module.exports = (
function () {
    //获取当前JS绝对路径
    var path, t = document.getElementsByTagName('SCRIPT');
    for (var i in t) {
        if (t[i].outerHTML && t[i].outerHTML.indexOf('avalon.carousel.js') !== -1) {
            var wholePath = t[i].src;
            path = wholePath.substring(0, wholePath.lastIndexOf('/'));
        }
    }
    var requestAnimationFrame = function () {
            //requestAnimationFrame 兼容
            return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
                window.setTimeout(callback, 10);
            };
        }();
    var Tween = {
            //线性以及二次方的缓动
            linear: function (t, b, c, d) {
                return c * t / d + b;
            },
            easeIn: function (t, b, c, d) {
                return c * (t /= d) * t + b;
            },
            easeOut: function (t, b, c, d) {
                return -c * (t /= d) * (t - 2) + b;
            },
            easeInOut: function (t, b, c, d) {
                if ((t /= d / 2) < 1)
                    return c / 2 * t * t + b;
                return -c / 2 * (--t * (t - 2) - 1) + b;
            }
        };
    var widget = avalon.ui.carousel = function (element, data, vmodels) {
            var options = data.carouselOptions;
            options.template = options.getTemplate(template, options);
            var vmodel = avalon.define(data.carouselId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.picNum = vm.pictures.length + 1;
                    //图片数量（包括复制到末尾的第一个元素）
                    vm.pictureOpacity = {};
                    vm.itemPosition = 'relative';
                    //默认slide effect下结构
                    vm.panelPosition = 'absolute';
                    //默认slide effect下结构
                    vm.selections = avalon.range(vm.pictures.length);
                    //圆形选择的数据数组（不包括复制到末尾的第一个元素）
                    vm.currentIndex = 0;
                    // 圆形选择的index
                    vm.selectionWrapOffset = -vm.pictures.length * 20 / 2;
                    //圆形选择CSS位置修正
                    vm.panelOffsetX = 0;
                    //长panel的X方向偏移，正向移动（右）时减小，反向移动（左）时增大
                    vm.arrowVisible = false;
                    //箭头是否可见
                    vm.arrowLeftBg = vm.arrowLeftNormalSrc !== '' ? 'url(' + vm.arrowLeftNormalSrc + ')' : '';
                    vm.arrowRightBg = vm.arrowRightNormalSrc !== '' ? 'url(' + vm.arrowRightNormalSrc + ')' : '';
                    vm.imgNodeArr = new Array(vm.picNum);
                    vm.lazyloading = options.lazyload;
                    vm.placeholderImg = path + '/images/loading.gif';
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'selectionWrapOffset'
                    ];
                    var inited;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        var pageHTML = options.template;
                        element.style.display = 'none';
                        element.innerHTML = pageHTML;
                        element.style.display = 'block';
                        if (vm.adaptiveWidth || vm.pictureWidth === '100%') {
                            //自动填充外围容器宽度
                            vm.pictureWidth = element.offsetWidth;
                        }
                        if (vm.adaptiveHeight || vm.pictureHeight === '100%') {
                            //自动填充外围容器高度
                            element.style.height = '100%';
                            var children = element.children;
                            for (var i = 0, len = children.length; i < len; i++) {
                                if (children[i].getAttribute('class') === 'oni-carousel') {
                                    children[i].style.height = '100%';
                                }
                            }
                        }
                        // 预加载图片
                        var originPictures = vm.pictures.slice(), placeholderPics = [];
                        for (var i = 0; i < vm.picNum; i++) {
                            var imgPreload = new Image();
                            if (vm.lazyload) {
                                for (var j = 0; j < vm.picNum; j++) {
                                    placeholderPics.push(path + '/images/placeholder.png');
                                }
                                vm.pictures = placeholderPics;
                                (function (i) {
                                    imgPreload.onload = function (e) {
                                        setTimeout(function () {
                                            vm.imgNodeArr[i].setAttribute('src', originPictures[i]);
                                        }, 200);
                                    };
                                }(i));
                            }
                            imgPreload.src = vm.pictures[i].src;
                        }
                        // 预加载icons
                        var icons = [];
                        icons.push('http://source.qunarzz.com/general/oniui/carousel/arrows-left-hover-icon.png', 'http://source.qunarzz.com/general/oniui/carousel/arrows-right-hover-icon.png');
                        for (var i = 0; i < icons.length; i++) {
                            icons[i] = (icons[i].match(/^http/g) ? '' : path) + icons[i];
                            var image_preload = new Image();
                            image_preload.src = icons[i];
                        }
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('\u8BF7\u5C3D\u5FEB\u5347\u5230avalon1.3.7+');
                            avalon.scan(element, _vmodels);
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                    vm.stopPlay = function () {
                        //hover在组件上时使Arrow显示，停止轮播
                        vm.arrowVisible = vm.alwaysShowArrow ? true : false;
                        if (vm.hoverStop && vm.autoSlide) {
                            clearTimeout(timer);
                            timer = null;
                        }
                    };
                    vm.restartPlay = function (type) {
                        //hover离开时使Arrow隐藏，重新开始轮播
                        if (type === 'carousel') {
                            vm.arrowVisible = false;
                        }
                        vm.autoPlay();
                    };
                    vm.imgOnload = function (e, i) {
                        vm.imgNodeArr[i] = e.target;
                    };
                    //动画参数
                    vm.fadein = 1;
                    //effect为fade时，渐入的图片透明度
                    vm.fadeout = 0;
                    //effect为fade时，渐出的图片透明度
                    var animated = false;
                    //动画正在进行
                    var duringTime = vm.during / 10;
                    //补间动画的时间长度
                    var lastIndex;
                    //上一张图片index
                    vm.animate = function (direct, distance) {
                        //@method animate(direct, distance) 图片滚动，direct为方向（1/-1），distance为距离（>0整数）
                        if (animated) {
                            //防止动画队列堆积
                            return;
                        }
                        distance = distance || 1;
                        if (vm.effect === 'slide') {
                            //移动准备
                            if (direct === 1 && vm.panelOffsetX === -vm.pictureWidth * (vm.picNum - 1)) {
                                //点击为正方向且panel处于队列末尾，队列先回到0
                                vm.panelOffsetX = 0;
                            } else if (direct === -1 && vm.panelOffsetX === 0) {
                                //点击为负方向且panel处于队列开始，队列先回到末尾
                                vm.panelOffsetX = -vm.pictureWidth * (vm.picNum - 1);
                            }
                            var offset = vm.panelOffsetX - vm.pictureWidth * direct * distance;
                            //设置移动终点位置
                            //进行移动
                            var currentTime = 0;
                            //当前时间
                            var startpos = vm.panelOffsetX;
                            //位置初始值
                            var duringDistance = vm.pictureWidth * -direct * distance;
                            //位置变化量
                            var go = function () {
                                animated = false;
                                if (vm.panelOffsetX <= -vm.pictureWidth * (vm.pictures.length - 1) && direct > 0) {
                                    //队列已到末尾位置，且将要往正方向移动，队列回到0
                                    vm.panelOffsetX = 0;
                                } else if (vm.panelOffsetX >= 0 && direct < 0) {
                                    //队列已到开始位置，且将要往反方向移动，队列回到末尾
                                    vm.panelOffsetX = -vm.pictureWidth * (vm.picNum - 1);
                                } else {
                                    //队列还未到终点，在移动过程中
                                    vm.panelOffsetX = Tween[vm.easing](currentTime, startpos, duringDistance, duringTime);
                                    //移动
                                    if (currentTime < duringTime) {
                                        currentTime += 1;
                                        requestAnimationFrame(go);
                                        animated = true;
                                    }
                                }
                            };
                        } else if (vm.effect === 'fade') {
                            //effect为fade
                            var currentTime = 0;
                            //当前时间
                            var go = function () {
                                animated = false;
                                vm.fadein = Tween[vm.easing](currentTime, 0, 1, duringTime);
                                //移动
                                vm.fadeout = Tween[vm.easing](currentTime, 1, -1, duringTime);
                                //移动
                                if (currentTime < duringTime) {
                                    currentTime += 1;
                                    requestAnimationFrame(go);
                                    animated = true;
                                }
                            };
                        } else {
                            //effect为none
                            var go = function () {
                                vm.fadein = 1;
                                vm.fadeout = 0;
                            };
                        }
                        go();
                        //更新图片index
                        lastIndex = vm.currentIndex;
                        //当前图片变为上一张
                        vm.currentIndex += 1 * direct * distance;
                        if (vm.currentIndex > vm.selections.length - 1) {
                            //最右端继续+1时回0
                            vm.currentIndex = 0;
                        } else if (vm.currentIndex < 0) {
                            //最左端继续-1时回末尾
                            vm.currentIndex = vm.selections.length - 1;
                        }
                    };
                    vm.getOpacity = function (index) {
                        //@method getOpacity(index) fade effect 下改变前后图片透明度
                        if (vm.effect !== 'slide') {
                            var num = vm.fadein + vm.fadeout;
                            if (index === vm.currentIndex) {
                                return vm.fadein;
                            } else if (index === lastIndex) {
                                return vm.fadeout;
                            } else {
                                return 0;
                            }
                        } else {
                            return 1;
                        }
                    };
                    var hoverIndex = 0;
                    vm.selectPic = function (index, e) {
                        //@method selectPic(index) 通过底部圆形选择图片
                        hoverIndex = index;
                        if (e.type === vm.eventType || vm.eventType === 'both') {
                            var distance = vm.currentIndex - index;
                            var direct = distance > 0 ? -1 : 1;
                            if (e.type === 'mouseenter') {
                                setTimeout(function () {
                                    vm.animate(direct, Math.abs(distance));
                                }, 300)    //mouseenter事件设置延时以防止切换时间间隔太小
;
                            } else {
                                vm.animate(direct, Math.abs(distance));
                            }
                            if (vm.autoSlide) {
                                clearTimeout(timer);
                                timer = null;
                            }
                            //修复hover的TAB和select的TAB不一致
                            var fixIndex = setInterval(function () {
                                    if (vm.currentIndex !== hoverIndex) {
                                        var distance = vm.currentIndex - hoverIndex;
                                        var direct = distance > 0 ? -1 : 1;
                                        vm.animate(direct, Math.abs(distance));
                                    } else {
                                        clearInterval(fixIndex);
                                    }
                                }, 800);
                        }
                    };
                    vm.arrowHover = function (direction) {
                        //@method arrowHover(direction) 左右箭头hover事件
                        if (direction === 'left') {
                            vm.arrowLeftBg = vm.arrowLeftHoverSrc !== '' ? 'url(' + vm.arrowLeftHoverSrc + ')' : '';
                        } else {
                            vm.arrowRightBg = vm.arrowRightHoverSrc !== '' ? 'url(' + vm.arrowRightHoverSrc + ')' : '';
                        }
                    };
                    vm.arrowBlur = function (direction) {
                        //@method arrowBlur(direction) 左右箭头blur事件
                        if (direction === 'left') {
                            vm.arrowLeftBg = vm.arrowLeftNormalSrc !== '' ? 'url(' + vm.arrowLeftNormalSrc + ')' : '';
                        } else {
                            vm.arrowRightBg = vm.arrowRightNormalSrc !== '' ? 'url(' + vm.arrowRightNormalSrc + ')' : '';
                        }
                    };
                    var timer = null;
                    //轮播计时器
                    vm.autoPlay = function () {
                        //@method autoPlay(vmodel) 自动开始轮播
                        if (timer === null && vm.autoSlide) {
                            function play() {
                                timer = setTimeout(function () {
                                    vm.animate(1);
                                    //正方向移动
                                    play();
                                }, vm.timeout);
                            }
                            play();
                        }
                    };
                });
            if (vmodel.effect !== 'slide') {
                //fade 或者 none 模式下的布局
                vmodel.itemPosition = 'absolute';
                vmodel.panelPosition = 'relative';
            }
            vmodel.pictures.push(vmodel.pictures[0]);
            if (typeof vmodel.links[0] !== 'undefined') {
                vmodel.links.push(vmodel.links[0]);
            }
            vmodel.autoPlay();
            //自动开始轮播
            return vmodel;
        };
    widget.vertion = '1.0.1';
    widget.defaults = {
        pictures: [],
        //@config  轮播图片素材
        links: [],
        //@config  图片链接
        pictureWidth: 500,
        //@config  图片显示宽度
        pictureHeight: 200,
        //@config  图片显示高度
        effect: 'slide',
        //@config  图片切换类型，取值：none:无特效 / fade:渐隐 / slide:滑动
        easing: 'easeInOut',
        //@config  缓动类型，取值 linear:无缓动效果 / easeIn:在过渡的开始提供缓动效果 / easeOut:在过渡的结尾提供缓动效果 / easeInOut 在过渡的开始和结尾提供缓动效果
        timeout: 2500,
        //@config  切换时间间隔
        during: 300,
        //@config  切换速度，越小越快，单位为毫秒
        alwaysShowArrow: true,
        //@config  显示左右切换箭头
        alwaysShowSelection: true,
        //@config  显示底部圆形切换部件
        autoSlide: true,
        //@config  自动播放
        hoverStop: true,
        //@config  鼠标经过停止播放
        adaptiveWidth: false,
        //@config  适应外围宽度，为true时指定pictureWidth不起作用
        adaptiveHeight: false,
        //@config  适应外围高度，为true时指定pictureHeight不起作用
        eventType: 'click',
        //@config  触发tab切换的nav上的事件类型，取值click\mouseenter\both
        arrowLeftNormalSrc: '',
        //@config  左箭头正常状态图标，可不传
        arrowRightNormalSrc: '',
        //@config  右箭头正常状态图标，可不传
        arrowLeftHoverSrc: '',
        //@config  左箭头hover状态图标，可不传
        arrowRightHoverSrc: '',
        //@config  右箭头hover状态图标，可不传
        arrowLeftClass: '',
        //@config  左右箭头的className，可不传
        arrowRightClass: '',
        //@config  左右箭头的className，可不传
        lazyload: false,
        //@config  图片进行懒加载
        onInit: avalon.noop,
        //@optMethod onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        getTemplate: function (tmpl, opts, tplName) {
            return tmpl;
        },
        //@optMethod getTemplate(tpl, opts, tplName) 定制修改模板接口
        $author: 'heiwu805@hotmail.com'
    };
}
)();
},{"avalon":2}],11:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
template = "<li class=\"oni-checkboxlist-item oni-checkboxlist-all\" \n    ms-css-float=\"vertical? 'none': 'left'\" \n    ms-if=\"!!alltext\"\n    ms-class=\"fl:!vertical\">\n    <label ms-if=\"data.size()\">\n        <input type=\"checkbox\" \n               ms-click=\"_clickAll($event)\" \n               ms-duplex-checked=\"all\" \n               value = \"all\"\n               class=\"checkbox\"/> {{alltext}}\n    </label>\n</li>\n<li ms-repeat-cpitem=\"data\" class=\"oni-checkboxlist-item\" \n    ms-css-float=\"vertical? 'none': 'left'\"\n    ms-class=\"fl:!vertical\">\n    <label>\n        <input type=\"checkbox\" \n               ms-click=\"_clickOne($event, $index)\"\n               ms-duplex=\"MS_OPTIONS_DUPLEX\"\n               ms-value=\"{{cpitem.value||cpitem.text}}\" \n               class=\"checkbox\" /> \n        {{cpitem.text|html}}\n    </label>\n</li>\n";

module.exports = (
function () {
    var widget = avalon.ui.checkboxlist = function (element, data, vmodels) {
            var options = data.checkboxlistOptions, fetchVM = typeof options.fetch === 'string' ? avalon.getModel(options.fetch, vmodels) : options.fetch, fetchFunc = fetchVM && avalon.type(fetchVM) === 'array' && fetchVM[1][fetchVM[0]] || options.fetch || null, onSelectVM = typeof options.onSelect === 'string' ? avalon.getModel(options.onSelect, vmodels) : false, onSelect = onSelectVM && onSelectVM[1][onSelectVM[0]] || avalon.noop, onfetch = avalon.type(fetchFunc) === 'function' ? fetchFunc : null;
            var vmodel = avalon.define(data.checkboxlistId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'keys'
                    ];
                    vm.widgetElement = element;
                    vm.keys = [];
                    // 点击全选按钮之后的回调
                    vm._clickAll = function (event) {
                        setTimeout(function () {
                            var checkStatus = event.target.checked;
                            if (checkStatus) {
                                duplexVM[1][duplexVM[0]] = vmodel.keys.map(function (el) {
                                    return el + '';
                                });
                            } else {
                                duplexVM[1][duplexVM[0]].clear();
                            }
                            // 执行onselect回调
                            onSelect.apply(0, [
                                vm.data.$model,
                                checkStatus,
                                event.target
                            ]);
                        }, 20);
                    };
                    // 选中某一项之后的回调操作
                    vm._clickOne = function (event, index) {
                        onSelect.apply(0, [
                            vm.data.$model,
                            event.target.checked,
                            event.target
                        ]);
                    };
                    vm.$init = function (continueScan) {
                        var temp = template.replace('MS_OPTIONS_DUPLEX', options.duplex);
                        vmodel.template = vmodel.getTemplate(temp, options);
                        element.className += ' oni-checkboxlist oni-checkboxlist-list oni-helper-clearfix';
                        element.innerHTML = vmodel.template;
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    vm.$remove = function () {
                        element.innerHTML = '';
                    };
                });
            var duplexVM = avalon.getModel(options.duplex, [vmodel].concat(vmodels)), duplexArr = duplexVM && duplexVM[1][duplexVM[0]];
            vmodel.data.$watch('length', function (len) {
                if (len) {
                    setKeys(vmodel, duplexArr);
                }
            });
            if (!duplexArr) {
                throw new Error('\u672A\u914D\u7F6Eduplex');
            }
            element.value = duplexArr.$model.join(',');
            // 为了兼容 jvalidator，将ul的value同步为duplex的值
            duplexArr.$watch('length', function (newValue) {
                // 当选中checkbox或者全校选中时判断vmodel.all，从而判断是否选中"全选"按钮
                if (newValue == 0) {
                    element.value = '';
                } else {
                    element.value = duplexVM[1][duplexVM[0]].join(',');
                }
                vmodel.all = newValue == vmodel.data.length;
            });
            if (vmodel.data.length) {
                setKeys(vmodel, duplexArr);
                return vmodel;
            }
            if (options.fetch) {
                /*
                通过回调返回数据，数据结构必须是
                [
                    { text : A , value : B , extra : C , ... }
                ]
                以 text 作为每一个选项的文字，value 为选项的值，如果没有则直接使用 text
            */
                // 取到数据之后进行视图的渲染
                onfetch.apply(0, [function (data) {
                        vmodel.data = data;
                        var data = [];
                        avalon.each(vmodel.data, function (index, item) {
                            data.push(item.value || item.text);
                        });
                        vmodel.keys = data;
                    }]);
            } else {
                var fragment = document.createElement('div');
                while (element.firstChild) {
                    fragment.appendChild(element.firstChild);
                }
                switch (options.type) {
                // 配置了type为week的话，使用组件默认的提供的data
                case 'week':
                    var data = [
                            {
                                text: '\u5468\u4E00',
                                value: 'MONDAY'
                            },
                            {
                                text: '\u5468\u4E8C',
                                value: 'TUESDAY'
                            },
                            {
                                text: '\u5468\u4E09',
                                value: 'WEDNESDAY'
                            },
                            {
                                text: '\u5468\u56DB',
                                value: 'THURSDAY'
                            },
                            {
                                text: '\u5468\u4E94',
                                value: 'FRIDAY'
                            },
                            {
                                text: '\u5468\u516D',
                                value: 'SATURDAY'
                            },
                            {
                                text: '\u5468\u65E5',
                                value: 'SUNDAY'
                            }
                        ];
                    break;
                default:
                    // 既未配置fetch自取data，也没配置type使用默认的data，就需要通过页面提供的html抽取出data
                    var inputs = fragment.getElementsByTagName('input');
                    var data = [];
                    for (var i = 0; i < inputs.length; i++) {
                        var input = inputs[i], li = input.parentNode, txt = '';
                        // 获取离input最近的父级li元素
                        while (li) {
                            if (li.tagName == 'LI') {
                                break;
                            } else {
                                li = li.parentNode;
                            }
                        }
                        txt = li.textContent || li.innerText;
                        // trim掉li元素中文本两边的空格
                        txt.replace(/^\s+/, '').replace(/\s+$/, '');
                        // 将提取出来的数据保存在data中
                        data.push({
                            text: txt,
                            value: input.value || txt
                        });
                    }
                    break;
                }
                vmodel.data = data;
            }
            avalon.ui.checkboxlist.defaults.data = [];
            return vmodel;
        };
    function setKeys(vmodel, duplexVM) {
        var data = [], allChecked = true;
        duplexVM = duplexVM && duplexVM.$model;
        avalon.each(vmodel.data, function (index, item) {
            data.push(item.value || item.text);
        });
        vmodel.keys = data;
        avalon.each(data, function (index, item) {
            if (duplexVM.indexOf(item) === -1) {
                allChecked = false;
            }
        });
        vmodel.all = allChecked;
    }
    widget.version = 1;
    widget.defaults = {
        data: [],
        //@config 所有选项值的集合，通过此数据来渲染初始视图。可以在组件初始化之前配置data，也可以在异步取得数据之后在配置。当同时配置了data、fetch且在绑定元素内部显示设置了要渲染的checkbox列表，则优先级顺序是：data>fetch>sub elements
        all: false,
        //@config 默认不选中所有选项
        alltext: '\u5168\u90E8',
        //@config 显示"全部"按钮，方便进行全选或者全不选操作,不需要全选操作的话可以设置alltext为""
        type: '',
        //@config 内置type为week时的data，用户只需配置type为week即可显示周一到周日的选项 
        /**
         * @config 通过配置fetch来获得要显示的数据，数据格式必须如下所示：
             <pre class="brush:javascript;gutter:false;toolbar:false">
             [
                { text : '文字1' , value : 'w1' } ,
                { text : '文字2' , value : 'w2' } ,
                { text : '文字3' , value : 'w3' } ,
                { text : '文字4' , value : 'w4' }
             ]
             </pre>
         */
        fetch: '',
        template: '',
        /**
         * @config {Function} 组件面板展开后的回调函数
         * @param data {Array} checkboxlist的选项集合
         * @param checkStatus {Boolean} 选中或者未选中的状态
         * @param target {ElementObj} 触发事件的dom对象的引用 
         */
        onSelect: avalon.noop,
        getTemplate: function (tmpl, options) {
            return tmpl;
        },
        vertical: true    //@config 如果希望选框水平排列则设置vertical为false，默认垂直排列
    };
    return avalon;
}
)();
},{"../avalon.getModel":6}],12:[function(innerRequire,module,exports){
var avalon = innerRequire("../draggable/avalon.draggable"),
sourceHTML = "<div class=\"oni-colorpicker\" ms-css-background-color=\"bgColor\"></div>\nMS_OPTION_COM\n<div class=\"oni-colorpicker-hue\" ms-css-background=\"hue_color\"></div>\nMS_OPTION_COM\n<div class=\"oni-colorpicker-wheel\" ms-draggable data-draggable-before-start=\"wheelDragStart\" data-draggable-drag=\"wheelDrag\">\n\t<div class=\"oni-colorpicker-marker\" ms-css-left=\"wheel_m.left\" ms-css-top=\"wheel_m.top\"></div>\n</div>\nMS_OPTION_COM\n<div class=\"oni-colorpicker-overlay\" ms-draggable data-draggable-before-start=\"overlayDragStart\" data-draggable-drag=\"overlayDrag\">\n\t<div class=\"oni-colorpicker-marker\" ms-css-left=\"overlay_m.left\" ms-css-top=\"overlay_m.top\"></div>\n</div>";

module.exports = (
function () {
    var vm_temp = {},
        // 记录前一个被打开的ctr
        defaultColor = '#ffffff';
    // 默认颜色，用于在初始化时 duplex 或 defaultColor 没有输入或不合法时赋值
    var widget = avalon.ui.colorpicker = function (element, data, vmodels) {
            //初始化
            var
                //控件固定信息
                o_offset = 97,
                //原点于控件中的偏移量
                r = 84,
                //圆环半径
                overlay_w = 100,
                //overlay宽度
                //hsl颜色表示所需参数
                h,
                //h = angle - 0.25, h ∈ [0, 1)
                s,
                //s ∈ [0, 1]
                l,
                //l ∈ [0, 1]
                $element = avalon(element), cp, $wheel, $overlay, docClickCallback;
            var vm = {
                    $id: data.colorpickerId,
                    $skipArray: ['autoHide'],
                    //marker坐标
                    wheel_m: {
                        left: 0,
                        top: 0
                    },
                    overlay_m: {
                        left: 0,
                        top: 0
                    },
                    cp_color: '',
                    // 最终颜色
                    input_color: '',
                    // input字体颜色
                    hue_color: '',
                    // overlay背景色，s=1, l=0.5
                    toggle: false,
                    $init: function () {
                        renderView();
                        // 颜色初始化
                        // 合法性检测
                        if (!isHexColorValid(element.value)) {
                            avalon.log(element.value + ' \u4E0D\u662F\u5408\u6CD5\u7684\u5341\u516D\u8FDB\u5236\u989C\u8272\u8868\u793A\u6CD5');
                            element.value = defaultColor;
                        }
                        vmodel.setByIp(element.value);
                    },
                    $remove: function () {
                        cp.innerHTML = '';
                        avalon.unbind(document, 'click', docClickCallback);
                    },
                    setByIp: function (val) {
                        if (val !== vmodel.cp_color) {
                            // 阻止从ctr改变element.value时触发函数
                            if (isHexColorValid(val)) {
                                var r = parseInt(val.substr(1, 2), 16), g = parseInt(val.substr(5, 2), 16), b = parseInt(val.substr(3, 2), 16);
                                h = rgbToHsl(r, g, b)[0];
                                s = rgbToHsl(r, g, b)[1];
                                l = rgbToHsl(r, g, b)[2];
                                //h to angle
                                var angle = 2 * Math.PI * (h + 0.25);
                                //s,l to left,top
                                var overlay_m_left = (1 - s) * overlay_w, overlay_m_top = (1 - l) * overlay_w;
                                setWheelMarkerPos(angle);
                                setOverlayMarkerPos(overlay_m_left, overlay_m_top);
                                setOverlayBg();
                                vmodel.cp_color = val;
                                vmodel.input_color = l > 0.5 ? 'black' : 'white';
                            }
                        }
                    },
                    wheelDragStart: function (mouse_event, data) {
                        //禁止默认坐标修改
                        data.dragX = false;
                        data.dragY = false;
                        //设置marker坐标：快速调节
                        wheelDragFn(mouse_event);
                    },
                    wheelDrag: function (mouse_event) {
                        //设置marker坐标：拖拽调节
                        wheelDragFn(mouse_event);
                    },
                    overlayDragStart: function (mouse_event, data) {
                        //禁止默认坐标修改
                        data.dragX = false;
                        data.dragY = false;
                        //设置marker坐标：快速调节
                        overlayDrag(mouse_event);
                    },
                    overlayDrag: function (mouse_event) {
                        //设置marker坐标：拖拽调节
                        overlayDrag(mouse_event);
                    },
                    ipClick: function (e) {
                        vmodel.toggle = true;
                        showCp();
                        //如果当前打开的vm与前一个不同
                        if (vmodel !== vm_temp) {
                            vm_temp.toggle = false;
                            vm_temp = vmodel;
                        }
                        e.stopPropagation();
                    },
                    cpClick: function (e) {
                        e.stopPropagation();
                    }
                };
            avalon.mix(vm, data.colorpickerOptions);
            var vmodel = avalon.define(vm);
            return vmodel;
            function wheelDragFn(mouse_event) {
                //鼠标角度（极坐标系）的绝对值
                var angle = getAngle();
                //angle to h: 计算hsl中角度h，范围：[0, 1]
                h = angle / (2 * Math.PI) - 0.25;
                setWheelMarkerPos(angle);
                //改颜色
                setOverlayBg();
                setCtrBg();
                function getAngle() {
                    /*
				 * 重复绘制坐标系建立坐标的原因：
				 * 避免用户在拖拽的过程中滚动页面导致坐标紊乱
				 */
                    //原点坐标
                    var o_pos_x = $wheel.offset().left + o_offset, o_pos_y = $wheel.offset().top + o_offset,
                        //鼠标相对原点坐标
                        mouse_pos_x = mouse_event.pageX - o_pos_x, mouse_pos_y = o_pos_y - mouse_event.pageY,
                        //角度
                        angle = Math.atan(mouse_pos_y / mouse_pos_x);
                    if (mouse_pos_x < 0) {
                        angle = Math.PI + angle;
                    }
                    return angle;
                }
            }
            function setWheelMarkerPos(angle) {
                //marker坐标（二维坐标系）
                var marker_pos = {
                        x: Math.round(r * Math.cos(angle)),
                        y: Math.round(r * Math.sin(angle))
                    };
                //设置marker坐标（css）
                vmodel.wheel_m.left = o_offset + marker_pos.x;
                vmodel.wheel_m.top = o_offset - marker_pos.y;
            }
            function overlayDrag(mouse_event) {
                /*
			 * 重复绘制坐标系建立坐标的原因：
			 * 避免用户在拖拽的过程中滚动页面导致坐标紊乱
			 */
                //鼠标在overlay中坐标，原点为overlay左上角
                var mouse_pos = {
                        x: mouse_event.pageX - $overlay.offset().left,
                        y: mouse_event.pageY - $overlay.offset().top
                    };
                //marker坐标（css）
                var overlay_m_left = getMarkerPos(mouse_pos.x), overlay_m_top = getMarkerPos(mouse_pos.y);
                setOverlayMarkerPos(overlay_m_left, overlay_m_top);
                //计算hsl中的s和l，范围[0, 1]
                s = 1 - overlay_m_left / overlay_w;
                l = 1 - overlay_m_top / overlay_w;
                setCtrBg();
                function getMarkerPos(num) {
                    if (num < 0) {
                        return 0;
                    }
                    if (num > overlay_w) {
                        return overlay_w;
                    }
                    return num;
                }
            }
            function setOverlayMarkerPos(left, top) {
                //设置marker坐标（css）
                var overlay_m = vmodel.overlay_m;
                overlay_m.left = left;
                overlay_m.top = top;
            }
            function setOverlayBg() {
                vmodel.hue_color = getColor(h, 1, 0.5);
            }
            function setCtrBg() {
                element.value = vmodel.cp_color = getColor(h, s, l);
                vmodel.input_color = l > 0.5 ? 'black' : 'white';
            }
            function renderView() {
                //render input
                if (!('ms-duplex' in element.msData)) {
                    element.setAttribute('ms-duplex', 'defaultColor');
                }
                element.setAttribute('data-duplex-changed', 'setByIp');
                element.setAttribute('ms-css-background', 'cp_color');
                element.setAttribute('ms-css-color', 'input_color');
                //render colorpicker
                var dom_arr = sourceHTML.split('MS_OPTION_COM').map(function (item) {
                        return avalon.parseHTML(item).firstChild;
                    }), cp_hue = dom_arr[1], cp_wheel = dom_arr[2], cp_overlay = dom_arr[3];
                cp = dom_arr[0];
                $wheel = avalon(cp_wheel), $overlay = avalon(cp_overlay);
                //构建cp
                cp.appendChild(cp_hue);
                cp.appendChild(cp_wheel);
                cp.appendChild(cp_overlay);
                //构建colorpicker
                //自动隐藏
                if (vmodel.autoHide) {
                    avalon(cp).addClass('oni-colorpicker-auto-hide');
                    cp.setAttribute('ms-visible', 'toggle');
                    cp.setAttribute('ms-click', 'cpClick');
                    element.setAttribute('ms-click', 'ipClick');
                    docClickCallback = avalon.bind(document, 'click', function () {
                        vmodel.toggle = false;
                    });
                    document.body.appendChild(cp);
                } else {
                    insertAfter(cp, element);
                }
                avalon.scan(element, [vmodel].concat(vmodels));
                avalon.scan(cp, [vmodel].concat(vmodels));
            }
            function showCp() {
                var input_pos = $element.offset();
                cp.style.left = input_pos.left + 'px';
                cp.style.top = element.offsetHeight + input_pos.top + 'px';
            }
        };
    widget.version = 1;
    widget.defaults = {
        autoHide: true,
        // @config 是否自动隐藏控件
        defaultColor: '#ffffff',
        // @config 默认颜色
        bgColor: ''    // @config 背景颜色
    };
    function isHexColorValid(val) {
        //正则匹配十六进制颜色表示
        var reg = /#[0-9,a-f]{6}$/i;
        return reg.test(val);
    }
    function hslToRgb(h, s, l) {
        var r, g, b;
        if (s == 0) {
            r = g = b = l;
        } else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hueToRgb(p, q, h + 1 / 3);
            g = hueToRgb(p, q, h - 1 / 3);
            b = hueToRgb(p, q, h);
        }
        return [
            Math.round(r * 255),
            Math.round(g * 255),
            Math.round(b * 255)
        ];
        function hueToRgb(p, q, t) {
            if (t < 0)
                t += 1;
            if (t > 1)
                t -= 1;
            if (t < 1 / 6)
                return p + (q - p) * 6 * t;
            if (t < 1 / 2)
                return q;
            if (t < 2 / 3)
                return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        }
    }
    function rgbToHsl(r, g, b) {
        r /= 255, g /= 255, b /= 255;
        var max = Math.max(r, g, b), min = Math.min(r, g, b);
        var h, s, l = (max + min) / 2;
        if (max == min) {
            h = s = 0;    // achromatic
        } else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            }
            h /= 6;
        }
        return [
            h,
            s,
            l
        ];
    }
    function getColor(h, l, s) {
        return rgbToText(hslToRgb(h, l, s));
    }
    function rgbToText(rgb) {
        return '#' + rgb.map(toHex).join('');
        function toHex(num) {
            if (num < 16) {
                return '0' + num.toString(16);
            }
            return num.toString(16);
        }
    }
    function insertAfter(newEl, targetEl) {
        var parentEl = targetEl.parentNode;
        if (parentEl.lastChild == targetEl) {
            parentEl.appendChild(newEl);
        } else {
            parentEl.insertBefore(newEl, targetEl.nextSibling);
        }
    }
    return avalon;
}
)();
},{"../draggable/avalon.draggable":20}],13:[function(innerRequire,module,exports){
innerRequire("avalon");

module.exports = (
function () {
    function parseCookieValue(s) {
        if (s.indexOf('"') === 0) {
            // This is a quoted cookie as according to RFC2068, unescape...
            s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
        }
        try {
            return decodeURIComponent(s.replace(/\+/g, ' '))    //处理加号
;
        } catch (e) {
            return s;
        }
    }
    //
    var Cookie = {
            /*
         * @interface 将两个字符串变成一个cookie字段 
         *<pre class="brush:javascript;gutter:false;toolbar:false">
         *    Cookie.stringify('foo', 'bar', { httpOnly: true })  => "foo=bar; httpOnly"
         *</pre>
         *  @param name {String} cookie的名字不能为空
         *  @param val {String} cookie的名字不能为空
         *  @param opts {Undefined|Object|Number} 配置对象，如果为数字则当成maxAge,否则为对象时，里面可以配置maxAge, domain, path, expires, httpOnly, secure
         */
            stringify: function (name, val, opts) {
                var pairs = [name + '=' + encodeURIComponent(val)];
                if (isFinite(opts) && typeof opts === 'number') {
                    pairs.push('Max-Age=' + opts);
                } else {
                    opts = opts || {};
                    if (opts.maxAge)
                        pairs.push('Max-Age=' + opts.maxAge);
                    if (opts.domain)
                        pairs.push('Domain=' + opts.domain);
                    if (opts.path)
                        pairs.push('Path=' + opts.path);
                    if (opts.expires)
                        pairs.push('Expires=' + opts.expires.toUTCString());
                    if (opts.httpOnly)
                        pairs.push('HttpOnly');
                    if (opts.secure)
                        pairs.push('Secure');
                }
                return pairs.join('; ');
            },
            /*
         *  @interface 遍历所有cookie 
         *  @param callback {Function} 里面会依次传入key与value
         */
            forEach: function (callback) {
                var pairs = String(document.cookie).split(/; */);
                pairs.forEach(function (pair) {
                    var index = pair.indexOf('=');
                    if (index === -1) {
                        return;
                    }
                    var key = pair.substr(0, index).trim();
                    var val = pair.substr(++index, pair.length).trim();
                    callback(key, parseCookieValue(val));
                });
            },
            /*
         *  @interface 获取某一cookie 
         *  @param name {String} 
         *  @return {String}
         */
            get: function (name) {
                var ret;
                try {
                    Cookie.forEach(function (key, value) {
                        if (key === name) {
                            ret = value;
                            throw '';
                        }
                    });
                } catch (e) {
                }
                return ret;
            },
            /*
         *  @interface 获取所有cookie，以对象形式返回
         *  @returns {Object}
         */
            getAll: function () {
                var obj = {};
                Cookie.forEach(function (key, value) {
                    if (!(key in obj)) {
                        obj[key] = value;
                    }
                });
                return obj;
            },
            /*
         *  @interface 添加或设置某一cookie
         *  @param name {String} 
         *  @param value {String} 
         *  @return {Undefined|Object|Number}
         */
            set: function (key, val, opts) {
                document.cookie = Cookie.stringify.apply(0, arguments);
            },
            /*
         *  @interface 移除某一cookie
         *  @param name {String} 
         *  @param opt {Object|Undefined} 
         */
            remove: function (key, opt) {
                opt = opt || {};
                if (!opt.expires) {
                    opt.expires = new Date(1970, 0, 1);
                }
                Cookie.set(key, '', opt);
            },
            /*
         *  @interface 移除所有cookie
         */
            clear: function () {
                Cookie.forEach(function (key, value) {
                    Cookie.remove(key);
                });
            }
        };
    avalon.cookie = Cookie;
    return avalon;
}
)();
},{"avalon":2}],14:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<div class=\"oni-coupledatepicker-item\">\n    <input\n    ms-widget=\"datepicker, $, $fromConfig\"\n    ms-duplex=\"MS_OPTION_FROMDUPLEX\"/>   \n</div>\n<span class=\"label\">-</span>\n<div class=\"oni-coupledatepicker-item\">\n    <input \n    ms-widget=\"datepicker, $, $toConfig\"\n    ms-duplex=\"MS_OPTION_TODUPLEX\"/>\n</div>\nMS_OPTION_TEMPLATE\n<input\n    ms-widget=\"datepicker, $, $fromConfig\"\n    ms-duplex=\"MS_OPTION_FROMDUPLEX\"/>   \n<input \n    ms-widget=\"datepicker, $, $toConfig\"\n    ms-duplex=\"MS_OPTION_TODUPLEX\"/>";
innerRequire("./avalon.datepicker");

module.exports = (
function () {
    var widget = avalon.ui.coupledatepicker = function (element, data, vmodels) {
            var options = data.coupledatepickerOptions, parseDate = typeof options.parseDate === 'function' && options.parseDate.bind(options) || widget.defaults.parseDate.bind(options), formatDate = typeof options.formatDate === 'function' && options.formatDate.bind(options) || widget.defaults.formatDate.bind(options), duplex = options.duplex && options.duplex.split(','), container = options.container, rules = options.rules, _toMinDate = '', _toMaxDate = '', rangeRules = '', duplexFrom, duplexTo, inputFromVM, inputToVM;
            // 获取rules配置对象
            if (rules && avalon.type(rules) === 'string') {
                var ruleVM = avalon.getModel(rules, vmodels);
                rules = ruleVM[1][ruleVM[0]];
            }
            if (rules && avalon.type(rules) === 'object') {
                // 让rules对象的toMinDate、toMaxDate、fromMinDate、fromMaxDate是可监控的属性
                rules = avalon.mix({}, rules.$model || rules);
                rules.toMinDate = rules.toMinDate || '';
                rules.toMaxDate = rules.toMaxDate || '';
                rules.fromMinDate = rules.fromMinDate || '';
                rules.fromMaxDate = rules.fromMaxDate || '';
            } else {
                rules = '';
            }
            options.rules = rules;
            _toMinDate = rules.toMinDate;
            _toMaxDate = rules.toMaxDate;
            rangeRules = options.rules && options.rules.rules || '';
            rangeRules = rangeRules.length > 0 ? rangeRules.split(',') : [];
            if (typeof container === 'string') {
                container = container.split(',');
                container[0] = document.getElementById(container[0]);
                container[1] = document.getElementById(container[1]);
            }
            if (!container.length) {
                container = element.getElementsByTagName('div');
            }
            options.container = container = container.length ? avalon.slice(container, 0) : container;
            options.template = initValues(options.getTemplate(sourceHTML, options));
            var vmodel = avalon.define(data.coupledatepickerId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'container',
                        'calendarWrapper',
                        'template',
                        'changeMonthAndYear',
                        'startDay',
                        'fromLabel',
                        'toLabel',
                        'duplex'
                    ];
                    vm.widgetElement = element;
                    vm.fromSelectCal = function (date) {
                        if (vmodel.rules && vmodel.rules.rules) {
                            applyRules(date);
                        }
                    };
                    vm.getDates = function () {
                        var inputFromValue = duplexFrom ? duplexFrom[1][duplexFrom[0]] : vmodel.inputFromValue, inputFromDate = parseDate(inputFromValue), inputToValue = duplexTo ? duplexTo[1][duplexTo[0]] : vmodel.inputToValue, inputToDate = parseDate(inputToValue);
                        return inputFromDate && inputToDate && [
                            inputFromDate,
                            inputToDate
                        ] || null;
                    };
                    vm.$fromConfig = {
                        changeMonthAndYear: options.changeMonthAndYear,
                        startDay: options.startDay,
                        parseDate: parseDate,
                        formatDate: formatDate,
                        minDate: 'rules.fromMinDate',
                        maxDate: 'rules.fromMaxDate',
                        onSelect: vm.fromSelectCal,
                        calendarLabel: options.fromLabel,
                        onInit: function (fromVM) {
                            inputFromVM = fromVM;
                            options.disabled && (inputFromVM.disabled = true);
                        }
                    };
                    vm.$toConfig = {
                        changeMonthAndYear: options.changeMonthAndYear,
                        startDay: options.startDay,
                        parseDate: parseDate,
                        formatDate: formatDate,
                        minDate: 'rules.toMinDate',
                        maxDate: 'rules.toMaxDate',
                        calendarLabel: options.toLabel,
                        onInit: function (toVM) {
                            inputToVM = toVM;
                            options.disabled && (inputToVM.disabled = true);
                        }
                    };
                    vm.$init = function (continueScan) {
                        var template = options.template.split('MS_OPTION_TEMPLATE'), containerTemp = template[0], inputOnlyTemp = template[1], calendar = null, inputOnly = null, fromInput = null, toInput = null, fromContainer = null, toContainer = null, calendarTemplate = '', inputFromValue = '', scanVM = [vmodel];
                        avalon(element).addClass('oni-coupledatepicker');
                        if (duplexFrom) {
                            inputFromValue = duplexFrom[1][duplexFrom[0]];
                            scanVM.push(duplexFrom[1]);
                        }
                        if (duplexTo) {
                            scanVM.push(duplexTo[1]);
                        }
                        applyRules(inputFromValue && parseDate(inputFromValue));
                        if (container.length) {
                            calendarTemplate = inputOnlyTemp;
                            inputOnly = avalon.parseHTML(inputOnlyTemp);
                            fromInput = inputOnly.firstChild;
                            toInput = inputOnly.lastChild;
                            fromContainer = container[0];
                            toContainer = container[1];
                            fromContainer.appendChild(fromInput);
                            toContainer.appendChild(toInput);
                            avalon(fromContainer).addClass('oni-coupledatepicker-item');
                            avalon(toContainer).addClass('oni-coupledatepicker-item');
                        } else {
                            calendarTemplate = containerTemp;
                            calendar = avalon.parseHTML(calendarTemplate);
                            element.appendChild(calendar);
                        }
                        avalon.scan(element, scanVM.concat(vmodels));
                        if (typeof options.onInit === 'function') {
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                });
            vmodel.$watch('disabled', function (val) {
                inputFromVM.disabled = val;
                inputToVM.disabled = val;
            });
            var _c = {
                    '+M': function (time, n) {
                        var _d = time.getDate();
                        time.setMonth(time.getMonth() + n);
                        if (time.getDate() !== _d) {
                            time.setDate(0);
                        }
                    },
                    '-M': function (time, n) {
                        var _d = time.getDate();
                        time.setMonth(time.getMonth() - n);
                        if (time.getDate() !== _d) {
                            time.setDate(0);
                        }
                    },
                    '+D': function (time, n) {
                        time.setDate(time.getDate() + n);
                    },
                    '-D': function (time, n) {
                        time.setDate(time.getDate() - n);
                    },
                    '+Y': function (time, n) {
                        time.setFullYear(time.getFullYear() + n);
                    },
                    '-Y': function (time, n) {
                        time.setFullYear(time.getFullYear() - n);
                    }
                };
            function initValues(template) {
                if (duplex) {
                    var duplexLen = duplex.length, duplexVM1 = avalon.getModel(duplex[0].trim(), vmodels), duplexVM2 = duplexLen === 1 ? null : avalon.getModel(duplex[1].trim(), vmodels), duplexVal1 = duplexVM1[1][duplexVM1[0]], duplexVal2 = duplexVM2 ? duplexVM2[1][duplexVM2[0]] : '';
                    duplexFrom = duplexVM1;
                    duplexTo = duplexVM2;
                    setValues(duplexLen, duplexVal1, duplexVal2);
                    if (duplexFrom) {
                        template = template.replace(/MS_OPTION_FROMDUPLEX/g, duplex[0].trim());
                    }
                    if (duplexTo) {
                        template = template.replace(/MS_OPTION_TODUPLEX/g, duplex[1].trim());
                    }
                }
                if (!duplexFrom) {
                    options.inputFromValue = '';
                    template = template.replace(/MS_OPTION_FROMDUPLEX/g, 'inputFromValue');
                }
                if (!duplexTo) {
                    options.inputToValue = '';
                    template = template.replace(/MS_OPTION_TODUPLEX/g, 'inputToValue');
                }
                return template;
            }
            function setValues(len, from, to) {
                if (len) {
                    if (len == 2) {
                        if (duplexFrom) {
                            duplexFrom[1][duplexFrom[0]] = from && parseDate(from) && from || '';
                        } else {
                            vmodel.inputFromValue = from && parseDate(from) && from || '';
                        }
                        if (duplexTo) {
                            duplexTo[1][duplexTo[0]] = to && parseDate(to) && to || '';
                        } else {
                            vmodel.inputToValue = to && parseDate(to) && to || '';
                        }
                    } else if (len == 1) {
                        if (duplexFrom) {
                            duplexFrom[1][duplexFrom[0]] = from && parseDate(from) && from || '';
                        } else {
                            vmodel.inputFromValue = from && parseDate(from) && from || '';
                        }
                    }
                }
            }
            function applyRules(date) {
                var minDate = _toMinDate && parseDate(_toMinDate), maxDate = _toMaxDate && parseDate(_toMaxDate), inputToValue = duplexTo ? duplexTo[1][duplexTo[0]] : vmodel.inputToValue, rules = vmodel.rules, minDateRule, maxDateRule, inputToDate, df = {};
                if (!date)
                    return;
                for (var i = 0, type = [
                            'defaultDate',
                            'minDate',
                            'maxDate'
                        ]; i < type.length; i++) {
                    if (rangeRules[i]) {
                        df[type[i]] = calcDate(rangeRules[i], date);
                    }
                }
                minDateRule = df['minDate'];
                maxDateRule = df['maxDate'];
                minDate = (minDateRule ? minDateRule.getTime() : -1) > (minDate ? minDate.getTime() : -1) ? minDateRule : minDate;
                maxDate = (maxDateRule ? maxDateRule.getTime() : Number.MAX_VALUE) > (maxDate ? maxDate.getTime() : Number.MAX_VALUE) ? maxDate : maxDateRule;
                if (!inputToValue && df['defaultDate']) {
                    inputToValue = formatDate(df['defaultDate']);
                }
                if (minDate) {
                    var toMinDateFormat = formatDate(minDate);
                    if (!inputToValue) {
                        inputToValue = toMinDateFormat;
                    }
                }
                inputToDate = inputToValue && parseDate(inputToValue);
                if (inputToDate && isDateDisabled(inputToDate, minDate, maxDate)) {
                    inputToValue = toMinDateFormat;
                }
                if (duplexTo) {
                    duplexTo[1][duplexTo[0]] = inputToValue;
                } else {
                    vmodel.inputToValue = inputToValue;
                }
                if (minDate) {
                    rules.toMinDate = cleanDate(minDate);
                }
                if (maxDate) {
                    rules.toMaxDate = cleanDate(maxDate);
                }
            }
            // 根据minDate和maxDate的设置判断给定的日期是否不可选
            function isDateDisabled(date, minDate, maxDate) {
                var time = date.getTime();
                if (minDate && time < minDate.getTime()) {
                    return true;
                } else if (maxDate && time > maxDate.getTime()) {
                    return true;
                }
                return false;
            }
            function calcDate(desc, date) {
                var time, _date, re = /([+-])?(\d+)([MDY])?/g, arr, key;
                desc = (desc || '').toString();
                arr = re.exec(desc);
                key = arr && (arr[1] || '+') + (arr[3] || 'D');
                time = date ? date : new Date();
                _date = new Date(typeof time === 'string' ? parseDate(time) : time);
                if (key && _c[key]) {
                    _c[key](_date, arr[2] * 1);
                }
                return _date;
            }
            return vmodel;
        };
    // 将日期时间转为00:00:00
    function cleanDate(date) {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        return date;
    }
    widget.version = 1;
    widget.defaults = {
        container: [],
        //必选，渲染的容器，每个元素类型为 {Element|JQuery|String}
        fromLabel: '\u9009\u62E9\u8D77\u59CB\u65E5\u671F',
        //@config 设置起始日期日历框的说明文字
        toLabel: '\u9009\u62E9\u7ED3\u675F\u65E5\u671F',
        //@config 设置结束日期日历框的说明文字
        changeMonthAndYear: false,
        widgetElement: '',
        // accordion容器
        disabled: false,
        //@config 设置是否禁用组件
        startDay: 1,
        //@config 设置每一周的第一天是哪天，0代表Sunday，1代表Monday，依次类推, 默认从周一开始
        separator: '-',
        //@config 日期格式的分隔符，可以是"/"或者你希望的符号，但如果是除了"-"和"/"之外的字符则需要和parseDate和formatDate配合使用，以便组件能正常运作
        /**
         * @config 设置双日历框的工作规则
            <pre class="brush:javascript;gutter:false;toolbar:false">
            {
                rules: 'null, 0D, 8D',
                fromMinDate: '2014-05-02',
                fromMaxDate: '2014-06-28',
                toMinDate: '2014-06-01',
                toMaxDate: '2014-07-12'
            }
            </pre> 
         * 可以是绑定组件时定义的配置对象中的一个rules对象，也可以是一个字符串，指向一个上述对象。
         * 其中对象中的rules属性定义结束初始日期异常时默认显示的日期、初始日期和结束日子之间最小相隔天数、最大相隔天数，格式是[+-]\d[DMY]，分别代表几天、几个月或者几年，也可以附加+或者-号，+号表示正数几天，-号表示负数几天
         * fromMinDate代表起始日期可以设置的最小日期
         * fromMaxDate代表起始日期可以设置的最大日期
         * toMinDate代表结束日期可以设置的最小日期
         * toMaxDate代表结束日期可以设置的最大日期
         */
        rules: '',
        /**
         * @config {Function} 将符合日期格式要求的字符串解析为date对象并返回，不符合格式的字符串返回null,用户可以根据自己需要自行配置解析过程
         * @param str {String} 需要解析的日期字符串
         * @returns {Date} 解析后的日期对象 
         */
        parseDate: function (str) {
            if (avalon.type(str) === 'date')
                return str;
            var separator = this.separator;
            var reg = '^(\\d{4})' + separator + '(\\d{1,2})' + separator + '(\\d{1,2})$';
            reg = new RegExp(reg);
            var x = str.match(reg);
            return x ? new Date(x[1], x[2] * 1 - 1, x[3]) : null;
        },
        /**
         * @config {Function} 将日期对象转换为符合要求的日期字符串
         * @param date {Date} 需要格式化的日期对象
         * @returns {String} 格式化后的日期字符串 
         */
        formatDate: function (date) {
            if (avalon.type(date) !== 'date') {
                avalon.log('the type of ' + date + 'must be Date');
                return '';
            }
            var separator = this.separator, year = date.getFullYear(), month = date.getMonth(), day = date.getDate();
            return year + separator + this.formatNum(month + 1, 2) + separator + this.formatNum(day, 2);
        },
        formatNum: function (n, length) {
            n = String(n);
            for (var i = 0, len = length - n.length; i < len; i++)
                n = '0' + n;
            return n;
        },
        getTemplate: function (str, options) {
            return str;
        }
    };
    return avalon;
}
)();
},{"../avalon.getModel":6,"./avalon.datepicker":15}],15:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
holidayDate = innerRequire("./avalon.datepicker.lang"),
sourceHTML = "<div class=\"oni-datepicker\"\n     ms-visible=\"toggle\"\n     ms-class=\"oni-datepicker-multiple:numberOfMonths!==1\">\n    <div class=\"oni-datepicker-wrapper\" ms-css-position=\"_position\">\n        <div class=\"oni-datepicker-content\" >\n            <div class=\"oni-datepicker-label\" ms-if=\"numberOfMonths===1\">{{calendarLabel}}</div>\n            <i  class=\"oni-datepicker-prev oni-icon\" \n                ms-if=\"numberOfMonths!==1\" \n                ms-click=\"_prev(prevMonth, $event)\"\n                ms-class=\"oni-datepicker-prev-disabled:!prevMonth\" \n                style=\"left:15px;\">&#xf047;</i>\n            <i  class=\"oni-datepicker-next oni-icon\" \n                ms-if=\"numberOfMonths!==1\" \n                ms-click=\"_next(nextMonth, $event)\"\n                ms-class=\"oni-datepicker-next-disabled:!nextMonth\" \n                style=\"right:15px;\">&#xf03e;</i>\n            <div class=\"oni-datepicker-content-content\" \n                 ms-repeat-calendar=\"data\" \n                 ms-visible=\"_datepickerToggle\">\n                <div class=\"oni-datepicker-header\" ms-if=\"numberOfMonths===1\">\n                    <i class=\"oni-datepicker-prev oni-icon\" \n                       ms-click=\"_prev(prevMonth, $event)\"\n                       ms-class=\"oni-datepicker-prev-disabled:!prevMonth\">&#xf047;</i>\n                    <i class=\"oni-datepicker-next oni-icon\"    \n                       ms-click=\"_next(nextMonth, $event)\"\n                       ms-class=\"oni-datepicker-next-disabled:!nextMonth\">&#xf03e;</i>\n                    <div class=\"oni-datepicker-title\" ms-if=\"changeMonthAndYear && regional.showMonthAfterYear\">\n                        <select ms-each=\"years\" data-each-rendered=\"_afterYearRendered\">\n                            <option ms-attr-value=\"el\">{{el}}</option>\n                        </select>&nbsp;{{regional.yearText}}&nbsp;\n                        <select ms-each=\"months\" data-each-rendered=\"_afterMonthRendered\">\n                            <option ms-attr-value=\"{{el}}\">{{el}}</option>\n                        </select>&nbsp;{{regional.monthText}}\n                    </div>\n                    <div class=\"oni-datepicker-title\" ms-if=\"changeMonthAndYear && !regional.showMonthAfterYear\">\n                        <select ms-each=\"months\" data-each-rendered=\"_afterMonthRendered\">\n                            <option ms-attr-value=\"{{el}}\">{{el}}</option>\n                        </select>&nbsp;{{regional.monthText}}\n                        <select ms-each=\"years\" data-each-rendered=\"_afterYearRendered\">\n                            <option ms-attr-value=\"el\">{{el}}</option>\n                        </select>&nbsp;{{regional.yearText}}&nbsp;\n                    </div>\n                    <div class=\"oni-datepicker-title\"\n                         ms-click=\"_selectMonths\"\n                         ms-if=\"!changeMonthAndYear\">\n                        <span ms-hover=\"oni-state-hover:mobileMonthAndYear\" ms-html=\"_getTitle(calendar.year, calendar.month)\"></span>\n                    </div> \n                </div>\n                <div class=\"oni-datepicker-header\" ms-if=\"numberOfMonths!==1\">\n                    <div class=\"oni-datepicker-title\">\n                        <span ms-hover=\"oni-state-hover:mobileMonthAndYear\" ms-html=\"_getTitle(calendar.year, calendar.month)\"></span>\n                    </div> \n                </div>\n                <table class=\"oni-datepicker-calendar-week\">\n                    <thead>\n                        <tr>\n                            <th ms-repeat=\"weekNames\"\n                                ms-class=\"{{_setWeekClass(el)}}\">{{el}}\n                            </th>\n                        </tr>\n                    </thead>\n                </table>\n                <table class=\"oni-datepicker-calendar-days\">\n                    <tbody>\n                        <tr ms-repeat-days=\"calendar.rows\">\n                            <td class=\"oni-datepicker-default\"\n                                ms-repeat-item=\"days\"\n                                ms-class=\"{{_setDayClass($index, $outer.$index, $outer.$outer.$index, item)}}\"\n                                ms-hover=\"{{_setHoverClass($index, $outer.$index, $outer.$outer.$index, item)}}\"\n                                ms-click=\"_selectDate($index, $outer.$index, $outer.$outer.$index, $event)\"\n                                ms-html=\"_dateCellRender($outer.$index, $index, $outer.$outer.$index, item)\"\n                                ></td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div class=\"oni-datepicker-timer\" ms-if=\"timer\">\n                    <label>\n                        <span>{{regional.timerText}}</span>\n                        <b>{{hour|timer}}</b>&nbsp;:\n                        <b>{{minute|timer}}</b>\n                    </label>\n                    <p>\n                        <span>{{regional.hourText}}</span>\n                        <input ms-widget=\"slider, $, sliderHourOpts\" data-slider-max=\"23\" data-slider-min=\"0\" data-slider-value=\"hour\" data-slider-width=\"140\">\n                    </p>\n                    <p>\n                        <span>{{regional.minuteText}}</span>\n                        <input ms-widget=\"slider, $, sliderMinuteOpts\" data-slider-max=\"59\" data-slider-min=\"0\" data-slider-width=\"140\" data-slider-value=\"minute\">\n                    </p>\n                </div>\n                <div class=\"oni-datepicker-timer oni-helper-clearfix\" ms-if=\"timer\">\n                    <button type=\"button\" class=\"oni-btn oni-btn-small\" style=\"float: left\" ms-click=\"_getNow\">{{regional.nowText}}</button>\n                    <button type=\"button\" class=\"oni-btn oni-btn-primary oni-btn-small\" style=\"float:right\" ms-click=\"_selectTime\">{{regional.confirmText}}</button>\n                </div>\n                <div class=\"oni-datepicker-watermark\" ms-if=\"watermark\">\n                    {{calendar.month+1}}\n                </div>\n            </div>\n            <div class=\"oni-datepicker-content-content oni-datepicker-month-year\" ms-if=\"mobileMonthAndYear\" ms-visible=\"_monthToggle\">\n                <table>\n                    <thead>\n                        <tr class=\"oni-datepicker-title\">\n                            <th class=\"prev\" style=\"visibility: visible;text-align:left\">\n                                <i class=\"oni-datepicker-prev oni-icon\" \n                                   ms-click=\"_prevYear(mobileYear)\"\n                                   ms-class=\"oni-datepicker-prev-disabled:mobileYear===years[0]\">&#xf047;</i>\n                            </th>\n                            <th style=\"text-align:center\" \n                                ms-click=\"_selectYears\" \n                                ms-hover=\"oni-state-hover:mobileMonthAndYear\">{{mobileYear}}</th>\n                            <th class=\"next\" style=\"visibility: visible;text-align:right\">\n                                <i class=\"oni-datepicker-next oni-icon\" \n                                   ms-click=\"_nextYear(mobileYear)\"\n                                   ms-class=\"oni-datepicker-prev-disabled:mobileYear===years[years.length-1]\">&#xf03e;</i>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colspan=\"3\" style=\"padding:0px\">\n                                <span ms-repeat-m=\"months\" \n                                      ms-class=\"oni-datepicker-selected: (m-1)===elementMonth && mobileYear===elementYear\"\n                                      ms-click=\"_selectDates(m-1)\"\n                                      ms-hover=\"oni-datepicker-day-hover\">{{regional.monthNamesShort[m - 1]}}</span>\n                            </td>\n                        </tr>\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <th colspan=\"3\" class=\"today\" style=\"display: none;\">Today</th>\n                        </tr>\n                        <tr>\n                            <th colspan=\"3\" class=\"clear\" style=\"display: none;\">Clear</th>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"oni-datepicker-content-content oni-datepicker-month-year\" ms-if=\"mobileMonthAndYear\" ms-visible=\"_yearToggle\">\n                <table>\n                    <thead>\n                        <tr class=\"oni-datepicker-title\">\n                            <th class=\"prev\" style=\"visibility: visible;text-align:left\">\n                                <i class=\"oni-datepicker-prev oni-icon\" \n                                   ms-click=\"_prevYears\" \n                                   ms-class=\"oni-datepicker-prev-disabled:_years[0]<=years[0]\">&#xf047;</i>\n                            </th>\n                            <th style=\"text-align:center\" \n                                ms-hover=\"oni-state-hover:mobileMonthAndYear\">{{_years[0]}}-{{_years[9]}}\n                            </th>\n                            <th class=\"next\" style=\"visibility: visible;text-align:right\">\n                                <i class=\"oni-datepicker-next oni-icon\" \n                                    ms-click=\"_nextYears\"\n                                    ms-class=\"oni-datepicker-next-disabled:_years[_years.length-1]>=years[years.length-1]\">&#xf03e;</i>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colspan=\"3\" style=\"padding:0px\">\n                                <span class=\"oni-datepicker-prev-year\"\n                                      ms-class=\"{{_setMobileYearClass(_years[0]-1, elementYear, month, elementMonth)}}\"\n                                      ms-click=\"_selectMonths($event, _years[0]-1)\"\n                                      ms-hover=\"oni-datepicker-day-hover\"\n                                >{{_years[0]-1}}</span>\n                                <span ms-repeat-y=\"_years\" \n                                      ms-class=\"_setMobileYearClass(y, elementYear, month, elementMonth)\"\n                                      ms-click=\"_selectMonths($event, y)\"\n                                      ms-hover=\"oni-datepicker-day-hover\"\n                                >{{y}}</span>\n                                <span class=\"oni-datepicker-next-year\"\n                                      ms-class=\"{{_setMobileYearClass(_years[9]+1, elementYear, month, elementMonth)}}\"\n                                      ms-click=\"_selectMonths($event, _years[9]+1)\"\n                                      ms-hover=\"oni-datepicker-day-hover\"\n                                >{{_years[9]+1}}</span>\n                            </td>\n                        </tr>\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <th colspan=\"3\" class=\"today\" style=\"display: none;\">Today</th></tr>\n\n                            <tr><th colspan=\"3\" class=\"clear\" style=\"display: none;\">Clear</th>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n";
innerRequire("../dropdown/avalon.dropdown.js");
innerRequire("../slider/avalon.slider.js");

module.exports = (
function () {
    var calendarTemplate = sourceHTML, HOLIDAYS, ONE_DAY = 24 * 60 * 60 * 1000, firstYear = 1901, lastYear = 2050;
    var widget = avalon.ui.datepicker = function (element, data, vmodels) {
            var options = data.datepickerOptions, msDuplexName = element.msData['ms-duplex'], duplexVM = msDuplexName && avalon.getModel(msDuplexName, vmodels), parseDate = options.parseDate, formatDate = options.formatDate, minDate = options.minDate, maxDate = options.maxDate, monthYearChangedBoth = false, datepickerData = [], _initValue = '', years = [], minDateVM, maxDateVM, calendar, month, day, year;
            calendarTemplate = options.template = options.getTemplate(calendarTemplate, options);
            avalon.scan(element, vmodels);
            options.disabled = element.disabled || options.disabled;
            formatDate = formatDate.bind(options);
            //兼容IE6、7使得formatDate方法中的this指向options
            parseDate = parseDate.bind(options);
            minDate = minDate !== null && validateDate(minDate);
            maxDate = maxDate !== null && validateDate(maxDate);
            if (options.minDate && !minDate) {
                // minDate是某个VM的属性名
                minDateVM = avalon.getModel(options.minDate, vmodels);
                minDateVM && (minDate = validateDate(minDateVM[1][minDateVM[0]]));
            }
            minDate = options.minDate = minDate && cleanDate(minDate);
            if (options.maxDate && !maxDate) {
                // maxDate 是某个VM的属性名，需要进一步解析
                maxDateVM = avalon.getModel(options.maxDate, vmodels);
                maxDateVM && (maxDate = validateDate(maxDateVM[1][maxDateVM[0]]));
            }
            maxDate = options.maxDate = maxDate && cleanDate(maxDate);
            minDate ? firstYear = minDate.getFullYear() : 0;
            maxDate ? lastYear = maxDate.getFullYear() : 0;
            if (avalon.type(options.years) === 'array') {
                years = options.years;
            } else {
                for (var i = firstYear; i <= lastYear; i++) {
                    years.push(i);
                }
            }
            if (options.mobileMonthAndYear) {
                options.mobileYear = 0;
            }
            options.changeMonthAndYear && (options.mobileMonthAndYear = false);
            initValue();
            var vmodel = avalon.define(data.datepickerId, function (vm) {
                    //初始化增加语言包设置
                    avalon.mix(vm, options, { regional: widget.defaultRegional });
                    vm.$skipArray = [
                        'container',
                        'showDatepickerAlways',
                        'timer',
                        'sliderMinuteOpts',
                        'sliderHourOpts',
                        'template',
                        'widgetElement',
                        'rootElement',
                        'dayNames',
                        'allowBlank',
                        'months',
                        'years',
                        'numberOfMonths',
                        'showOtherMonths',
                        'watermark',
                        'weekNames',
                        'stepMonths',
                        'changeMonthAndYear',
                        'startDay',
                        'mobileMonthAndYear',
                        'formatErrorTip'    //格式错误提示文案
                    ];
                    vm.dateError = vm.dateError || '';
                    vm.weekNames = [];
                    vm.tip = vm.tip || '';
                    vm.widgetElement = element;
                    vm.rootElement = {};
                    vm.data = [];
                    vm.prevMonth = -1;
                    //控制prev class是否禁用
                    vm.nextMonth = -1;
                    //控制next class是否禁用
                    vm.month = month;
                    vm._month = month + 1;
                    vm.year = year;
                    vm.day = day;
                    vm.years = years;
                    vm.months = [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ];
                    vm._position = 'absolute';
                    vm._datepickerToggle = true;
                    vm._monthToggle = false;
                    vm._yearToggle = false;
                    vm._years = [
                        2010,
                        2011,
                        2012,
                        2013,
                        2014,
                        2015,
                        2016,
                        2017,
                        2018,
                        2019
                    ];
                    vm.elementYear = year;
                    vm.elementMonth = month;
                    vm._setWeekClass = function (dayName) {
                        var dayNames = vmodel.regional.day;
                        if (dayNames.indexOf(dayName) % 7 == 0 || dayNames.indexOf(dayName) % 7 == 6) {
                            return 'oni-datepicker-week-end';
                        } else {
                            return '';
                        }
                    };
                    vm._setDayClass = function (index, outerIndex, rowIndex, day) {
                        var className = '', dayItem = {};
                        if (day === '') {
                            return '';
                        }
                        dayItem = datepickerData[rowIndex]['rows'][outerIndex][index];
                        if (dayItem.weekend) {
                            className += ' oni-datepicker-week-end';
                        }
                        if (!dayItem.month) {
                            className += ' oni-datepicker-day-none';
                        }
                        if (dayItem.selected) {
                            className += ' oni-datepicker-selected';
                        }
                        if (dayItem.dateDisabled) {
                            className += ' oni-state-disabled';
                        }
                        return className.trim();
                    };
                    vm._setHoverClass = function (index, outerIndex, rowIndex, day) {
                        var className = '', dayItem = {};
                        if (day === '') {
                            return '';
                        }
                        dayItem = datepickerData[rowIndex]['rows'][outerIndex][index];
                        className = 'oni-datepicker-day-hover';
                        return className;
                    };
                    vm._setMobileYearClass = function (yearItem, elementYear, monthItem, elementMonth) {
                        var className = '';
                        if (yearItem === elementYear && monthItem === elementMonth) {
                            className += ' oni-datepicker-selected';
                        }
                        if (vmodel.mobileYearDisabled(yearItem)) {
                            className += ' oni-state-disabled';
                        }
                        return className;
                    };
                    vm.sliderMinuteOpts = {
                        onInit: function (sliderMinute, options, vmodels) {
                            sliderMinute.$watch('value', function (val) {
                                vmodel.minute = val;
                            });
                            vmodel.$watch('minute', function (val) {
                                sliderMinute.value = val;
                            });
                        }
                    };
                    vm.sliderHourOpts = {
                        onInit: function (sliderHour, options, vmodels) {
                            sliderHour.$watch('value', function (val) {
                                vmodel.hour = val;
                            });
                            vmodel.$watch('hour', function (val) {
                                sliderHour.value = val;
                            });
                        }
                    };
                    vm.$yearVmId = vm.$id + 'year';
                    vm.$monthVmId = vm.$id + 'month';
                    vm.$yearOpts = {
                        width: 60,
                        listWidth: 60,
                        height: 160,
                        position: false,
                        listClass: 'oni-datepicker-dropdown',
                        onSelect: function (e) {
                            e.stopPropagation();
                        }
                    };
                    vm.$monthOpts = {
                        width: 45,
                        height: 160,
                        listWidth: 45,
                        position: false,
                        listClass: 'oni-datepicker-dropdown',
                        onSelect: function (e) {
                            e.stopPropagation();
                        }
                    };
                    vm._selectDates = function (month) {
                        if (vmodel.mobileMonthAndYear) {
                            vmodel._monthToggle = false;
                            vmodel._yearToggle = false;
                            vmodel._datepickerToggle = true;
                            monthYearChangedBoth = true;
                            vmodel.year = vmodel.mobileYear;
                            vmodel.month = month;
                        }
                    };
                    vm._selectMonths = function (event, year) {
                        if (vmodel.mobileMonthAndYear) {
                            if (year) {
                                if (!vmodel.mobileYearDisabled(year)) {
                                    vmodel.mobileYear = year;
                                } else {
                                    return;
                                }
                            } else {
                                vmodel.mobileYear = vmodel.year;
                            }
                            vmodel._monthToggle = true;
                            vmodel._yearToggle = false;
                            vmodel._datepickerToggle = false;
                        }
                    };
                    vm._selectYears = function () {
                        if (vmodel.mobileMonthAndYear) {
                            vmodel._monthToggle = false;
                            vmodel._yearToggle = true;
                            vmodel._datepickerToggle = false;
                        }
                    };
                    vm.getInitTime = function (timeDate) {
                        var date = formatDate(timeDate), time = timeDate.toTimeString(), now = time.substr(0, time.lastIndexOf(':'));
                        vmodel.hour = timeDate.getHours();
                        vmodel.minute = timeDate.getMinutes();
                        return date + ' ' + now;
                    };
                    vm._dateCellRender = function (outerIndex, index, rowIndex, date) {
                        if (vmodel.dateCellRender) {
                            var dayItem = datepickerData[rowIndex]['rows'][outerIndex][index];
                            if (date === '') {
                                return date;
                            }
                            return vmodel.dateCellRender(date, vmodel, dayItem);
                        }
                        return date;
                    };
                    vm._selectTime = function (event) {
                        var timeFilter = avalon.filters.timer, hour = timeFilter(vmodel.hour), minute = timeFilter(vmodel.minute), time = hour + ':' + minute, _date = formatDate(parseDate(element.value));
                        event.stopPropagation();
                        element.value = _date + ' ' + time;
                        if (!vmodel.showDatepickerAlways) {
                            vmodel.toggle = false;
                        }
                        if (options.onSelectTime && avalon.type(options.onSelectTime) === 'function') {
                            options.onSelectTime.call(vmodel, vmodel);
                        }
                    };
                    vm._selectYearMonth = function (event) {
                        event.stopPropagation();
                    };
                    // 点击prev按钮切换到当前月的上个月，如当前月存在minDate则prev按钮点击无效
                    vm._prev = function (prevFlag, event) {
                        if (!prevFlag) {
                            return false;
                        }
                        toggleMonth('prev');
                        event.stopPropagation();
                    };
                    // 点击next按钮切换到当前月的下一个月，如果当前月存在maxDate则next按钮点击无效
                    vm._next = function (nextFlag, event) {
                        if (!nextFlag) {
                            return false;
                        }
                        toggleMonth('next');
                        event.stopPropagation();
                    };
                    vm._prevYear = function (year) {
                        if (year === vmodel.years[0]) {
                            return;
                        }
                        vmodel.mobileYear = vmodel.mobileYear - 1;
                    };
                    vm._nextYear = function (year) {
                        if (year === vmodel.years[vmodel.years.length - 1]) {
                            return;
                        }
                        vmodel.mobileYear = vmodel.mobileYear + 1;
                    };
                    vm._prevYears = function () {
                        if (vmodel._years[0] <= vmodel.years[0]) {
                            return;
                        }
                        updateMobileYears(vmodel._years[0] - 1);
                    };
                    vm._nextYears = function () {
                        var _years = vmodel._years, years = vmodel.years;
                        if (_years[_years.length - 1] >= years[years.length - 1]) {
                            return;
                        }
                        updateMobileYears(_years[9] + 1);
                    };
                    vm.mobileYearDisabled = function (year) {
                        var years = vmodel.years;
                        if (year < years[0] || year > years[years.length - 1]) {
                            return true;
                        } else {
                            return false;
                        }
                    };
                    vm.getRawValue = function () {
                        return element.value;
                    };
                    vm.getDate = function () {
                        var value = vmodel.getRawValue();
                        return parseDate(value);
                    };
                    // 年份选择器渲染ok之后为其绑定dropdown组件并扫描渲染出dropdown
                    vm._afterYearRendered = function () {
                        this.setAttribute('ms-widget', [
                            'dropdown',
                            vm.$yearVmId,
                            '$yearOpts'
                        ].join(','));
                        this.setAttribute('ms-duplex', 'year');
                        avalon.scan(this, vmodel);
                    };
                    // 月份选择器渲染ok之为其绑定dropdown组件并扫描渲染出dropdown
                    vm._afterMonthRendered = function () {
                        this.setAttribute('ms-widget', [
                            'dropdown',
                            vm.$monthVmId,
                            '$monthOpts'
                        ].join(','));
                        this.setAttribute('ms-duplex', '_month');
                        avalon.scan(this, vmodel);
                    };
                    // 选择日期
                    vm._selectDate = function (index, outerIndex, rowIndex, event) {
                        var timerFilter = avalon.filters.timer, _oldMonth = vmodel.month, _oldYear = vmodel.year, dayItem = datepickerData[rowIndex]['rows'][outerIndex][index], year = dayItem.year, month = dayItem.month, day = +dayItem.day, dateDisabled = dayItem.dateDisabled;
                        event.stopPropagation();
                        event.preventDefault();
                        if (month !== false && !dateDisabled && !vmodel.showDatepickerAlways) {
                            var _date = new Date(year, month, day), date = formatDate(_date), calendarWrapper = options.type === 'range' ? element['data-calenderwrapper'] : null;
                            vmodel.tip = getDateTip(cleanDate(_date)).text;
                            vmodel.dateError = '#cccccc';
                            if (!calendarWrapper && !vmodel.timer) {
                                element.value = date;
                                vmodel.toggle = false;
                            } else {
                                // range datepicker时需要切换选中日期项的类名
                                if (vmodel.timer) {
                                    date = date + ' ' + timerFilter(vmodel.hour) + ':' + timerFilter(vmodel.minute);
                                }
                                element.value = date;
                            }
                            if (month === _oldMonth && year === _oldYear && vmodel.day == day) {
                                vmodel.$fire('day', day);
                            } else {
                                vmodel.day = day;
                            }
                            if (month !== _oldMonth && year !== _oldYear) {
                                monthYearChangedBoth = true;
                                vmodel.year = year;
                                vmodel.month = month;
                            } else if (month !== _oldMonth) {
                                vmodel.month = month;
                            } else if (year !== _oldYear) {
                                vmodel.year = year;
                            }
                        }
                        if (!vmodel.showDatepickerAlways && !duplexVM) {
                            if (typeof vmodel.onSelect === 'string') {
                                avalon.log('onSelect \u56DE\u8C03\u5FC5\u987B\u662F\u4E2Afunction\uFF01');
                                return;
                            }
                            vmodel.onSelect.call(null, date, vmodel, avalon(element).data());
                        }
                    };
                    //设置语言包
                    vm.setRegional = function (regional) {
                        vmodel.regional = regional;
                    };
                    vm.$init = function (continueScan) {
                        var elementPar = element.parentNode;
                        calendar = avalon.parseHTML(calendarTemplate).firstChild;
                        elementPar.insertBefore(calendar, element);
                        elementPar.insertBefore(element, calendar);
                        avalon(element).attr('ms-css-width', 'width');
                        vmodel.weekNames = calendarHeader();
                        if (element.tagName === 'INPUT' && vmodel.type !== 'range') {
                            var div = document.createElement('div');
                            div.className = 'oni-datepicker-input-wrapper';
                            div.setAttribute('ms-class', 'oni-datepicker-active:toggle');
                            div.setAttribute('ms-css-border-color', 'dateError');
                            div.setAttribute('ms-hover', 'oni-state-hover');
                            elementPar.insertBefore(div, element);
                            div.appendChild(element);
                            if (vmodel.showTip) {
                                var tip = avalon.parseHTML('<div class=\'oni-datepicker-tip\'>{{tip}}<i class=\'oni-icon oni-icon-calendar-o\'>&#xf088;</i></div>');
                                div.appendChild(tip);
                            } else {
                                element.style.paddingRight = '0px';
                            }
                            div.appendChild(calendar);
                        }
                        if (vmodel.timer) {
                            vmodel.width = 100;
                            var time = validateTime(_initValue);
                            if (_initValue && time) {
                                _initValue = vmodel.getInitTime(time);
                            }
                        }
                        element.value = _initValue;
                        element.disabled = vmodel.disabled;
                        if (vmodel.showDatepickerAlways) {
                            element.style.display = 'none';
                            vmodel.toggle = true;
                            vmodel._position = 'relative';
                            div.style.borderWidth = 0;
                        } else {
                            bindEvents(calendar, div);
                        }
                        if (options.type === 'range') {
                            div = element['data-calenderwrapper'];
                            vmodel._position = 'static';
                        } else {
                            avalon.scan(div, [vmodel]);
                        }
                        vm.rootElement = div;
                        avalon.scan(calendar, [vmodel].concat(vmodels));
                        setTimeout(function () {
                            calendarDays(vmodel.month, vmodel.year);
                        }, 10);
                        if (typeof options.onInit === 'function') {
                            //vmodels是不包括vmodel的
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm._getTitle = function (year, month) {
                        return vmodel.regional.titleFormat.call(vmodel.regional, year, month);
                    };
                    vm.$remove = function () {
                        var elementPar = element.parentNode, eleParPar = elementPar.parentNode, calendarPar = calendar.parentNode;
                        calendar.innerHTML = calendar.textContent = '';
                        calendarPar.removeChild(calendar);
                        eleParPar.removeChild(elementPar);
                    };
                });
            getDateTip = getDateTip.bind(vmodel);
            vmodel.$watch('toggle', function (val) {
                var dateFormat = element.value, date = parseDate(dateFormat), elementYear = date && date.getFullYear(), elementMonth = date && date.getMonth();
                if (val) {
                    vmodel.elementMonth = elementMonth || -1;
                    vmodel.elementYear = elementYear || -1;
                } else {
                    if (vmodel.year != elementYear && vmodel.month != elementMonth) {
                        if (!date) {
                            monthYearChangedBoth = true;
                            var today = new Date(), yearToday = today.getFullYear(), monthToday = today.getMonth();
                            if (vmodel.year == yearToday && vmodel.month == monthToday) {
                                setCalendarDays(vmodel.month, vmodel.year, vmodel.day);
                            } else if (vmodel.year == yearToday) {
                                vmodel.month = monthToday;
                            } else if (vmodel.month == monthToday) {
                                vmodel.year = yearToday;
                            } else {
                                monthYearChangedBoth = true;
                                vmodel.year = yearToday;
                                vmodel.month = monthToday;
                            }
                        } else {
                            monthYearChangedBoth = true;
                            vmodel.year = elementYear;
                            vmodel.month = elementMonth;
                        }
                    } else if (vmodel.year != elementYear) {
                        vmodel.year = elementYear;
                    } else if (vmodel.month != elementMonth) {
                        vmodel.month = elementMonth;
                    }
                    // 防止Month, Year下拉框的浮层不被关闭。
                    avalon.vmodels[vmodel.$yearVmId] && (avalon.vmodels[vmodel.$yearVmId].toggle = false);
                    avalon.vmodels[vmodel.$monthVmId] && (avalon.vmodels[vmodel.$monthVmId].toggle = false);
                    vmodel.onClose(new Date(vmodel.year, vmodel.month, vmodel.day), vmodel);
                }
            });
            vmodel.$watch('year', function (year) {
                if (vmodel.mobileMonthAndYear) {
                    updateMobileYears(year);
                }
                if (!monthYearChangedBoth) {
                    setCalendarDays(vmodel.month, year, vmodel.day);
                } else {
                    monthYearChangedBoth = false;
                }
                vmodel.onChangeMonthYear(year, vmodel.month + 1, vmodel);
            });
            if (vmodel.changeMonthAndYear) {
                vmodel.$watch('_month', function (month) {
                    vmodel.month = month - 1;
                });
            }
            vmodel.$watch('month', function (month) {
                vmodel._month = month + 1;
                setCalendarDays(month, vmodel.year, vmodel.day);
                vmodel.onChangeMonthYear(vmodel.year, month, vmodel);
            });
            vmodel.$watch('day', function (newDay, oldDay) {
                var data = datepickerData, month = vmodel.month, year = vmodel.year, exitLoop = false, dateYear, dateMonth, dateDay;
                for (var i = 0, len = data.length; i < len; i++) {
                    var dataItem = data[i];
                    if (dataItem.year == year && dataItem.month == month) {
                        var dataRows = dataItem.rows;
                        for (var j = 0, jLen = dataRows.length; j < jLen; j++) {
                            var dataRow = dataRows[j];
                            for (var k = 0, kLen = dataRow.length; k < kLen; k++) {
                                var dayItem = dataRow[k], date = dayItem.day;
                                if (date == newDay && dayItem.month == month && dayItem.year == year) {
                                    dayItem.selected = true;
                                    vmodel.data[i]['rows'][j].set(k, '').set(k, dayItem._day);
                                } else if (dayItem.selected) {
                                    dayItem.selected = false;
                                    vmodel.data[i]['rows'][j].set(k, '').set(k, dayItem._day);
                                }
                            }
                        }
                    } else {
                        for (var j = 0, jLen = dataRows.length; j < jLen; j++) {
                            var dataRow = dataRows[j];
                            for (var k = 0, kLen = dataRow.length; k < kLen; k++) {
                                var dateItem = dataRow[k];
                                if (dayItem.selected) {
                                    dayItem.selected = false;
                                    vmodel.data[i]['rows'][j].set(k, '').set(k, dayItem._day);
                                    exitLoop = true;
                                    break;
                                }
                            }
                            if (exitLoop) {
                                break;
                            }
                        }
                    }
                    if (exitLoop) {
                        break;
                    }
                }
            });
            // 这里的处理使得设置外部disabled或者组件VM的disabled同步
            vmodel.$watch('disabled', function (val) {
                element.disabled = val;
            });
            vmodel.$watch('minDate', function (val) {
                var minDate = validateDate(val);
                if (minDate) {
                    vmodel.minDate = cleanDate(minDate);
                } else {
                    vmodel.minDate = '';
                }
                setCalendarDays(vmodel.month, vmodel.year, vmodel.day);
            });
            vmodel.$watch('maxDate', function (val) {
                var maxDate = validateDate(val);
                if (maxDate) {
                    vmodel.maxDate = cleanDate(maxDate);
                } else {
                    vmodel.maxDate = '';
                }
                setCalendarDays(vmodel.month, vmodel.year, vmodel.day);
            });
            duplexVM && duplexVM[1].$watch(duplexVM[0], function (val) {
                var currentYear, currentMonth, date;
                if (date = parseDate(val)) {
                    currentYear = date.getFullYear();
                    currentMonth = date.getMonth();
                    vmodel.day = date.getDate();
                    if (currentMonth !== vmodel.month && currentYear !== vmodel.year) {
                        monthYearChangedBoth = true;
                        vmodel.year = currentYear;
                        vmodel.month = currentMonth;
                    } else if (currentYear !== vmodel.year) {
                        vmodel.year = currentYear;
                    } else if (currentMonth !== vmodel.month) {
                        vmodel.month = currentMonth;
                    }
                    vmodel.dateError = '#cccccc';
                    vmodel.tip = getDateTip(cleanDate(date)).text;
                    if (typeof vmodel.onSelect === 'string') {
                        avalon.log('onSelect \u56DE\u8C03\u5FC5\u987B\u662F\u4E2Afunction\uFF01');
                        return;
                    }
                    vmodel.onSelect.call(null, date, vmodel, avalon(element).data());
                } else {
                    if (!vmodel.allowBlank) {
                        vmodel.tip = vmodel.formatErrorTip;
                        vmodel.dateError = '#ff8888';
                    } else {
                        vmodel.tip = '';
                    }
                }
            });
            minDateVM && minDateVM[1].$watch(minDateVM[0], function (val) {
                vmodel.minDate = val;
            });
            maxDateVM && maxDateVM[1].$watch(maxDateVM[0], function (val) {
                vmodel.maxDate = val;
            });
            function initValue() {
                var value = element.value, _date = parseDate(value), today = cleanDate(new Date()), _initDate = _date, dateDisabled = false;
                if (value && !_date) {
                    options.tip = options.formatErrorTip;
                    options.dateError = '#ff8888';
                    _initDate = today;
                }
                if (options.allowBlank) {
                    if (!value) {
                        options.tip = '';
                        _initDate = today;
                    } else if (_date) {
                        dateDisabled = isDateDisabled(_date, options);
                    }
                } else {
                    if (!value) {
                        value = formatDate(today);
                        options.tip = getDateTip(today).text;
                        _initDate = today;
                        dateDisabled = isDateDisabled(today, options);
                    } else if (_date) {
                        dateDisabled = isDateDisabled(_date, options);
                    }
                }
                if (dateDisabled) {
                    _initDate = options.minDate || options.maxDate;
                    value = formatDate(_initDate);
                }
                year = _initDate.getFullYear();
                month = _initDate.getMonth();
                day = _initDate.getDate();
                _initValue = value;
            }
            function updateMobileYears(year) {
                //todo--- 看能不能把数组的赋值，变成set的方式
                var years = vmodel._years, _year3 = (year + '').substr(0, 3), newYears = [];
                if (!~years.indexOf(year)) {
                    for (var i = 0; i <= 9; i++) {
                        newYears.push(Number(_year3 + i));
                    }
                    vmodel._years = newYears;
                }
            }
            // 根据minDate和maxDate的设置判断给定的日期是否不可选
            function isDateDisabled(date, vmodel) {
                var time = date.getTime(), minDate = vmodel.minDate, maxDate = vmodel.maxDate;
                if (minDate && time < minDate.getTime()) {
                    return true;
                } else if (maxDate && time > maxDate.getTime()) {
                    return true;
                }
                return false;
            }
            //todo-- 看看事件绑定这块可否优化
            // 初始化时绑定各种回调
            function bindEvents(calendar, tipContainer) {
                // focus Input元素时显示日历组件
                avalon.bind(element, 'focus', function (e) {
                    vmodel.toggle = true;
                });
                // 切换日期年月或者点击input输入域时不隐藏组件，选择日期或者点击文档的其他地方则隐藏日历组件
                avalon.bind(document, 'click', function (e) {
                    var target = e.target;
                    if (options.type === 'range') {
                        return;
                    }
                    if (!calendar.contains(target) && !tipContainer.contains(target) && vmodel.toggle && !vmodel.timer) {
                        vmodel.toggle = false;
                        return;
                    } else if (!vmodel.toggle && !vmodel.disabled && tipContainer.contains(target)) {
                        vmodel.toggle = true;
                        return;
                    }
                });
                // 处理用户的输入
                avalon.bind(element, 'keydown', function (e) {
                    var keyCode = e.keyCode, operate, eChar;
                    eChar = e.key;
                    if (eChar) {
                        switch (eChar) {
                        case '-':
                            operate = '-';
                            break;
                        case '/':
                            operate = '/';
                            break;
                        }
                    } else {
                        switch (keyCode) {
                        case 189:
                            operate = '-';
                            break;
                        case 191:
                            operate = '/';
                            break;
                        }
                    }
                    if (!vmodel.toggle) {
                        vmodel.toggle = true;
                    }
                    // 37:向左箭头； 39:向右箭头；8:backspace；46:Delete
                    if ((keyCode < 48 || keyCode > 57 && keyCode < 96 || keyCode > 105) && keyCode !== 13 && keyCode !== 8 && options.separator !== operate && keyCode !== 27 && keyCode !== 9 && keyCode !== 37 && keyCode !== 39 && keyCode !== 46) {
                        e.preventDefault();
                        return false;
                    }
                });
                avalon.bind(element, 'keyup', function (e) {
                    var value = element.value, year = vmodel.year, month = vmodel.month, keyCode = e.keyCode, dateMonth, dateYear, date;
                    if (keyCode === 37 || keyCode === 39) {
                        return false;
                    }
                    // 当按下Enter、Tab、Esc时关闭日历
                    if (keyCode === 13 || keyCode == 27 || keyCode == 9) {
                        vmodel.toggle = false;
                        return false;
                    }
                    if (date = parseDate(value)) {
                        dateMonth = date.getMonth();
                        dateYear = date.getFullYear();
                        vmodel.dateError = '#cccccc';
                        vmodel.tip = getDateTip(cleanDate(date)).text;
                        vmodel.day = date.getDate();
                        if (month != dateMonth && year != dateYear) {
                            monthYearChangedBoth = true;
                            vmodel.year = dateYear;
                            vmodel.month = dateMonth;
                        } else if (month != dateMonth) {
                            vmodel.month = dateMonth;
                        } else {
                            vmodel.year = dateYear;
                        }
                    } else {
                        if (vmodel.allowBlank && value == '') {
                            vmodel.tip = '';
                            vmodel.dateError = '#cccccc';
                            return;
                        }
                        vmodel.tip = vmodel.formatErrorTip;
                        vmodel.dateError = '#ff8888';
                    }
                });
            }
            // 通过prev、next按钮切换月份
            function toggleMonth(operate) {
                var month = vmodel.month, year = vmodel.year, stepMonths = vmodel.stepMonths, numberOfMonths = vmodel.numberOfMonths, firstDayOfNextMonth, firstDayMonth = 0, firstDayYear = 0;
                if (operate === 'next') {
                    month = month + stepMonths + numberOfMonths - 1;
                } else {
                    month = month - stepMonths - numberOfMonths + 1;
                }
                firstDayOfNextMonth = new Date(year, month, 1);
                firstDayMonth = firstDayOfNextMonth.getMonth();
                firstDayYear = firstDayOfNextMonth.getFullYear();
                if (firstDayYear != vmodel.year) {
                    monthYearChangedBoth = true;
                    vmodel.year = firstDayYear;
                    vmodel.month = firstDayMonth;
                } else {
                    vmodel.month = firstDayMonth;
                }
            }
            // 日历头部的显示名
            function calendarHeader() {
                var weekNames = [], startDay = options.startDay;
                for (var j = 0, w = vmodel.regional.dayNames; j < 7; j++) {
                    var n = (j + startDay) % 7;
                    weekNames.push(w[n]);
                }
                return weekNames;
            }
            function calendarDate(cellDate, vmodel, valueDate, dateMonth, dateYear, days, _days, day) {
                var selected = false, tip = getDateTip(cellDate), _day = tip && tip.cellText || day, weekDay = cellDate.getDay(), weekend = weekDay % 7 == 0 || weekDay % 7 == 6, dateDisabled = isDateDisabled(cellDate, vmodel);
                if (valueDate && valueDate.getDate() === +day && dateMonth === valueDate.getMonth() && dateYear === valueDate.getFullYear()) {
                    selected = true;
                }
                days.push({
                    day: day + '',
                    _day: _day + '',
                    month: dateMonth,
                    year: dateYear,
                    weekend: weekend,
                    selected: selected,
                    dateDisabled: dateDisabled
                });
                _days.push(_day + '');
            }
            // 根据month、year得到要显示的日期数据
            function calendarDays(month, year) {
                var startDay = vmodel.startDay, firstDayOfMonth = new Date(year, month, 1), cellDate = new Date(year, month, 1 - (firstDayOfMonth.getDay() - startDay + 7) % 7), showOtherMonths = vmodel.showOtherMonths, valueDate = parseDate(element.value), minDate = vmodel.minDate, maxDate = vmodel.maxDate, prev = minDate ? (year - minDate.getFullYear()) * 12 + month - minDate.getMonth() > 0 : true, next = maxDate ? (maxDate.getFullYear() - year) * 12 + maxDate.getMonth() - month > 0 : true, rows = [], _rows = [], data = [], _data = [], days = [], _days = [], dateYear, dateMonth, day;
                vmodel.prevMonth = prev;
                vmodel.nextMonth = next;
                for (var i = 0, len = vmodel.numberOfMonths; i < len; i++) {
                    for (var m = 0; m < 6; m++) {
                        days = [];
                        _days = [];
                        for (var n = 0; n < 7; n++) {
                            dateMonth = cellDate.getMonth();
                            dateYear = cellDate.getFullYear();
                            day = cellDate.getDate();
                            if (dateYear === year && dateMonth === month) {
                                calendarDate(cellDate, vmodel, valueDate, dateMonth, dateYear, days, _days, day);
                            } else {
                                if (showOtherMonths && m === 0 && (dateYear < year || dateMonth < month)) {
                                    calendarDate(cellDate, vmodel, valueDate, dateMonth, dateYear, days, _days, day);
                                } else {
                                    _days.push('');
                                    days.push({
                                        day: '',
                                        month: false,
                                        weekend: false,
                                        selected: false,
                                        dateDisabled: true
                                    });
                                }
                            }
                            cellDate = new Date(cellDate.setDate(day + 1));
                        }
                        rows.push(days);
                        _rows.push(_days);
                    }
                    data.push({
                        year: year,
                        month: month,
                        rows: rows
                    });
                    _data.push({
                        year: year,
                        month: month,
                        rows: _rows
                    });
                    month += 1;
                    firstDayOfMonth = new Date(year, month, 1);
                    year = firstDayOfMonth.getFullYear();
                    month = firstDayOfMonth.getMonth();
                    cellDate = new Date(year, month, 1 - (firstDayOfMonth.getDay() - startDay + 7) % 7);
                    rows = [];
                    _rows = [];
                }
                datepickerData = data;
                vmodel.data = _data;
            }
            function setCalendarDate(cellDate, vmodel, valueDate, dateMonth, dateYear, dateDay, day, i, m, n) {
                var selected = false, month = valueDate && valueDate.getMonth(), year = valueDate && valueDate.getFullYear(), tip = getDateTip(cellDate), _day = tip && tip.cellText || dateDay, weekDay = cellDate.getDay(), weekend = weekDay % 7 == 0 || weekDay % 7 == 6, dateDisabled = isDateDisabled(cellDate, vmodel), dayItem = datepickerData[i]['rows'][m][n], rowItem = vmodel.data[i]['rows'][m];
                _day = _day + '';
                if (dateDay === +day && dateMonth === month && dateYear === year) {
                    selected = true;
                }
                if (dayItem._day == _day && (dayItem.selected != selected || dayItem.dateDisabled != dateDisabled)) {
                    avalon.mix(dayItem, {
                        month: dateMonth,
                        year: dateYear,
                        selected: selected,
                        dateDisabled: dateDisabled
                    });
                    rowItem.set(n, '').set(n, _day);
                } else if (dayItem._day == _day) {
                    avalon.mix(dayItem, {
                        month: dateMonth,
                        year: dateYear
                    });
                } else {
                    avalon.mix(dayItem, {
                        day: dateDay + '',
                        _day: _day,
                        month: dateMonth,
                        year: dateYear,
                        weekend: weekend,
                        selected: selected,
                        dateDisabled: dateDisabled
                    });
                    rowItem.set(n, _day);
                }
            }
            function setCalendarDays(month, year, day) {
                var startDay = vmodel.startDay, firstDayOfMonth = new Date(year, month, 1), cellDate = new Date(year, month, 1 - (firstDayOfMonth.getDay() - startDay + 7) % 7), showOtherMonths = vmodel.showOtherMonths, valueDate = parseDate(element.value), minDate = vmodel.minDate, maxDate = vmodel.maxDate, prev = minDate ? (year - minDate.getFullYear()) * 12 + month - minDate.getMonth() > 0 : true, next = maxDate ? (maxDate.getFullYear() - year) * 12 + maxDate.getMonth() - month > 0 : true, dateYear, dateMonth, dateDay;
                vmodel.prevMonth = prev;
                vmodel.nextMonth = next;
                for (var i = 0, len = vmodel.numberOfMonths; i < len; i++) {
                    vmodel.data[i].year = year;
                    vmodel.data[i].month = month;
                    datepickerData[i].year = year;
                    datepickerData[i].month = month;
                    for (var m = 0; m < 6; m++) {
                        for (var n = 0; n < 7; n++) {
                            dateMonth = cellDate.getMonth();
                            dateYear = cellDate.getFullYear();
                            dateDay = cellDate.getDate();
                            if (dateYear === year && dateMonth === month) {
                                setCalendarDate(cellDate, vmodel, valueDate, dateMonth, dateYear, dateDay, day, i, m, n);
                            } else {
                                if (showOtherMonths && m === 0 && (dateYear < year || dateMonth < month)) {
                                    setCalendarDate(cellDate, vmodel, valueDate, dateMonth, dateYear, dateDay, day, i, m, n);
                                } else {
                                    vmodel.data[i]['rows'][m].set(n, '');
                                    avalon.mix(datepickerData[i]['rows'][m][n], {
                                        day: '',
                                        _day: '',
                                        month: false,
                                        weekend: false,
                                        selected: false,
                                        dateDisabled: true
                                    });
                                }
                            }
                            cellDate = new Date(cellDate.setDate(dateDay + 1));
                        }
                    }
                    month += 1;
                    firstDayOfMonth = new Date(year, month, 1);
                    year = firstDayOfMonth.getFullYear();
                    month = firstDayOfMonth.getMonth();
                    cellDate = new Date(year, month, 1 - (firstDayOfMonth.getDay() - startDay + 7) % 7);
                }
            }
            // 检验date
            function validateDate(date) {
                if (typeof date == 'string') {
                    return parseDate(date);
                } else {
                    return date;
                }
            }
            // 检验time
            function validateTime(date) {
                if (typeof date == 'string') {
                    var theDate = parseDate(date), timeReg = /\s[0-2]?[0-9]:[0-5]?[0-9]/, _time = date.match(timeReg);
                    if (theDate && _time && _time.length) {
                        var time = _time[0].split(':'), hour = +time[0], minute = +time[1];
                        theDate = new Date(theDate.getFullYear(), theDate.getMonth(), theDate.getDate(), hour, minute);
                    }
                    return theDate;
                } else {
                    return date;
                }
            }
            return vmodel;
        };
    widget.regional = [];
    widget.regional['zh-CN'] = {
        holidayDate: initHoliday(holidayDate),
        dayNames: [
            '\u65E5',
            '\u4E00',
            '\u4E8C',
            '\u4E09',
            '\u56DB',
            '\u4E94',
            '\u516D'
        ],
        //该变量被注册到了vm中，同时在方法中使用
        weekDayNames: [
            '\u5468\u65E5',
            '\u5468\u4E00',
            '\u5468\u4E8C',
            '\u5468\u4E09',
            '\u5468\u56DB',
            '\u5468\u4E94',
            '\u5468\u516D'
        ],
        monthNames: [
            '\u4E00\u6708',
            '\u4E8C\u6708',
            '\u4E09\u6708',
            '\u56DB\u6708',
            '\u4E94\u6708',
            '\u516D\u6708',
            '\u4E03\u6708',
            '\u516B\u6708',
            '\u4E5D\u6708',
            '\u5341\u6708',
            '\u5341\u4E00\u6708',
            '\u5341\u4E8C\u6708'
        ],
        monthNamesShort: [
            '\u4E00\u6708',
            '\u4E8C\u6708',
            '\u4E09\u6708',
            '\u56DB\u6708',
            '\u4E94\u6708',
            '\u516D\u6708',
            '\u4E03\u6708',
            '\u516B\u6708',
            '\u4E5D\u6708',
            '\u5341\u6708',
            '\u5341\u4E00\u6708',
            '\u5341\u4E8C\u6708'
        ],
        closeText: 'Done',
        prevText: '\u524D',
        prevDayText: '\u6628\u5929',
        nextText: '\u540E',
        nextDayText: '\u660E\u5929',
        dayAfterTomorrow: '\u540E\u5929',
        currentDayText: '\u4ECA\u5929',
        currentDayFullText: '\u4ECA\u5929',
        showMonthAfterYear: true,
        titleFormat: function (year, month) {
            return year + '\u5E74' + ' ' + this.monthNames[month];
        },
        dayText: '\u5929',
        weekText: '\u5468',
        yearText: '\u5E74',
        monthText: '\u6708',
        timerText: '\u65F6\u95F4',
        hourText: '\u65F6',
        minuteText: '\u5206',
        nowText: '\u73B0\u5728',
        confirmText: '\u786E\u5B9A'
    };
    //设置默认语言包
    widget.defaultRegional = widget.regional['zh-CN'];
    widget.version = 1;
    widget.defaults = {
        startDay: 1,
        //@config 设置每一周的第一天是哪天，0代表Sunday，1代表Monday，依次类推, 默认从周一开始
        minute: 0,
        //@config 设置time的默认minute
        hour: 0,
        //@config 设置time的hour
        width: 90,
        //@config 设置日历框宽度
        showTip: true,
        //@config 是否显示节日提示
        disabled: false,
        //@config 是否禁用日历组件
        changeMonthAndYear: false,
        //@config 是否可以通过下拉框选择月份或者年份
        mobileMonthAndYear: false,
        //@config PC端可以通过设置changeMonthAndYear为true使用dropdown的形式选择年份或者月份，但是移动端只能通过设置mobileMonthAndYear为true来选择月份、年份
        showOtherMonths: false,
        //@config 是否显示非当前月的日期
        numberOfMonths: 1,
        //@config 一次显示的日历月份数, 默认一次显示一个
        allowBlank: false,
        //@config 是否允许日历框为空
        minDate: null,
        //@config 最小的可选日期，可以配置为Date对象，也可以是yyyy-mm-dd格式的字符串，或者当分隔符是“/”时，可以是yyyy/mm/dd格式的字符串
        maxDate: null,
        //@config 最大的可选日期，可以配置为Date对象，也可以是yyyy-mm-dd格式的字符串，或者当分隔符是“/”时，可以是yyyy/mm/dd格式的字符串
        stepMonths: 1,
        //@config 当点击next、prev链接时应该跳过几个月份, 默认一个月份
        toggle: false,
        //@config 设置日历的显示或者隐藏，false隐藏，true显示
        separator: '-',
        //@config 日期格式的分隔符,默认“-”，可以配置为"/"，而且默认日期格式必须是yyyy-mm-dd
        calendarLabel: '\u9009\u62E9\u65E5\u671F',
        //@config 日历组件的说明label
        /**
         * @config {Function} 当month或者year更新时调用的回调
         * @param year {Number} 当前日期的year
         * @param month {Number} 当前日期的month(0-11)
         * @param vmodel {Number} 日历组件对应vmodel
         */
        onChangeMonthYear: avalon.noop,
        /**
         * @config {Function} 格式化输出日期单元格内容
         * @param date {Date} 当前的日期
         * @param vmodel {Vmodel} 日历组件对应vmodel
         * @param dateItem {Object} 对应的包含日期相关信息的对象
         */
        dateCellRender: false,
        // 是否可以自定义日历单元格内容
        watermark: true,
        //@config 是否显示水印文字
        zIndex: -1,
        //@config设置日历的z-index
        showDatepickerAlways: false,
        //@config是否总是显示datepicker
        timer: false,
        //@config 是否在组件中可选择时间
        /**
         * @config {Function} 选中日期后的回调
         * @param date {String} 当前选中的日期
         * @param vmodel {Object} 当前日期组件对应的Vmodel
         * @param data {Object} 绑定组件的元素的data属性组成的集合
         */
        onSelect: avalon.noop,
        /**
         * @config {Function} 日历关闭的回调
         * @param date {Object} 当前日期
         * @param vmodel {Object} 当前日期组件对应的Vmodel
         */
        onClose: avalon.noop,
        /**
         * @config {Function} 在设置了timer为true时，选择日期、时间后的回调
         * @param vmodel {Object} 当前日期组件对应的Vmodel
         */
        onSelectTime: avalon.noop,
        /**
         * @config {Function} 将符合日期格式要求的字符串解析为date对象并返回，不符合格式的字符串返回null,用户可以根据自己需要自行配置解析过程
         * @param str {String} 要解析的日期字符串
         * @returns {Date} Date格式的日期
         */
        parseDate: parseDate,
        /**
         * @config {Function} 将日期对象转换为符合要求的日期字符串
         * @param date {Date} 要格式化的日期对象
         * @returns {String} 格式化后的日期
         */
        formatDate: function (date) {
            if (avalon.type(date) !== 'date') {
                avalon.log('the type of ' + date + 'must be Date');
                return '';
            }
            var separator = this.separator, year = date.getFullYear(), month = date.getMonth(), day = date.getDate();
            return year + separator + this.formatNum(month + 1, 2) + separator + this.formatNum(day, 2);
        },
        // 格式化month和day，使得其始终为两位数，比如2为02,1为01
        formatNum: function (n, length) {
            n = String(n);
            for (var i = 0, len = length - n.length; i < len; i++)
                n = '0' + n;
            return n;
        },
        widgetElement: '',
        // accordion容器
        formatErrorTip: '\u683C\u5F0F\u9519\u8BEF',
        getTemplate: function (str, options) {
            return str;
        }
    };
    avalon.filters.timer = function (str) {
        var num = +str;
        if (num >= 0 && num <= 9) {
            str = '0' + str;
        }
        return str;
    };
    function cleanDate(date) {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        return date;
    }
    // 获取节日信息并设置相应显示，提供中文语言包对于节日的支持
    function initHoliday(data) {
        var _table = {}, _data = [];
        for (var k in data) {
            var v = data[k], _date = parseDate(k);
            if (_date) {
                v.date = _date;
                _data.push(v);
            }
        }
        _data.sort(function (a, b) {
            return (a.dayIndex || 0) - (b.dayIndex || 0);
        });
        for (var k = 0, len = _data.length; k < len; k++) {
            var v = _data[k], _date = v.date, beforeTime = v.beforeTime || 0, afterTime = v.afterTime || 0;
            _date.setDate(_date.getDate() - beforeTime - 1);
            for (var i = -v.beforeTime; i < afterTime + 1; i++) {
                _date.setDate(_date.getDate() + 1);
                _table[_date.getTime()] = {
                    text: v['holidayName'] + (i < 0 ? '\u524D' + -i + '\u5929' : i > 0 ? '\u540E' + i + '\u5929' : ''),
                    cellClass: i === 0 && v['holidayClass'] || '',
                    cellText: i === 0 && v['holidayText'] || ''
                };
            }
        }
        return _table;
    }
    function parseDate(str) {
        if (!str) {
            return null;
        }
        if (avalon.type(str) === 'date')
            return str;
        var separator = this.separator || '-';
        var reg = '^(\\d{4})' + separator + '(\\d{1,2})' + separator + '(\\d{1,2})[\\s\\w\\W]*$';
        reg = new RegExp(reg);
        var x = str.match(reg);
        return x ? new Date(x[1], x[2] * 1 - 1, x[3]) : null;
    }
    // 解析传入日期，如果是节日或者节日前三天和后三天只能，会相应的显示节日前几天信息，如果是今天就显示今天，其他情况显示日期对应的是周几
    function getDateTip(curDate) {
        if (!curDate)
            return;
        //如果没有传递语言设置，使用默认的语言包
        var regional;
        if (this.$id && this.regional) {
            regional = this.regional;
        } else {
            regional = widget.defaultRegional;
        }
        var holidays = regional.holidayDate || {};
        var now = cleanDate(new Date()).getTime(), curTime = curDate.getTime(), dayNames = regional.dayNames;
        if (now == curTime) {
            return {
                text: regional.currentDayFullText,
                cellClass: 'c_today',
                cellText: regional.currentDayText
            };
        } else if (now == curTime - ONE_DAY) {
            return {
                text: regional.nextDayText,
                cellClass: ''
            };
        } else if (now == curTime - ONE_DAY * 2) {
            return {
                text: regional.dayAfterTomorrow,
                cellClass: ''
            };
        }
        var tip = holidays && holidays[curDate.getTime()];
        if (!tip) {
            return { text: regional.weekDayNames[curDate.getDay()] };
        } else {
            return tip;
        }
    }
    ;
    return avalon;
}
)();
},{"../avalon.getModel":6,"../dropdown/avalon.dropdown.js":21,"../slider/avalon.slider.js":55,"./avalon.datepicker.lang":16}],16:[function(innerRequire,module,exports){
module.exports = (
function () {
    var HolidayStyle = {
            '\u5143\u65E6\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_yuandan',
                'holidayText': '\u5143\u65E6'
            },
            '\u9664\u5915': {
                'afterTime': 0,
                'beforeTime': 0,
                'dayIndex': 0,
                'holidayClass': 'c_chuxi',
                'holidayText': '\u9664\u5915'
            },
            '\u6625\u8282': {
                'afterTime': 0,
                'beforeTime': 0,
                'dayIndex': 0,
                'holidayClass': 'c_chunjie',
                'holidayText': '\u6625\u8282'
            },
            '\u5143\u5BB5\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_yuanxiao',
                'holidayText': '\u5143\u5BB5'
            },
            '\u6E05\u660E\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_qingming',
                'holidayText': '\u6E05\u660E'
            },
            '\u52B3\u52A8\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_wuyi',
                'holidayText': '\u52B3\u52A8'
            },
            '\u7AEF\u5348\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_duanwu',
                'holidayText': '\u7AEF\u5348'
            },
            '\u4E2D\u79CB\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_zhongqiu',
                'holidayText': '\u4E2D\u79CB'
            },
            '\u56FD\u5E86\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_guoqing',
                'holidayText': '\u56FD\u5E86'
            },
            '\u5723\u8BDE\u8282': {
                'afterTime': 3,
                'beforeTime': 3,
                'dayIndex': 0,
                'holidayClass': 'c_shengdan',
                'holidayText': '\u5723\u8BDE'
            }
        };
    var HolidayData = {
            '2014-01-01': { 'holidayName': '\u5143\u65E6\u8282' },
            '2014-01-30': { 'holidayName': '\u9664\u5915' },
            '2014-01-31': { 'holidayName': '\u6625\u8282' },
            '2014-02-01': { 'holidayName': '\u6B63\u6708\u521D\u4E8C' },
            '2014-02-02': { 'holidayName': '\u6B63\u6708\u521D\u4E09' },
            '2014-02-14': { 'holidayName': '\u5143\u5BB5\u8282' },
            '2014-04-05': { 'holidayName': '\u6E05\u660E\u8282' },
            '2014-05-01': { 'holidayName': '\u52B3\u52A8\u8282' },
            '2014-06-01': { 'holidayName': '\u513F\u7AE5\u8282' },
            '2014-06-02': { 'holidayName': '\u7AEF\u5348\u8282' },
            '2014-09-08': { 'holidayName': '\u4E2D\u79CB\u8282' },
            '2014-09-10': { 'holidayName': '\u6559\u5E08\u8282' },
            '2014-10-01': { 'holidayName': '\u56FD\u5E86\u8282' },
            '2014-12-25': { 'holidayName': '\u5723\u8BDE\u8282' },
            '2015-01-01': { 'holidayName': '\u5143\u65E6\u8282' },
            '2015-02-18': { 'holidayName': '\u9664\u5915' },
            '2015-02-19': { 'holidayName': '\u6625\u8282' },
            '2015-02-20': { 'holidayName': '\u6B63\u6708\u521D\u4E8C' },
            '2015-02-21': { 'holidayName': '\u6B63\u6708\u521D\u4E09' },
            '2015-03-05': { 'holidayName': '\u5143\u5BB5\u8282' },
            '2015-04-05': { 'holidayName': '\u6E05\u660E\u8282' },
            '2015-05-01': { 'holidayName': '\u52B3\u52A8\u8282' },
            '2015-06-01': { 'holidayName': '\u513F\u7AE5\u8282' },
            '2015-06-20': { 'holidayName': '\u7AEF\u5348\u8282' },
            '2015-09-27': { 'holidayName': '\u4E2D\u79CB\u8282' },
            '2015-10-01': { 'holidayName': '\u56FD\u5E86\u8282' },
            '2015-12-25': { 'holidayName': '\u5723\u8BDE\u8282' }
        };
    for (var x in HolidayData) {
        if (HolidayData.hasOwnProperty(x)) {
            var data = HolidayData[x], name = data.holidayName;
            if (name && HolidayStyle[name]) {
                var style = HolidayStyle[name];
                for (var y in style) {
                    if (style.hasOwnProperty(y) && !(y in data)) {
                        data[y] = style[y];
                    }
                }
            }
        }
    }
    return HolidayData;
}
)();
},{}],17:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<div class=\"oni-daterangepicker\"\n     ms-css-width=\"dateRangeWidth\">\n    <div class=\"oni-datepicker-range-input\" \n        ms-click=\"_toggleDatepicker(toggle, $event)\"\n        ms-class=\"oni-state-active:toggle\"\n        ms-hover=\"oni-state-hover\"\n        >\n        <div class=\"oni-datepicker-input js-input\"\n             ms-class=\"oni-datepicker-input-disabled: disabled\">{{label|html}}</div>\n        <div class=\"oni-datepicker-icon-wrap\">\n            <i class=\"oni-datepicker-icon oni-icon oni-icon-angle-up\" ms-visible=\"toggle\">&#xf028;</i>\n            <i class=\"oni-datepicker-icon oni-icon oni-icon-angle-down\" ms-visible=\"!toggle\">&#xf032;</i>\n        </div>\n    </div>\n    <div class=\"oni-daterangepicker-content\">\n        <div class=\"oni-datepicker-groups\" \n            ms-visible=\"toggle\"\n            ms-click=\"_updateMsg\">\n            <div class=\"oni-daterangepicker-quick-operation\" ms-if=\"shortcut\">\n                <span ms-click=\"quickOperation('today')\">今天</span>\n                <span ms-click=\"quickOperation('lastDay')\">昨天</span>\n                <span ms-click=\"quickOperation('lastSeventDays')\">过去七天</span>\n                <span ms-click=\"quickOperation('currentMonth')\">本月</span>\n                <span ms-click=\"quickOperation('lastMonth')\">上个月</span>\n            </div>\n            <div class=\"oni-datepicker-group-first oni-datepicker-group\">\n                <input style=\"display:none\" \n                       ms-data-container=\"container\"\n                       ms-data-input=\"inputElement\"\n                       ms-data-calenderwrapper=\"calendarWrapper\"/>\n            </div>\n            <div class=\"oni-datepicker-group-second oni-datepicker-group\">\n                <input style=\"display:none\" \n                       ms-data-container=\"container\"\n                       ms-data-input=\"inputElement\"\n                       ms-data-calenderwrapper=\"calendarWrapper\"/>\n            </div>\n            <div class=\"oni-calendarbox-footer oni-calendarbox-footer-small oni-helper-clearfix\">\n                <div class=\"oni-calendarbox-msg js-msg\">{{msg|html}}</div>\n                <div class=\"oni-calendarbox-btns\">\n                    <button type=\"button\" ms-widget=\"button\" data-button-color=\"success\" data-button-size=\"small\" class=\"oni-btn\"\n                            ms-hover=\"oni-state-hover\"\n                            ms-click=\"_selectDate\">确定</button>\n                    <button type=\"button\" ms-widget=\"button\" class=\"oni-btn\" data-button-size=\"small\"\n                    ms-click=\"_cancelSelectDate\">取消</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";
innerRequire("../button/avalon.button");
innerRequire("./avalon.datepicker");

module.exports = (
function () {
    var calendarTemplate = sourceHTML;
    var widget = avalon.ui.daterangepicker = function (element, data, vmodels) {
            var options = data.daterangepickerOptions, datesDisplayFormat = options.opts && options.opts.datesDisplayFormat, parseDate = typeof options.parseDate === 'function' && options.parseDate.bind(options) || widget.defaults.parseDate.bind(options), formatDate = typeof options.formatDate === 'function' && options.formatDate.bind(options) || widget.defaults.formatDate.bind(options), duplex = options.duplex && options.duplex.split(','),
                //options.duplex保存起始日期和结束日期初始化值的引用，逗号分隔
                _confirmClick = false,
                //判断是否点击了确定按钮，没点击为false，点击为true
                rules = options.rules,
                //日期选择框起始日期和结束日期之间关系的规则
                fromSelected = null, inputFromVM = null, inputToVM = null, _toMinDate = '',
                //保存rules指向的对象的toMinDate属性值，以便于rules属性计算所得的minDate做比较
                _toMaxDate = '',
                //保存rules指向的对象的toMaxDate属性值，以便于rules属性计算所得的maxDate做比较
                inputFrom,
                //绑定datepicker组件的初始日期输入域元素的引用
                inputTo,
                //绑定datepicker组件的结束日期输入域元素的引用
                duplexFrom, duplexTo, _oldValue,
                //保存最近一次选择的起始日期和结束日期组成的日期对象数组，因为当选择了日期但没有点确定按钮时，日期选择范围不改变，相应的对应的日历默认输入域也应该恢复到最近一次的选择
                rangeRules;
            // 获取用户定义的模拟输入框显示内容形式的方法
            if (datesDisplayFormat && typeof datesDisplayFormat === 'function') {
                options.datesDisplayFormat = datesDisplayFormat;
            }
            datesDisplayFormat = options.datesDisplayFormat;
            // 获取rules配置对象
            if (rules && avalon.type(rules) === 'string') {
                var ruleVM = avalon.getModel(rules, vmodels);
                rules = ruleVM[1][ruleVM[0]];
            }
            if (rules && avalon.type(rules) === 'object') {
                // 让rules对象的toMinDate、toMaxDate、fromMinDate、fromMaxDate是可监控的属性
                rules = avalon.mix({}, rules.$model || rules);
                rules.toMinDate = rules.toMinDate || '';
                rules.toMaxDate = rules.toMaxDate || '';
                rules.fromMinDate = rules.fromMinDate || '';
                rules.fromMaxDate = rules.fromMaxDate || '';
            } else {
                rules = '';
            }
            options.rules = rules;
            _toMinDate = rules.toMinDate;
            _toMaxDate = rules.toMaxDate;
            rangeRules = options.rules && options.rules.rules || '';
            rangeRules = rangeRules.length > 0 ? rangeRules.split(',') : [];
            options.template = options.getTemplate(calendarTemplate, options);
            initValues();
            var vmodel = avalon.define(data.daterangepickerId, function (vm) {
                    avalon.mix(vm, options);
                    vm.msg = '';
                    vm.$skipArray = [
                        'widgetElement',
                        'container',
                        'inputElement',
                        'calendarWrapper',
                        'fromLabel',
                        'toLabel',
                        'duplex'
                    ];
                    vm.widgetElement = element;
                    vm.toggle = false;
                    vm.container = null;
                    vm.inputElement = null;
                    vm.calendarWrapper = null;
                    // 切换组件的显示隐藏
                    vm._toggleDatepicker = function (val) {
                        if (!vmodel.disabled) {
                            vmodel.toggle = !val;
                        }
                    };
                    // 更新日期范围选择框下方的说明文字
                    vm._updateMsg = function (event) {
                        event.stopPropagation();
                    };
                    // 点击确定按钮确定日期选择范围
                    vm._selectDate = function () {
                        var inputFromValue = inputFrom.value, inputToValue = inputTo.value, inputFromDate = parseDate(inputFromValue), inputToDate = parseDate(inputToValue), label = datesDisplayFormat(options.defaultLabel, inputFromValue, inputToValue), p = document.createElement('p'), $p = avalon(p), labelWidth = 0, msg = '';
                        if (!inputToDate || !inputFromDate) {
                            msg = !inputFromDate && !inputToDate ? '\u8BF7\u9009\u62E9\u8D77\u59CB\u65E5\u671F\u548C\u7ED3\u675F\u65E5\u671F' : !inputFromDate ? '\u8BF7\u9009\u62E9\u8D77\u59CB\u65E5\u671F' : '\u8BF7\u9009\u62E9\u7ED3\u675F\u65E5\u671F';
                            msg = '<span style=\'color:#f55\'>' + msg + '</span>';
                            vmodel.msg = msg;
                            return false;
                        }
                        vmodel.label = label;
                        _confirmClick = true;
                        _oldValue = [
                            inputFromDate,
                            inputToDate
                        ];
                        vmodel.toggle = false;
                        $p.css({
                            position: 'absolute',
                            visibility: 'hidden',
                            height: 0,
                            'font-size': '12px'
                        });
                        p.innerHTML = label;
                        document.body.appendChild(p);
                        labelWidth = $p.width() + 30;
                        document.body.removeChild(p);
                        if (labelWidth > vmodel.dateRangeWidth) {
                            vmodel.dateRangeWidth = labelWidth;
                        }
                        options.onSelect.call(vmodel, inputFromDate, inputToDate, _oldValue, vmodel, avalon(element).data());
                    };
                    // 点击取消按钮隐藏日历框
                    vm._cancelSelectDate = function () {
                        fromSelected = false;
                        vmodel.toggle ? vmodel.toggle = false : 0;
                    };
                    vm.getDates = function () {
                        var inputFromValue = duplexFrom ? duplexFrom[1][duplexFrom[0]] : vmodel.inputFromValue, inputFromDate = parseDate(inputFromValue), inputToValue = duplexTo ? duplexTo[1][duplexTo[0]] : vmodel.inputToValue, inputToDate = parseDate(inputToValue);
                        return inputFromDate && inputToDate && [
                            inputFromDate,
                            inputToDate
                        ] || null;
                    };
                    // 设置日期范围框的起始日期和结束日期
                    vm.setDates = function (from, to, defaultLabel) {
                        var inputValues = to === void 0 ? [from] : [
                                from,
                                to
                            ], len = inputValues.length, inputFromDate = avalon.type(from) === 'date' ? from : parseDate(from), inputToDate = avalon.type(to) === 'date' ? to : parseDate(to);
                        if (len) {
                            vmodel.defaultLabel = defaultLabel || vmodel.defaultLabel;
                            setValues(len, from, to);
                        } else {
                            vmodel.label = '';
                        }
                        initMsgAndOldValue();
                        options.onSelect.call(vmodel, inputFromDate, inputToDate, _oldValue, vmodel, avalon(element).data());
                        _oldValue = [
                            inputFromDate,
                            inputToDate
                        ];
                    };
                    vm._fixDate = function (dateFrom, dateTo, minDate, maxDate) {
                        var from = new Date(dateFrom.getTime()), to = new Date(dateTo.getTime());
                        if (minDate) {
                            from = new Date(Math.max(minDate.getTime(), from));
                        }
                        if (maxDate) {
                            to = new Date(Math.min(maxDate.getTime(), to));
                        }
                        return [
                            from,
                            to
                        ];
                    };
                    vm.quickOperation = function (instruction) {
                        var now = new Date(), fromDate = now, toDate = now, defaultLabel = '\u4ECA\u5929', minDate = vmodel.rules.fromMinDate, maxDate = vmodel.rules.toMaxDate, dateArr = [];
                        minDate = minDate && parseDate(minDate) || null;
                        maxDate = minDate && parseDate(maxDate) || null;
                        switch (instruction) {
                        case 'lastDay':
                            fromDate = toDate = new Date(now.setDate(now.getDate() - 1));
                            defaultLabel = '\u6628\u5929';
                            break;
                        case 'lastSeventDays':
                            fromDate = new Date();
                            fromDate = new Date(fromDate.setDate(fromDate.getDate() - 8));
                            toDate = new Date();
                            toDate = new Date(toDate.setDate(toDate.getDate() - 1));
                            defaultLabel = '\u8FC7\u53BB\u4E03\u5929';
                            dateArr = vmodel._fixDate(fromDate, toDate, minDate, maxDate);
                            fromDate = dateArr[0];
                            toDate = dateArr[1];
                            break;
                        case 'currentMonth':
                            defaultLabel = '\u672C\u6708';
                            fromDate = new Date();
                            fromDate = new Date(fromDate.setDate(1));
                            dateArr = vmodel._fixDate(fromDate, toDate, minDate, maxDate);
                            fromDate = dateArr[0];
                            toDate = dateArr[1];
                            break;
                        case 'lastMonth':
                            defaultLabel = '\u4E0A\u4E2A\u6708';
                            toDate = new Date();
                            toDate = new Date(toDate.setDate(-1));
                            fromDate = new Date(new Date(toDate.getTime()).setDate(1));
                            dateArr = vmodel._fixDate(fromDate, toDate, minDate, maxDate);
                            fromDate = dateArr[0];
                            toDate = dateArr[1];
                            break;
                        }
                        vmodel.setDates(fromDate, toDate, defaultLabel);
                        vmodel.toggle = false;
                    };
                    // 设置日期输入框的label
                    vm.setLabel = function (str) {
                        vmodel.label = str;
                    };
                    // 设置日历的禁用与否
                    vm.setDisabled = function (val) {
                        vmodel.disabled = val;
                    };
                    // 选择了初始日期之后根据rules的设置及时更新结束日期的选择范围
                    vm.fromSelectCal = function (date) {
                        if (vmodel.rules && vmodel.rules.rules) {
                            applyRules(date);
                        }
                        fromSelected = date;
                    };
                    vm.$fromConfig = {
                        type: 'range',
                        allowBlank: true,
                        parseDate: parseDate,
                        formatDate: formatDate,
                        onSelect: vm.fromSelectCal,
                        minDate: 'rules.fromMinDate',
                        maxDate: 'rules.fromMaxDate',
                        startDay: options.startDay,
                        calendarLabel: options.fromLabel,
                        onInit: function (fromVM) {
                            inputFromVM = fromVM;
                        }
                    };
                    vm.$toConfig = {
                        type: 'range',
                        allowBlank: true,
                        parseDate: parseDate,
                        formatDate: formatDate,
                        minDate: 'rules.toMinDate',
                        maxDate: 'rules.toMaxDate',
                        startDay: options.startDay,
                        calendarLabel: options.toLabel,
                        onInit: function (toVM) {
                            inputToVM = toVM;
                        }
                    };
                    vm.$init = function () {
                        var inputFromValue = '', daterangepicker, calendarWrapper, container, inputs;
                        daterangepicker = avalon.parseHTML(options.template).firstChild;
                        inputs = daterangepicker.getElementsByTagName('input');
                        container = daterangepicker.children[0];
                        calendarWrapper = daterangepicker.children[1];
                        inputFrom = inputs[0];
                        inputTo = inputs[1];
                        vmodel.container = container;
                        vmodel.inputElement = container;
                        vmodel.calendarWrapper = calendarWrapper;
                        element.appendChild(daterangepicker);
                        avalon.bind(document, 'click', function (event) {
                            var target = event.target;
                            if (!element.contains(target)) {
                                vmodel.toggle = false;
                            }
                        });
                        element.init = true;
                        if (duplexFrom) {
                            inputFromValue = duplexFrom[1][duplexFrom[0]];
                        }
                        applyRules(inputFromValue && parseDate(inputFromValue));
                        avalon.scan(element, [vmodel].concat(vmodels));
                        // 扫描完daterangepicker组件之后才扫描datepicker
                        avalon.nextTick(function () {
                            var duplexFromName = duplexFrom ? duplexFrom[0].trim() : 'inputFromValue', duplexToName = duplexTo ? duplexTo[0].trim() : 'inputToValue', fromVM = duplexFrom ? [
                                    vmodel,
                                    duplexFrom[1]
                                ] : [vmodel], toVM = duplexTo ? [
                                    vmodel,
                                    duplexTo[1]
                                ] : [vmodel];
                            inputFrom.setAttribute('ms-widget', 'datepicker, $, $fromConfig');
                            inputTo.setAttribute('ms-widget', 'datepicker, $, $toConfig');
                            inputFrom.setAttribute('ms-duplex', duplexFromName);
                            inputTo.setAttribute('ms-duplex', duplexToName);
                            avalon.scan(inputFrom, fromVM.concat(vmodels));
                            avalon.scan(inputTo, toVM.concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                //vmodels是不包括vmodel的
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        });
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                });
            if (!duplexFrom) {
                vmodel.$watch('inputFromValue', function (val) {
                    updateMsg();
                });
            }
            if (!duplexTo) {
                vmodel.$watch('inputToValue', function (val) {
                    updateMsg();
                });
            }
            var _c = {
                    '+M': function (time, n) {
                        //+M表示相隔n个月
                        var _d = time.getDate();
                        time.setMonth(time.getMonth() + n);
                        if (time.getDate() !== _d) {
                            time.setDate(0);
                        }
                    },
                    '-M': function (time, n) {
                        //-M表示相隔n个月不过是追溯到以前的日前
                        var _d = time.getDate();
                        time.setMonth(time.getMonth() - n);
                        if (time.getDate() !== _d) {
                            time.setDate(0);
                        }
                    },
                    '+D': function (time, n) {
                        time.setDate(time.getDate() + n);
                    },
                    '-D': function (time, n) {
                        time.setDate(time.getDate() - n);
                    },
                    '+Y': function (time, n) {
                        time.setFullYear(time.getFullYear() + n);
                    },
                    '-Y': function (time, n) {
                        time.setFullYear(time.getFullYear() - n);
                    }
                };
            // 初始化日期范围值
            function initValues() {
                if (duplex) {
                    var duplexLen = duplex.length, duplexVM1 = avalon.getModel(duplex[0].trim(), vmodels), duplexVM2 = duplexLen === 1 ? null : avalon.getModel(duplex[1].trim(), vmodels), duplexVal1 = duplexVM1 && duplexVM1[1][duplexVM1[0]] || '', duplexVal2 = duplexVM2 ? duplexVM2[1][duplexVM2[0]] : '';
                    duplexFrom = duplexVM1;
                    duplexTo = duplexVM2;
                    setValues(duplexLen, duplexVal1, duplexVal2, true);
                    if (duplexFrom) {
                        duplexFrom[1].$watch(duplexFrom[0], function (val) {
                            updateMsg();
                        });
                    }
                    if (duplexTo) {
                        duplexTo[1].$watch(duplexTo[0], function (val) {
                            updateMsg();
                        });
                    }
                }
                if (!duplexFrom) {
                    options.inputFromValue = '';
                }
                if (!duplexTo) {
                    options.inputToValue = '';
                }
            }
            // 根据参数个数进行日期的初始日期设置
            function setValues(len, from, to, init) {
                var fromValue = '', toValue = '', dateranpickerVM = vmodel ? vmodel : options;
                if (len) {
                    if (len == 2) {
                        if (avalon.type(from) === 'date') {
                            fromValue = formatDate(from);
                        } else {
                            fromValue = from && parseDate(from) && from || '';
                        }
                        if (avalon.type(to) === 'date') {
                            toValue = formatDate(to);
                        } else {
                            if (init) {
                                toValue = to ? to : '';
                            } else {
                                toValue = to && parseDate(to) && to || '';
                            }
                        }
                        if (duplexFrom) {
                            duplexFrom[1][duplexFrom[0]] = fromValue;
                        } else {
                            dateranpickerVM.inputFromValue = fromValue;
                        }
                        if (duplexTo) {
                            duplexTo[1][duplexTo[0]] = toValue;
                        } else {
                            dateranpickerVM.inputToValue = toValue;
                        }
                        dateranpickerVM.label = datesDisplayFormat(dateranpickerVM.defaultLabel, fromValue, toValue);
                    } else if (len == 1) {
                        if (avalon.type(from) === 'date') {
                            fromValue = formatDate(from);
                        } else {
                            fromValue = from && parseDate(from) && from || '';
                        }
                        if (duplexFrom) {
                            duplexFrom[1][duplexFrom[0]] = fromValue;
                        } else {
                            dateranpickerVM.inputFromValue = fromValue;
                        }
                    }
                    toValue = toValue || (duplexTo ? duplexTo[1][duplexTo[0]] : dateranpickerVM.inputToValue);
                    if (!fromValue && !toValue) {
                        // 只要inputTo.value为null都提示不限日期
                        dateranpickerVM.label = '\u4E0D\u9650\u65E5\u671F';
                    }
                }
            }
            // 根据rules的设置确定结束日期可选的范围及默认值
            function applyRules(date) {
                var minDate = _toMinDate && parseDate(_toMinDate), maxDate = _toMaxDate && parseDate(_toMaxDate), inputFromValue = duplexFrom ? duplexFrom[1][duplexFrom[0]] : vmodel.inputFromValue, inputToValue = duplexTo ? duplexTo[1][duplexTo[0]] : vmodel.inputToValue, rules = vmodel.rules, df = {}, minDateRule, maxDateRule, initFromDate, inputToInitValue, initToDate, toMinDateFormat, inputToDate;
                if (!date) {
                    if (element.init) {
                        initMsgAndOldValue();
                        element.init = false;
                    } else {
                        rules.toMinDate = minDate || '';
                        rules.toMaxDate = maxDate || '';
                    }
                    return;
                }
                for (var i = 0, type = [
                            'defaultDate',
                            'minDate',
                            'maxDate'
                        ]; i < type.length; i++) {
                    if (rangeRules[i]) {
                        df[type[i]] = calcDate(rangeRules[i], date);
                    }
                }
                minDateRule = df['minDate'];
                maxDateRule = df['maxDate'];
                minDate = (minDateRule ? minDateRule.getTime() : -1) > (minDate ? minDate.getTime() : -1) ? minDateRule : minDate;
                maxDate = (maxDateRule ? maxDateRule.getTime() : Number.MAX_VALUE) > (maxDate ? maxDate.getTime() : Number.MAX_VALUE) ? maxDate : maxDateRule;
                if (element.init) {
                    initFromDate = parseDate(inputFromValue);
                    inputToInitValue = duplexTo && duplexTo[1][duplexTo[0]] || '';
                    initToDate = parseDate(inputToInitValue);
                    if (initFromDate && inputToInitValue && !initToDate) {
                        inputToValue = formatDate(df['defaultDate']);
                    }
                }
                if (minDate) {
                    toMinDateFormat = formatDate(minDate);
                    if (!inputToValue && !element.init) {
                        inputToValue = toMinDateFormat;
                    }
                }
                inputToDate = inputToValue && parseDate(inputToValue);
                if (inputToDate && isDateDisabled(inputToDate, minDate, maxDate)) {
                    inputToValue = toMinDateFormat;
                }
                if (duplexTo) {
                    duplexTo[1][duplexTo[0]] = inputToValue;
                } else {
                    vmodel.inputToValue = inputToValue;
                }
                if (minDate) {
                    rules.toMinDate = cleanDate(minDate);
                }
                if (maxDate) {
                    rules.toMaxDate = cleanDate(maxDate);
                }
                if (element.init) {
                    initMsgAndOldValue();
                    vmodel.label = datesDisplayFormat(options.defaultLabel, inputFromValue, inputToValue);
                    element.init = false;
                }
            }
            // 根据minDate和maxDate的设置判断给定的日期是否不可选
            function isDateDisabled(date, minDate, maxDate) {
                var time = date.getTime();
                if (minDate && time < minDate.getTime()) {
                    return true;
                } else if (maxDate && time > maxDate.getTime()) {
                    return true;
                }
                return false;
            }
            // 解析rules.rules属性，得到正确的日期值
            function calcDate(desc, date) {
                var time, re = /([+-])?(\d+)([MDY])?/g, arr, key, _date;
                desc = (desc || '').toString();
                arr = re.exec(desc);
                key = arr && (arr[1] || '+') + (arr[3] || 'D');
                time = date ? date : new Date();
                _date = new Date(typeof time === 'string' ? parseDate(time) : time);
                if (key && _c[key]) {
                    _c[key](_date, arr[2] * 1);
                }
                return _date;
            }
            function initMsgAndOldValue() {
                var inputFromValue = duplexFrom ? duplexFrom[1][duplexFrom[0]] : vmodel.inputFromValue, inputToValue = duplexTo ? duplexTo[1][duplexTo[0]] : vmodel.inputToValue;
                _oldValue = [
                    parseDate(inputFromValue),
                    parseDate(inputToValue)
                ];
                if (vmodel.label) {
                    updateMsg();
                }
            }
            // 根据选择的日期更新日历框下方的显示内容
            function updateMsg() {
                var inputFromValue = duplexFrom ? duplexFrom[1][duplexFrom[0]] : vmodel.inputFromValue, inputToValue = duplexTo ? duplexTo[1][duplexTo[0]] : vmodel.inputToValue, inputToDate = parseDate(inputToValue), msgFormat = options.opts && options.opts.msgFormat, inputFromDate = null, msg = '', day = 0;
                if (inputToValue && !inputToDate) {
                    if (duplexTo) {
                        duplexTo[1][duplexTo[0]] = '';
                    } else {
                        vmodel.inputToValue = '';
                    }
                }
                if (inputToValue && (inputFromValue || fromSelected)) {
                    inputFromDate = parseDate(inputFromValue) || fromSelected;
                    day = Math.floor((inputToDate.getTime() - inputFromDate.getTime()) / 1000 / 60 / 60 / 24 + 1);
                    if (msgFormat && typeof msgFormat === 'function') {
                        if (inputFromVM && inputToVM) {
                            msg = msgFormat(inputFromVM, inputToVM);
                        }
                    } else {
                        msg = '\u5DF2\u9009\u65F6\u95F4\u6BB5\uFF1A' + inputFromValue + ' \u81F3 ' + inputToValue + ' \u5171\u8BA1' + day + '\u5929';
                    }
                } else {
                    msg = '';
                }
                vmodel.msg = msg;
                fromSelected ? fromSelected = null : 0;
            }
            vmodel.$watch('toggle', function (val) {
                var fromOldValue = formatDate(_oldValue && _oldValue[0] || ''), toOldValue = formatDate(_oldValue && _oldValue[1] || '');
                if (!val && !_confirmClick) {
                    if (duplexTo && duplexTo[1][duplexTo[0]] != toOldValue) {
                        duplexTo[1][duplexTo[0]] = toOldValue;
                    } else if (!duplexTo && vmodel.inputToValue != toOldValue) {
                        vmodel.inputToValue = toOldValue;
                    }
                    if (duplexFrom && duplexFrom[1][duplexFrom[0]] != fromOldValue) {
                        duplexFrom[1][duplexFrom[0]] = fromOldValue;
                    } else if (!duplexFrom && vmodel.inputFromValue != fromOldValue) {
                        vmodel.inputFromValue = fromOldValue;
                    }
                } else if (_confirmClick) {
                    _confirmClick = false;
                }
                inputFromVM.toggle = val;
                inputToVM.toggle = val;
                if (val) {
                    avalon.type(vmodel.onOpen) === 'function' && vmodel.onOpen(vmodel);
                } else {
                    avalon.type(vmodel.onClose) === 'function' && vmodel.onClose(vmodel);
                }
            });
            return vmodel;
        };
    // 将日期时间转为00:00:00
    function cleanDate(date) {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        return date;
    }
    widget.version = 1;
    widget.defaults = {
        fromLabel: '\u9009\u62E9\u8D77\u59CB\u65E5\u671F',
        //@config 设置起始日期日历框的说明文字
        toLabel: '\u9009\u62E9\u7ED3\u675F\u65E5\u671F',
        //@config 设置结束日期日历框的说明文字
        /**
         * @config 设置双日历框的工作规则
            <pre class="brush:javascript;gutter:false;toolbar:false">
            {
                rules: 'null, 0D, 8D',
                fromMinDate: '2014-05-02',
                fromMaxDate: '2014-06-28',
                toMinDate: '2014-06-01',
                toMaxDate: '2014-07-12'
            }
            </pre> 
         * 可以是绑定组件时定义的配置对象中的一个rules对象，也可以是一个字符串，指向一个上述对象。
         * 其中对象中的rules属性定义结束初始日期异常时默认显示的日期、初始日期和结束日子之间最小相隔天数、最大相隔天数，格式是[+-]\d[DMY]，分别代表几天、几个月或者几年，也可以附加+或者-号，+号表示正数几天，-号表示负数几天
         * fromMinDate代表起始日期可以设置的最小日期
         * fromMaxDate代表起始日期可以设置的最大日期
         * toMinDate代表结束日期可以设置的最小日期
         * toMaxDate代表结束日期可以设置的最大日期
         */
        rules: '',
        label: '',
        //@config 模拟输入域的初始说明文字
        defaultLabel: '\u65E5\u671F\u8303\u56F4',
        //@config 选中日期之后，模拟输入域开始的说明文字
        disabled: false,
        //@config 设置是否禁用组件
        widgetElement: '',
        // accordion容器
        separator: '-',
        //@config 日期格式的分隔符，可以是"/"或者你希望的符号，但如果是除了"-"和"/"之外的字符则需要和parseDate和formatDate配合使用，以便组件能正常运作
        startDay: 1,
        //@config 设置每一周的第一天是哪天，0代表Sunday，1代表Monday，依次类推, 默认从周一开始
        dateRangeWidth: 260,
        //@config 配置日期范围框的宽度
        shortcut: false,
        //@config 是否在组件中显示日期选择快捷按钮
        /**
         * @config {Function} 打开daterangepicker的回调
         * @param vmodel {Object} 组件对应的Vmodel
         */
        onOpen: avalon.noop,
        /**
         * @config {Function} 关闭daterangepicker的回调
         * @param vmodel {Object} 组件对应的Vmodel
         */
        onClose: avalon.noop,
        /**
         * @config {Function} 点击日期范围框下方的确定按钮之后的回调
         * @param inputFromDate {String} 选择的起始日期
         * @param inputToDate {String} 选择的结束日期
         * @param oldValue {Array} 最近一次选中的起始和结束日期组成的数组
         * @param vmodel {Object} 组件对应的Vmodel
         * @param data {Object} 绑定组件元素上的data属性集合
         */
        onSelect: avalon.noop,
        /**
         * @config {Function} 将符合日期格式要求的字符串解析为date对象并返回，不符合格式的字符串返回null,用户可以根据自己需要自行配置解析过程
         * @param str {String} 需要解析的日期字符串
         * @returns {Date} 解析后的日期对象 
         */
        parseDate: function (str) {
            if (avalon.type(str) === 'date')
                return str;
            var separator = this.separator;
            var reg = '^(\\d{4})' + separator + '(\\d{1,2})' + separator + '(\\d{1,2})$';
            reg = new RegExp(reg);
            var x = str.match(reg);
            return x ? new Date(x[1], x[2] * 1 - 1, x[3]) : null;
        },
        /**
         * @config {Function} 将日期对象转换为符合要求的日期字符串
         * @param date {Date} 需要格式化的日期对象
         * @returns {String} 格式化后的日期字符串 
         */
        formatDate: function (date) {
            if (avalon.type(date) !== 'date') {
                avalon.log('the type of ' + date + 'must be Date');
                return '';
            }
            var separator = this.separator, year = date.getFullYear(), month = date.getMonth(), day = date.getDate();
            return year + separator + this.formatNum(month + 1, 2) + separator + this.formatNum(day, 2);
        },
        formatNum: function (n, length) {
            n = String(n);
            for (var i = 0, len = length - n.length; i < len; i++)
                n = '0' + n;
            return n;
        },
        /**
         * @config {Function} 配置日期范围框的显示格式
         * @param label {String} 日期范围提示文字
         * @param fromDate {String} 起始日期
         * @param toDate {String} 结束日期 
         * @returns {String} 日期范围框要显示的内容
         */
        datesDisplayFormat: function (label, fromDate, toDate) {
            if (!fromDate && !toDate) {
                return '\u4E0D\u9650\u65E5\u671F';
            }
            return label + '\uFF1A' + fromDate + ' \u81F3 ' + toDate;
        },
        getTemplate: function (str, options) {
            return str;
        }
    };
    return avalon;
}
)();
},{"../avalon.getModel":6,"../button/avalon.button":8,"./avalon.datepicker":15}],18:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<div class=\"oni-dialog-layout\"></div>\nMS_OPTION_WIDGET\n<div ms-widget=\"dialog,MS_OPTION_ID,MS_OPTION_OPTS\" ms-css-position=\"position\">MS_OPTION_DIALOG_CONTENT</div>\nMS_OPTION_INNERWRAPPER\n<div class=\"oni-dialog-inner\"></div>\nMS_OPTION_HEADER\n<div class=\"oni-dialog-header\">\n    <div class=\"oni-dialog-close\" ms-click=\"_close\" ms-if=\"showClose\">\n        <i class=\"oni-icon oni-icon-times\">&#xf003;</i>\n    </div>\n    <div class=\"oni-dialog-title\">{{ title|html }}</div>\n</div>\nMS_OPTION_CONTENT\n<div class=\"oni-dialog-content\"></div>\nMS_OPTION_FOOTER\n<div class=\"oni-dialog-footer oni-helper-clearfix\">\n    <div class=\"oni-dialog-btns\">\n        <button ms-widget=\"button\" data-button-color=\"success\" ms-hover=\"oni-state-hover\" ms-click=\"_confirm\">{{confirmName}}</button>\n        <button ms-widget=\"button\" ms-if=\"type =='confirm'\" ms-click=\"_cancel\">{{cancelName}}</button>\n    </div>\n</div>\nMS_OPTION_LAYOUT_SIMULATE\n<div></div>";
innerRequire("../button/avalon.button");
innerRequire("../draggable/avalon.draggable");

module.exports = (
function () {
    var template = sourceHTML, widgetArr = template.split('MS_OPTION_WIDGET'), _maskLayer = widgetArr[0],
        // 遮罩层html(string)
        maskLayer = avalon.parseHTML(_maskLayer).firstChild,
        // 遮罩层节点(dom node)
        maskLayerExist = false,
        // 页面不存在遮罩层就添加maskLayer节点，存在则忽略
        _maskLayerSimulate = template.split('MS_OPTION_LAYOUT_SIMULATE')[1], maskLayerSimulate = avalon.parseHTML(_maskLayerSimulate).firstChild, dialogShows = [],
        //存在层上层时由此数组判断层的个数
        dialogNum = 0,
        //保存页面dialog的数量，当dialogNum为0时，清除maskLayer
        //IE6 userAgent Mozilla/4.0(compatible;MISE 6.0;Windows NT 6.1;...)
        isIE6 = (window.navigator.userAgent || '').toLowerCase().indexOf('msie 6') !== -1, iFrame = null, body = document.compatMode && document.compatMode.toLowerCase() == 'css1compat' ? document.documentElement : document.body;
    var widget = avalon.ui.dialog = function (element, data, vmodels) {
            dialogNum++;
            var options = data.dialogOptions;
            options.type = options.type.toLowerCase();
            options.template = options.getTemplate(template, options);
            var _footerArr = options.template.split('MS_OPTION_FOOTER'), _contentArr = _footerArr[0].split('MS_OPTION_CONTENT'), _headerArr = _contentArr[0].split('MS_OPTION_HEADER'), _innerWraperArr = _headerArr[0].split('MS_OPTION_INNERWRAPPER'), _content = _contentArr[1],
                //content wrapper html
                _lastHeader = _headerArr[1],
                //header html
                _lastFooter = _footerArr[1].split('MS_OPTION_LAYOUT_SIMULATE')[0],
                //footer html
                _innerWrapper = _innerWraperArr[1],
                //inner wrapper html
                _lastContent = '',
                //dialog content html
                lastContent = '',
                //dialog content node
                $element = avalon(element), onConfirm = options.onConfirm, onConfirmVM = null, onCancel = options.onCancel, onCancelVM = null, onOpen = options.onOpen, onOpenVM = null, onClose = options.onClose, onCloseVM = null, toggleClose = true, position = isIE6 ? 'absolute' : 'fixed';
            if (typeof onConfirm === 'string') {
                onConfirmVM = avalon.getModel(onConfirm, vmodels);
                options.onConfirm = onConfirmVM && onConfirmVM[1][onConfirmVM[0]] || avalon.noop;
            }
            if (typeof onCancel === 'string') {
                onCancelVM = avalon.getModel(onCancel, vmodels);
                options.onCancel = onCancelVM && onCancelVM[1][onCancelVM[0]] || avalon.noop;
            }
            if (typeof onClose === 'string') {
                avalon.log('ms-widget=\'dialog\' data-dialog-on-close \u6B64\u7528\u6CD5\u5DF2\u7ECF\u88AB\u5E9F\u5F03');
                onCloseVM = avalon.getModel(onClose, vmodels);
                options.onClose = onCloseVM && onCloseVM[1][onCloseVM[0]] || avalon.noop;
            }
            if (typeof onOpen === 'string') {
                onOpenVM = avalon.getModel(onOpen, vmodels);
                options.onOpen = onOpenVM && onOpenVM[1][onOpenVM[0]] || avalon.noop;
            }
            _lastFooter = options.getFooter(_lastFooter, options);
            var vmodel = avalon.define(data.dialogId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'container',
                        'modal',
                        'zIndexIncrementGlobal',
                        'initChange',
                        'content'
                    ];
                    vm.widgetElement = element;
                    vm.position = position;
                    // 如果显示模式为alert或者配置了showClose为false，不显示关闭按钮
                    vm.showClose = vm.type === 'alert' ? false : vm.showClose;
                    vm.initChange = true;
                    // 点击确定按钮，根据回调返回值是否为false决定是否关闭弹窗
                    vm._confirm = function (e) {
                        if (typeof vmodel.onConfirm !== 'function') {
                            throw new Error('onConfirm\u5FC5\u987B\u662F\u4E00\u4E2A\u56DE\u8C03\u65B9\u6CD5');
                        }
                        // 在用户回调返回false时，不关闭弹窗
                        if (vmodel.onConfirm.call(e.target, e, vmodel) !== false) {
                            vmodel._close(e);
                        }
                    };
                    // 显示dialogmask
                    vm._open = function (updateZIndex) {
                        var len = 0,
                            //当前显示的dialog的个数
                            selectLength = document.getElementsByTagName('select').length, maxZIndex = vmodel.zIndex;
                        avalon.Array.ensure(dialogShows, vmodel);
                        len = dialogShows.length;
                        if (len) {
                            avalon(maskLayer).css('display', 'block');
                            avalon(maskLayerSimulate).css('display', 'block');
                        }
                        // 通过zIndex的提升来调整遮罩层，保证层上层存在时遮罩层始终在顶层dialog下面(顶层dialog zIndex-1)但是在其他dialog上面
                        maskLayer.style.zIndex = 2 * len + maxZIndex - 1;
                        maskLayerSimulate.style.zIndex = 2 * len + maxZIndex - 1;
                        element.style.zIndex = 2 * len + maxZIndex;
                        if (updateZIndex) {
                            return;
                        }
                        document.documentElement.style.overflow = 'hidden';
                        resetCenter(vmodel, element);
                        // IE6下遮罩层无法覆盖select解决办法
                        if (isIE6 && selectLength && iFrame === null && vmodel.modal) {
                            iFrame = createIframe();
                        } else if (isIE6 && selectLength && vmodel.modal) {
                            iFrame.style.display = 'block';
                            iFrame.style.width = maskLayer.style.width;
                            iFrame.style.height = maskLayer.style.height;
                            iFrame.style.zIndex = maskLayer.style.zIndex - 1;
                        }
                        vmodel.onOpen.call(element, vmodel);
                    };
                    // 隐藏dialog
                    vm._close = function (e) {
                        avalon.Array.remove(dialogShows, vm);
                        var len = dialogShows.length, maxZIndex = vmodel.zIndex, topShowDialog = len && dialogShows[len - 1];
                        if (e) {
                            toggleClose = false;
                        }
                        vmodel.toggle = false;
                        /* 处理层上层的情况，因为maskLayer公用，所以需要其以将要显示的dialog的toggle状态为准 */
                        if (topShowDialog && topShowDialog.modal) {
                            avalon(maskLayer).css('display', 'block');
                            avalon(maskLayerSimulate).css('display', 'block');
                            topShowDialog.widgetElement.style.display = 'block';
                            resetCenter(topShowDialog, topShowDialog.widgetElement);
                        } else {
                            avalon(maskLayer).css('display', 'none');
                            avalon(maskLayerSimulate).css('display', 'none');
                            if (iFrame !== null) {
                                iFrame.style.display = 'none';
                            }
                            document.documentElement.style.overflow = '';
                            vmodel.onClose.call(element, vmodel);
                            return;
                        }
                        // 重置maskLayer的z-index,当最上层的dialog关闭，通过降低遮罩层的z-index来显示紧邻其下的dialog
                        var layoutZIndex = 2 * len + maxZIndex - 1;
                        maskLayer.style.zIndex = layoutZIndex;
                        maskLayerSimulate.style.zIndex = layoutZIndex;
                        if (iFrame) {
                            iFrame.style.zIndex = layoutZIndex - 1;
                        }
                        vmodel.onClose.call(element, vmodel);
                    };
                    // 点击"取消"按钮，根据回调返回值是否为false决定是否关闭dialog
                    vm._cancel = function (e) {
                        if (typeof vmodel.onCancel != 'function') {
                            throw new Error('onCancel\u5FC5\u987B\u662F\u4E00\u4E2A\u56DE\u8C03\u65B9\u6CD5');
                        }
                        // 在用户回调返回false时，不关闭弹窗
                        if (vmodel.onCancel.call(e.target, e, vmodel) !== false) {
                            vmodel._close(e);
                        }
                    };
                    /**
         * @config {Function} 动态修改dialog的content
         * @param m {Object} 重新渲染dialog的配置对象，包括title、content、content中涉及的插值表达式，需要注意的是，title和content不是真正渲染的内容，所以不需要avalon进行扫描监控，定义的时候必须在其前面加上"$",否则组件不会渲染成想要的效果
         */
                    /**
             * @config {Function} 可以动态改变dialog的显示内容
             * @param content {String} 要替换的content，可以是已经渲染ok的view也可以是未解析渲染的模板
             * @param noScan {Boolean} 当content是模板时noScan设为false或者不设置，组件会自动解析渲染模板，如果是已经渲染ok的，将noScan设为true，组件将不再进行解析操作
             * @param contentVmodels {Array} 如果content为未解析的模板，noScan为false，contentVmodels是用来解析模板content的vmodels
             */
                    vm.setContent = function (content, noScan, contentVmodels) {
                        var scanVmodels = contentVmodels ? contentVmodels : [vmodel].concat(vmodels);
                        _lastContent = content;
                        lastContent.innerHTML = _lastContent;
                        if (!noScan) {
                            avalon.scan(lastContent, scanVmodels);
                        }
                        return vmodel;
                    };
                    // 动态修改dialog的title
                    vm.setTitle = function (title) {
                        vmodel.title = title;
                        return vmodel;
                    };
                    // 重新渲染dialog
                    vm.setModel = function (m) {
                        // 这里是为了充分利用vm._ReanderView方法，才提前设置一下element.innerHTML
                        if (!!m.$content) {
                            vmodel.setContent(m.$content, m.noScan, [vmodel].concat(findModel(m)).concat(vmodels));
                        }
                        if (!!m.$title) {
                            vmodel.title = m.$title;
                        }
                        return vmodel;
                    };
                    // 将零散的模板(dialog header、dialog content、 dialog footer、 dialog wrapper)组合成完整的dialog
                    vm._renderView = function () {
                        var innerWrapper = null;
                        // 保存innerWraper元素节点
                        // 用户只能通过data-dialog-width配置width，不可以通过ms-css-width来配置，配置了也无效
                        element.setAttribute('ms-css-width', 'width');
                        lastContent = avalon.parseHTML(_content).firstChild;
                        _lastContent = element.innerHTML || vmodel.content;
                        element.innerHTML = '';
                        lastContent.innerHTML = _lastContent;
                        innerWrapper = avalon.parseHTML(_innerWrapper).firstChild;
                        innerWrapper.innerHTML = _lastHeader;
                        innerWrapper.appendChild(lastContent);
                        innerWrapper.appendChild(avalon.parseHTML(_lastFooter));
                        element.appendChild(innerWrapper);
                        if (!maskLayerExist) {
                            document.body.appendChild(maskLayer);
                            document.body.appendChild(maskLayerSimulate);
                            maskLayerExist = true;
                        }
                    };
                    vm.$init = function (continueScan) {
                        var container = vmodel.container, clientHeight = body.clientHeight, docBody = document.body,
                            // container必须是dom tree中某个元素节点对象或者元素的id，默认将dialog添加到body元素
                            elementParent = (avalon.type(container) === 'object' && container.nodeType === 1 && docBody.contains(container) ? container : document.getElementById(container)) || docBody, defaults = avalon.ui.dialog.defaults;
                        if (!defaults.zIndex) {
                            defaults.zIndex = getMaxZIndex()    //保存body直接子元素中最大的z-index值， 保证dialog在最上层显示
;
                        }
                        if (avalon(docBody).height() < clientHeight) {
                            avalon(docBody).css('min-height', clientHeight);
                        }
                        if (vmodel.draggable) {
                            $element.attr('ms-draggable', '');
                            vmodel.draggable = {
                                handle: function (e) {
                                    var el = e.target;
                                    do {
                                        if (el.className === 'oni-dialog-header') {
                                            return el;
                                        }
                                        if (el.className === 'oni-dialog') {
                                            return;
                                        }
                                    } while (el = el.parentNode);
                                }
                            };
                        }
                        vmodel.zIndex = vmodel.zIndex + vmodel.zIndexIncrementGlobal;
                        vmodel.title = vmodel.title || '&nbsp;';
                        $element.addClass('oni-dialog');
                        element.setAttribute('ms-visible', 'toggle');
                        element.setAttribute('ms-css-position', 'position');
                        vm._renderView();
                        if (docBody.contains(maskLayerSimulate) && docBody == elementParent) {
                            maskLayerSimulate.appendChild(element);
                        } else {
                            elementParent.appendChild(element);
                        }
                        // 当窗口尺寸发生变化时重新调整dialog的位置，始终使其水平垂直居中
                        element.resizeCallback = avalon(window).bind('resize', throttle(resetCenter, 50, 100, [
                            vmodel,
                            element
                        ]));
                        element.scrollCallback = avalon(window).bind('scroll', throttle(resetCenter, 50, 100, [
                            vmodel,
                            element,
                            true
                        ]));
                        avalon.scan(element, [vmodel].concat(vmodels));
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    // 自动清理方法
                    vm.$remove = function () {
                        dialogNum--;
                        element.innerHTML = '';
                        avalon.unbind(window, 'resize', element.resizeCallback);
                        avalon.unbind(window, 'scroll', element.scrollCallback);
                        if (!dialogNum) {
                            maskLayer.parentNode.removeChild(maskLayer);
                            maskLayer.parentNode.removeChild(maskLayerSimulate);
                            maskLayerExist = false;
                        }
                    };
                    // 打开dialog之后处理zIndex使dialog正常显示
                    vm.$watch('toggle', function (val) {
                        if (val) {
                            vmodel._open();
                        } else {
                            if (toggleClose === false) {
                                toggleClose = true;
                            } else {
                                vmodel._close();
                            }
                        }
                    });
                    // 可以手动设置最大zIndex
                    vm.$watch('zIndex', function (val) {
                        if (vmodel.initChange) {
                            vmodel.initChange = false;
                        } else {
                            vmodel._open(true);
                        }
                    });
                });
            return vmodel;
        };
    widget.version = 1;
    widget.defaults = {
        width: 480,
        //@config 设置dialog的width
        title: '&nbsp;',
        //@config 设置弹窗的标题
        draggable: false,
        //@config 设置dialog是否可拖动
        type: 'confirm',
        //@config 配置弹窗的类型，可以配置为alert来模拟浏览器
        content: '',
        //@config 配置dialog的content，默认取dialog的innerHTML作为dialog的content，如果innerHTML为空，再去取content配置项.需要注意的是：content只在初始化配置的起作用，之后需要通过setContent来动态的修改
        /**
         * @config {Function} 定义点击"确定"按钮后的回调操作
         * @param event {Number} 事件对象
         * @param vmodel {Object} 组件对应的Vmodel
         * @returns {Boolean} 如果return false，dialog不会关闭，用于异步操作
         */
        onConfirm: avalon.noop,
        /**
         * @config {Function} 定义显示dialog时的回调
         * @param vmodel {Object} 组件对应的Vmodel
         */
        onOpen: avalon.noop,
        /**
         * @config {Function} 定义点击"取消"按钮后的回调操作
         * @param event {Object} 事件对象
         * @param vmodel {Object} 组件对应的Vmodel
         * @returns {Boolean} 如果return false，dialog不会关闭，用于异步操作
         */
        onCancel: avalon.noop,
        /**
         * @config {Function} 定义点击"关闭"按钮后的回调操作
         * @param event {Object} 事件对象
         * @param vmodel {Object} 组件对应的Vmodel
         */
        onClose: avalon.noop,
        //点击右上角的“关闭”按钮的回调
        //@config 动态修改dialog的title,也可通过dialogVM.title直接修改
        setTitle: avalon.noop,
        setContent: avalon.noop,
        /**
         * @config {Function} 重新渲染模板
         * @param m {Object} 重新渲染dialog的配置对象，包括title、content、content中涉及的插值表达式，需要注意的是，title和content不是真正渲染的内容，所以不需要avalon进行扫描监控，定义的时候必须在其前面加上"$",否则组件不会渲染成想要的效果
         */
        setModel: avalon.noop,
        //@config配置dialog是否显示"取消"按钮，但是如果type为alert，不论showClose为true or false都不会显示"取消"按钮
        showClose: true,
        toggle: false,
        //@config 通过此属性的决定dialog的显示或者隐藏状态
        widgetElement: '',
        //@config 保存对绑定元素的引用
        container: 'body',
        //@config dialog元素的上下文父元素，container必须是dialog要appendTo的父元素的id或者元素dom对象
        confirmName: '\u786E\u5B9A',
        //@config 配置dialog的"确定"按钮的显示文字
        cancelName: '\u53D6\u6D88',
        //@config 配置dialog的"取消"按钮的显示文字
        getTemplate: function (str, options) {
            return str;
        },
        /**
         * @config {Function} 通过此方法配置dialog的footer
         * @param tmp {String} dialog默认模板的footer
         * @returns {String} 用户自定义的dialog的footer 
         */
        getFooter: function (tmp) {
            return tmp;
        },
        modal: true,
        //@config 是否显示遮罩
        zIndex: 0,
        //@config 通过设置vmodel的zIndex来改变dialog的z-index,默认是body直接子元素中的最大z-index值，如果都没有设置就默认的为10
        zIndexIncrementGlobal: 0    //@config 相对于zIndex的增量, 用于全局配置，如果只是作用于单个dialog那么zIndex的配置已足够，设置全局需要通过avalon.ui.dialog.defaults.zIndexIncrementGlobal = Number来设置
    };
    avalon(window).bind('keydown', function (e) {
        var keyCode = e.which, dialogShowLen = dialogShows.length;
        if (keyCode === 27 && dialogShowLen) {
            dialogShows[dialogShowLen - 1].toggle = false;
        }
    });
    // 获取重新渲染dialog的vmodel对象
    function findModel(m) {
        var model = m;
        if (model) {
            // 如果m为字符串参数，说明是要在已存在的vmodels中查找对应id的vmodel
            if (avalon.type(model) === 'string') {
                model = avalon.vmodels[model];
            }
        } else {
            // 如果没有传递参数m，则返回空vmodel
            model = avalon.define('dialogVM' + setTimeout('1'), function (vm) {
            });
        }
        if (!model) {
            throw new Error('\u60A8\u67E5\u627E\u7684' + model + '\u4E0D\u5B58\u5728');
        }
        // 如果传入的是avalon的vmodel格式的参数对象，直接返回，如果是普通的对象，将其转换为avalon的监控对象
        if (avalon.isPlainObject(model) && !model.$id && !model.$accessors) {
            model = avalon.define('dialogVM' + setTimeout('1'), function (vm) {
                avalon.mix(vm, m);
            });
        }
        return [].concat(model);
    }
    // resize、scroll等频繁触发页面回流的操作要进行函数节流
    function throttle(fn, delay, mustRunDelay, args) {
        var timer = null;
        var t_start;
        return function () {
            var context = this, t_curr = +new Date();
            clearTimeout(timer);
            if (!t_start) {
                t_start = t_curr;
            }
            if (t_curr - t_start >= mustRunDelay) {
                fn.apply(context, args);
                t_start = t_curr;
            } else {
                timer = setTimeout(function () {
                    fn.apply(context, args);
                }, delay);
            }
        };
    }
    // 使dialog始终出现在视窗中间
    function resetCenter(vmodel, target, scroll) {
        var clientWidth, clientHeight, targetOffsetWidth, targetOffsetHeight, $maskLayer = avalon(maskLayer), $maskLayerSimulate = avalon(maskLayerSimulate), $target = avalon(target), scrollTop, scrollLeft, documentElement, top = 0, left = 0;
        if (!vmodel.toggle)
            return;
        documentElement = document.compatMode && document.compatMode.toLowerCase() == 'css1compat' ? document.documentElement : document.body;
        // clientWidth和clientHeight在现有浏览器都是兼容的(IE5),但在混杂模式下，得通过documentView属性提供宽度和高度
        clientWidth = document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body.clientWidth;
        clientHeight = document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight;
        scrollTop = document.body.scrollTop + document.documentElement.scrollTop;
        scrollLeft = documentElement.scrollLeft;
        targetOffsetWidth = target.offsetWidth;
        targetOffsetHeight = target.offsetHeight;
        if (targetOffsetHeight < clientHeight) {
            top = (clientHeight - targetOffsetHeight) / 2;
        } else {
            top = 0;
        }
        if (targetOffsetWidth < clientWidth) {
            left = (clientWidth - targetOffsetWidth) / 2 + scrollLeft;
        } else {
            left = 0;
        }
        if (targetOffsetHeight < clientHeight && targetOffsetWidth < clientWidth) {
            if (!isIE6) {
                vmodel.position = 'fixed';
            }
        } else {
            if (!isIE6) {
                vmodel.position = 'absolute';
            }
        }
        if (scroll && vmodel.position == 'fixed')
            return;
        if (vmodel.position === 'absolute') {
            if (dialogShows.length > 1) {
                for (var i = 0; i < dialogShows.length - 1; i++) {
                    dialogShows[i].widgetElement.style.display = 'none';
                }
            }
            $maskLayer.css({
                height: clientHeight,
                width: clientWidth,
                top: scrollTop,
                position: 'absolute'
            });
            $maskLayerSimulate.css({
                height: clientHeight,
                width: clientWidth,
                top: scrollTop,
                overflow: 'auto',
                position: 'absolute'
            });
        } else {
            if (dialogShows.length > 1) {
                for (var i = 0; i < dialogShows.length - 1; i++) {
                    dialogShows[i].widgetElement.style.display = 'block';
                }
            }
            $maskLayer.css({
                height: 'auto',
                width: 'auto',
                top: 0,
                position: 'fixed'
            });
            $maskLayerSimulate.css({
                height: 'auto',
                width: 'auto',
                top: 0,
                position: 'static'
            });
        }
        $target.css({
            left: left,
            top: top
        });
    }
    // 获取body子元素最大的z-index
    function getMaxZIndex() {
        var children = document.body.children, maxIndex = 10,
            //当body子元素都未设置zIndex时，默认取10
            zIndex;
        for (var i = 0, el; el = children[i++];) {
            if (el.nodeType === 1) {
                if (el === maskLayer)
                    continue;
                zIndex = ~~avalon(el).css('z-index');
                if (zIndex) {
                    maxIndex = Math.max(maxIndex, zIndex);
                }
            }
        }
        return maxIndex + 1;
    }
    // IE6下创建iframe遮住不能被遮罩层遮住的select
    function createIframe() {
        var iframe = document.createElement('<iframe src="javascript:\'\'" style="position:absolute;top:0;left:0;bottom:0;margin:0;padding:0;right:0;zoom:1;width:' + maskLayer.style.width + ';height:' + maskLayer.style.height + ';z-index:' + (maskLayer.style.zIndex - 1) + ';"></iframe>');
        document.body.appendChild(iframe);
        return iframe;
    }
    return avalon;
}
)();
},{"../avalon.getModel":6,"../button/avalon.button":8,"../draggable/avalon.draggable":20}],19:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-doublelist oni-helper-reset oni-helper-clearfix oni-widget oni-helper-noselect\"\n\t ms-visible=\"toggle\">\n\t<div class=\"oni-doublelist-data oni-doublelist-menu oni-widget-content\" ms-widget=\"scrollbar,$left{{MS_OPTION_ID}}\">\n\t\t<ul class=\"oni-helper-reset oni-scrollbar-scroller\" ms-each-item=\"data\" data-each-rendered=\"updateScrollbar\">\n\t\t{{MS_OPTION_DATA}}\n\t\t</ul>\n\t</div>\n\t<div class=\"oni-doublelist-option\">\n\t\t<div class=\"oni-dbl-button\" ms-click=\"_update($event,'add')\" \n\t\t\tms-class-101=\"oni-state-disabled:dataTmpSelect.size()==0\">\n\t\t\t<span>&nbsp;添加&nbsp;&gt;</span>\n\t\t</div>\n\t\t<div class=\"oni-dbl-button\" ms-click=\"_update($event,'delete')\" \n\t\t\tms-class-101=\"oni-state-disabled:selectTmpSelect.size()==0\">\n\t\t\t<span>&lt;&nbsp;删除&nbsp;</span>\n\t\t</div>\n\t</div>\n\t<div class=\"oni-doublelist-select oni-doublelist-menu oni-widget-content\" ms-widget=\"scrollbar,$right{{MS_OPTION_ID}}\">\n\t\t<ul class=\"oni-helper-reset oni-scrollbar-scroller\" ms-each-item=\"_selectData\" data-each-rendered=\"updateScrollbar\">\n\t\t\t{{MS_OPTION_SELECT}}\n\t\t</ul>\n\t</div>\n</div>",
dataTpl = "<li class=\"oni-doublelist-item\" ms-class=\"oni-state-disabled:_itemSelected(item,'{{MS_OPTION_TYPE}}')\" \nms-data-value=\"item.value\" \nms-data-name=\"item.name\" \nms-hover=\"oni-state-hover\" \nms-class-1=\"oni-state-active:_activeClass(item,'{{MS_OPTION_TYPE}}')\" \nms-class-2=\"oni-helper-hidden:_itemShow(item,'{{MS_OPTION_TYPE}}')\" \nms-click=\"_select($event, item,'{{MS_OPTION_TYPE}}')\" \nms-dblclick=\"_select($event, item,'{{MS_OPTION_TYPE}}', 'dbclick')\"  \nms-attr-id=\"'{{MS_OPTION_TYPE}}'+item.value+$uid\">\n\t{{ item.name | html }}\n</li>";
innerRequire("../scrollbar/avalon.scrollbar");

module.exports = (
function () {
    var widget = avalon.ui.doublelist = function (element, data, vmodels) {
            var options = data.doublelistOptions;
            //方便用户对原始模板进行修改,提高定制性
            options.template = options.getTemplate(template, options);
            var vmodel = avalon.define(data.doublelistId, function (vm) {
                    vm.data = [];
                    //@config 配置左侧待选项列表，数据 [{value: xxx, name: xx}]
                    vm.select = [];
                    //@config 选中的value list，[value1,value2]，取的是data 里面item的value
                    vm._selectData = [];
                    vm.dataTmpSelect = [];
                    vm.selectTmpSelect = [];
                    vm.$changeCBS = [];
                    avalon.mix(vm, options);
                    if (vm.change != avalon.noop && vm.onChange == avalon.noop) {
                        vm.onChange = vm.change;
                    }
                    vm.widgetElement = element;
                    vm.rootElement = '';
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'rootElement'
                    ];
                    var inited, id = +new Date();
                    vm.$uid = id;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        var dataTemplate = vmodel._getTemplate('data'), selectTemplate = vmodel._getTemplate('select');
                        vmodel.template = vmodel.template.replace(/\{\{MS_OPTION_SELECT\}\}/g, selectTemplate).replace(/\{\{MS_OPTION_DATA\}\}/g, dataTemplate).replace(/\{\{MS_OPTION_ID\}\}/g, id);
                        element.innerHTML = vmodel.template;
                        vmodel.rootElement = element.getElementsByTagName('*')[0];
                        vmodel._getSelect();
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('\u8BF7\u5C3D\u5FEB\u5347\u5230avalon1.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            // callback after inited
                            if (typeof options.onInit === 'function') {
                                //vmodels是不包括vmodel的
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                    vm._getTemplate = function (tplName) {
                        var sourceTpl = template;
                        if (tplName === 'data') {
                            sourceTpl = dataTpl.replace(/\{\{MS_OPTION_TYPE\}\}/g, 'data');
                        } else if (tplName === 'select') {
                            sourceTpl = dataTpl.replace(/\{\{MS_OPTION_TYPE\}\}/g, 'select');
                        }
                        return vmodel.getTemplate(sourceTpl, options, tplName);
                    };
                    vm._itemSelected = function (item, type) {
                        for (var i = 0, len = vmodel.select; i < len; i++) {
                            if (vmodel.select[i] == item.value)
                                return true && type == 'data';
                        }
                        return false;
                    };
                    vm._itemShow = function (item, type) {
                        return vmodel.hideSelect && vmodel._itemSelected(item, type);
                    };
                    vm._getSelect = function () {
                        vmodel._selectData = [];
                        avalon.each(vmodel.select, function (i, item) {
                            avalon.each(vmodel.data, function (si, sitem) {
                                if (item == sitem.value)
                                    vmodel._selectData.push(sitem);
                            });
                            var ele = avalon(document.getElementById('data' + item + vmodel.$uid));
                            // 重置样式
                            ele.removeClass('oni-state-active').addClass('oni-state-disabled');
                            if (vmodel.hideSelect)
                                ele.addClass('oni-helper-hidden');
                        });
                    };
                    vm.updateScrollbar = function () {
                        // 更新滚动区域
                        avalon.vmodels['$left' + vmodel.$uid] && avalon.vmodels['$left' + vmodel.$uid].update();
                        avalon.vmodels['$right' + vmodel.$uid] && avalon.vmodels['$right' + vmodel.$uid].update();
                    };
                    vm._removeFrom = function (v, isSelected) {
                        var tar = isSelected ? vmodel.selectTmpSelect : vmodel.dataTmpSelect;
                        for (var i = 0, len = tar.length; i < len; i++) {
                            if (v == tar[i]) {
                                tar.splice(i, 1);
                                break;
                            }
                        }
                    };
                    // 响应点击事件
                    vm._select = function (e, item, type, isdblClick) {
                        var ele = avalon(this), data = ele.data();
                        e.preventDefault();
                        if (ele.hasClass('oni-state-disabled'))
                            return;
                        // 选中区域的点击
                        if (type == 'select') {
                            if (ele.hasClass('oni-state-active')) {
                                ele.removeClass('oni-state-active');
                                vmodel._removeFrom(data.value, 'fromSelected');
                            } else if (!ele.hasClass('oni-state-disabled')) {
                                // in case of duplication push
                                for (var i = 0, len = vmodel.selectTmpSelect.length; i < len; i++) {
                                    if (vmodel.selectTmpSelect[i] == data.value)
                                        return;
                                }
                                ele.addClass('oni-state-active');
                                vmodel.selectTmpSelect.push(data.value);
                            }
                            // 双击
                            if (isdblClick) {
                                if (!vmodel.countLimit(vmodel.select, 'delete', 1))
                                    return;
                                for (var i = 0, len = vmodel.select.length; i < len; i++) {
                                    if (vmodel.select[i] == data.value) {
                                        vmodel.select.removeAt(i);
                                        vmodel._removeFrom(data.value, 'fromSelected');
                                        vmodel.selectTmpSelect.clear();
                                        vmodel._getSelect();
                                        return;
                                    }
                                }
                            }
                        } else {
                            // 待选区域的点击
                            if (ele.hasClass('oni-state-active')) {
                                ele.removeClass('oni-state-active');
                                vmodel._removeFrom(data.value);
                            } else if (!ele.hasClass('oni-state-disabled')) {
                                // in case of duplication push
                                for (var i = 0, len = vmodel.dataTmpSelect.length; i < len; i++) {
                                    if (vmodel.dataTmpSelect[i] == data.value)
                                        return;
                                }
                                ele.addClass('oni-state-active');
                                vmodel.dataTmpSelect.push(data.value);
                            }
                            if (isdblClick) {
                                // 新增，避免重复
                                if (!vmodel.countLimit(vmodel.select, 'add', 1))
                                    return;
                                for (var i = 0, len = vmodel.select.length; i < len; i++) {
                                    if (vmodel.select[i] == data.value) {
                                        return;
                                    }
                                }
                                vmodel.select.push(data.value);
                                vmodel._removeFrom(data.value);
                                vmodel.selectTmpSelect.clear();
                                vmodel._getSelect();
                            }
                        }
                    };
                    // 更新状态
                    vm._update = function ($event, addOrDelete) {
                        var tar = addOrDelete === 'delete' ? vmodel.selectTmpSelect : vmodel.dataTmpSelect;
                        if (tar.length == 0)
                            return;
                        if (!vmodel.countLimit(vmodel.select, addOrDelete, tar.length))
                            return;
                        if (addOrDelete === 'delete') {
                            for (var i = 0, len = tar.length; i < len; i++) {
                                for (var j = 0, jlen = vmodel.select.length; j < jlen; j++) {
                                    if (vmodel.select[j] == tar[i]) {
                                        vmodel.select.splice(j, 1);
                                        break;
                                    }
                                }
                            }
                        } else {
                            for (var i = 0, len = tar.length; i < len; i++) {
                                vmodel.select.push(tar[i]);
                            }
                        }
                        vmodel.selectTmpSelect.clear();
                        vmodel.dataTmpSelect.clear();
                        vmodel._getSelect();
                    };
                    vm._activeClass = function (item, type) {
                        var arr = type === 'data' ? vmodel.dataTemplate : vmodel.selectTmpSelect;
                        for (var i = 0, len = arr.length; i < len; i++) {
                            if (item.value == arr[i])
                                return true;
                        }
                    };
                    //@interface reset(data, select) 重置，用新的data和select渲染，如果!data为真，则不修改左侧list；如果select为空或者空数组，则清空已选，否则将select中的项目置为已选
                    vm.reset = function (data, select) {
                        if (data) {
                            if (data.length == vmodel.data.length && data != vmodel.data) {
                                vmodel.data.clear();
                                vmodel.data = data;
                            }
                            vmodel.data = data;
                        }
                        if (select) {
                            if (select.length == vmodel.select.length && select != vmodel.select) {
                                vm.select.clear();
                            }
                            vm.select = select;
                        }
                        vmodel.selectTmpSelect.clear();
                        vmodel.dataTmpSelect.clear();
                        vmodel._getSelect();
                    };
                });
            // change
            vmodel.select.$watch('length', function (newValue, oldValue) {
                vmodel.onChange && vmodel.onChange(newValue, oldValue, vmodel);
                avalon.each(vmodel.$changeCBS, function (i, item) {
                    item(newValue, oldValue, vmodel);
                });
            });
            return vmodel;
        };
    widget.defaults = {
        toggle: true,
        //@config 组件是否显示，可以通过设置为false来隐藏组件
        hideSelect: false,
        //@config 是否隐藏以选中的项目，默认不隐藏
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        getTemplate: function (tmpl, opts, tplName) {
            return tmpl;
        },
        //@config getTemplate(tpl, opts) 定制修改模板接口
        countLimit: function (select) {
            return true;
        },
        //@config countLimit(select) 选择条目限制，必须有return true or false，参数是当前已选中条数和add or delete操作
        // select:[],//@config 选中的value list，[value1,value2]，取的是data 里面item的value
        // data:[],//@config 配置左侧待选项列表，数据 [{value: xxx, name: xx}]
        // $changeCBS: [],
        change: avalon.noop,
        //@config change(newValue, oldValue, vmodel) 所选变化的回调，不建议使用，等价于onChange
        onChange: avalon.noop,
        //@config onChange(newValue, oldValue, vmodel) 所选变化的对调，同change，第一、二个参数分别是数组变化前后的长度
        $author: 'skipper@123'
    };
}
)();
},{"../scrollbar/avalon.scrollbar":52,"avalon":2}],20:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var defaults = {
            ghosting: false,
            //是否影子拖动，动态生成一个元素，拖动此元素，当拖动结束时，让原元素到达此元素的位置上,
            delay: 0,
            axis: 'xy',
            started: true,
            start: avalon.noop,
            beforeStart: avalon.noop,
            drag: avalon.noop,
            beforeStop: avalon.noop,
            stop: avalon.noop,
            scrollPlugin: true,
            scrollSensitivity: 20,
            scrollSpeed: 20
        };
    var styleEl = document.getElementById('avalonStyle');
    //拖动时禁止文字被选中，禁止图片被拖动
    var cssText = '.ui-helper-global-drag *{ -webkit-touch-callout: none;' + '-khtml-user-select: none;' + '-moz-user-select: none;' + '-ms-user-select: none;' + 'user-select: none;}' + '.ui-helper-global-drag img{-webkit-user-drag:none; ' + 'pointer-events:none;}';
    try {
        styleEl.innerHTML += cssText;
    } catch (e) {
        styleEl.styleSheet.cssText += cssText;
    }
    var body;
    var ua = navigator.userAgent;
    var isAndroid = /Android/i.test(ua);
    var isBlackBerry = /BlackBerry/i.test(ua);
    var isWindowPhone = /IEMobile/i.test(ua);
    var isIOS = /iPhone|iPad|iPod/i.test(ua);
    var isMobile = isAndroid || isBlackBerry || isWindowPhone || isIOS;
    if (!isMobile) {
        var dragstart = 'mousedown';
        var drag = 'mousemove';
        var dragstop = 'mouseup';
    } else {
        dragstart = 'touchstart';
        drag = 'touchmove';
        dragstop = 'touchend';
    }
    var draggable = avalon.bindingHandlers.draggable = function (data, vmodels) {
            var args = data.value.match(avalon.rword) || [];
            var ID = args[0] || '$';
            var opts = args[1] || 'draggable';
            var model, vmOptions;
            if (ID != '$') {
                model = avalon.vmodels[ID];
                //如果指定了此VM的ID
                if (!model) {
                    return;
                }
            }
            data.element.removeAttribute('ms-draggable');
            if (!model) {
                //如果使用$或绑定值为空，那么就默认取最近一个VM，没有拉倒
                model = vmodels.length ? vmodels[0] : null;
            }
            var fnObj = model || {};
            if (model && typeof model[opts] === 'object') {
                //如果指定了配置对象，并且有VM
                vmOptions = model[opts];
                if (vmOptions.$model) {
                    vmOptions = vmOptions.$model;
                }
                fnObj = vmOptions;
            }
            var element = data.element;
            var $element = avalon(element);
            var options = avalon.mix({}, defaults, vmOptions || {}, data[opts] || {}, avalon.getWidgetData(element, 'draggable'));
            //修正drag,stop为函数
            'drag,stop,start,beforeStart,beforeStop'.replace(avalon.rword, function (name) {
                var method = options[name];
                if (typeof method === 'string') {
                    if (typeof fnObj[method] === 'function') {
                        options[name] = fnObj[method];
                    }
                }
            });
            if (options.axis !== '' && !/^(x|y|xy)$/.test(options.axis)) {
                options.axis = 'xy';
            }
            body = document.body;
            //因为到这里时，肯定已经domReady
            $element.bind(dragstart, function (e) {
                var data = avalon.mix({}, options, {
                        element: element,
                        $element: $element,
                        pageX: getPosition(e, 'X'),
                        //相对于页面的坐标, 会改动
                        pageY: getPosition(e, 'Y'),
                        //相对于页面的坐标，会改动
                        marginLeft: parseFloat($element.css('marginLeft')) || 0,
                        marginTop: parseFloat($element.css('marginTop')) || 0
                    });
                data.startPageX = data.pageX;
                //一次拖放只赋值一次
                data.startPageY = data.pageY;
                //一次拖放只赋值一次
                options.axis.replace(/./g, function (a) {
                    data['drag' + a.toUpperCase()] = true;
                });
                if (!data.dragX && !data.dragY) {
                    data.started = false;
                }
                //在处理手柄拖动前做些事情
                if (typeof options.beforeStart === 'function') {
                    options.beforeStart.call(data.element, e, data);
                }
                if (data.handle && fnObj) {
                    // 实现手柄拖动
                    var handle = fnObj[data.handle];
                    handle = typeof handle === 'function' ? handle : data.handle;
                    if (typeof handle === 'function') {
                        var checked = handle.call(element, e, data);
                        //要求返回一节点
                        if (checked && checked.nodeType === 1) {
                            if (!element.contains(checked)) {
                                return;    // 不能返回 false，这会阻止文本被选择
                            }
                        } else {
                            return;
                        }
                    }
                }
                fixUserSelect();
                var position = $element.css('position');
                //如果原元素没有被定位
                if (!/^(?:r|a|f)/.test(position)) {
                    element.style.position = 'relative';
                    element.style.top = '0px';
                    element.style.left = '0px';
                }
                if (options.delay && isFinite(options.delay)) {
                    data.started = false;
                    setTimeout(function () {
                        data.started = true;
                    }, options.delay);
                }
                var startOffset = $element.offset();
                if (options.ghosting) {
                    var clone = element.cloneNode(true);
                    avalon(clone).css('opacity', 0.7).width(element.offsetWidth).height(element.offsetHeight);
                    data.clone = clone;
                    if (position !== 'fixed') {
                        clone.style.position = 'absolute';
                        clone.style.top = startOffset.top - data.marginTop + 'px';
                        clone.style.left = startOffset.left - data.marginLeft + 'px';
                    }
                    body.appendChild(clone);
                }
                var target = avalon(data.clone || data.element);
                //拖动前相对于offsetParent的坐标
                data.startLeft = parseFloat(target.css('left'));
                data.startTop = parseFloat(target.css('top'));
                //拖动后相对于offsetParent的坐标
                //如果是影子拖动，代理元素是绝对定位时，它与原元素的top, left是不一致的，因此当结束拖放时，不能直接将改变量赋给原元素
                data.endLeft = parseFloat($element.css('left')) - data.startLeft;
                data.endTop = parseFloat($element.css('top')) - data.startTop;
                data.clickX = data.pageX - startOffset.left;
                //鼠标点击的位置与目标元素左上角的距离
                data.clickY = data.pageY - startOffset.top;
                //鼠标点击的位置与目标元素左上角的距离
                setContainment(options, data);
                //修正containment
                draggable.dragData = data;
                //决定有东西在拖动
                'start,drag,beforeStop,stop'.replace(avalon.rword, function (name) {
                    //console.log(options[name])
                    draggable[name] = [options[name]];
                });
                draggable.plugin.call('start', e, data);
            });
        };
    var xy2prop = {
            'X': 'Left',
            'Y': 'Top'
        };
    //插件系统
    draggable.dragData = {};
    draggable.start = [];
    draggable.drag = [];
    draggable.stop = [];
    draggable.beforeStop = [];
    draggable.plugin = {
        add: function (name, set) {
            for (var i in set) {
                var fn = set[i];
                if (typeof fn === 'function' && Array.isArray(draggable[i])) {
                    fn.isPlugin = true;
                    fn.pluginName = name + 'Plugin';
                    draggable[i].push(fn);
                }
            }
        },
        call: function (name, e, data) {
            var array = draggable[name];
            if (Array.isArray(array)) {
                array.forEach(function (fn) {
                    //用户回调总会执行，插件要看情况
                    if (typeof fn.pluginName === 'undefined' ? true : data[fn.pluginName]) {
                        fn.call(data.element, e, data);
                    }
                });
            }
            if (name === 'stop') {
                for (var i in draggable) {
                    array = draggable[i];
                    if (Array.isArray(array)) {
                        array.forEach(function (fn) {
                            if (!fn.isPlugin) {
                                // 用户回调都是一次性的，插件的方法永远放在列队中
                                avalon.Array.remove(array, fn);
                            }
                        });
                    }
                }
            }
        }
    };
    //统一处理拖动的事件
    var lockTime = new Date() - 0, minTime = document.querySelector ? 12 : 30;
    avalon(document).bind(drag, function (e) {
        var time = new Date() - lockTime;
        if (time > minTime) {
            //减少调用次数，防止卡死IE6-8
            lockTime = time;
            var data = draggable.dragData;
            if (data.started === true) {
                //fix touchmove bug;  
                //IE 在 img 上拖动时默认不能拖动（不触发 mousemove，mouseup 事件，mouseup 后接着触发 mousemove ...）
                //防止 html5 draggable 元素的拖放默认行为 (选中文字拖放)
                e.preventDefault();
                //使用document.selection.empty()来清除选择，会导致捕获失败 
                var element = data.clone || data.element;
                setPosition(e, element, data, 'X');
                setPosition(e, element, data, 'Y');
                draggable.plugin.call('drag', e, data);
            }
        }
    });
    //统一处理拖动结束的事件
    avalon(document).bind(dragstop, function (e) {
        var data = draggable.dragData;
        if (data.started === true) {
            restoreUserSelect();
            var element = data.element;
            draggable.plugin.call('beforeStop', e, data);
            if (data.dragX) {
                setPosition(e, element, data, 'X', true);
            }
            if (data.dragY) {
                setPosition(e, element, data, 'Y', true);
            }
            if (data.clone) {
                body.removeChild(data.clone);
            }
            draggable.plugin.call('stop', e, data);
            draggable.dragData = {};
        }
    });
    function getPosition(e, pos) {
        var page = 'page' + pos;
        return isMobile ? e.changedTouches[0][page] : e[page];
    }
    function setPosition(e, element, data, pos, end) {
        var page = getPosition(e, pos);
        if (data.containment) {
            var min = pos === 'X' ? data.containment[0] : data.containment[1];
            var max = pos === 'X' ? data.containment[2] : data.containment[3];
            var check = page - (pos === 'X' ? data.clickX : data.clickY);
            if (check < min) {
                page += Math.abs(min - check);
            } else if (check > max) {
                page -= Math.abs(max - check);
            }
        }
        data['page' + pos] = page;
        //重设pageX, pageY
        var Prop = xy2prop[pos];
        var prop = Prop.toLowerCase();
        var number = data['start' + Prop] + page - data['startPage' + pos] + (end ? data['end' + Prop] : 0);
        data[prop] = number;
        if (data['drag' + pos]) {
            //保存top, left
            element.style[prop] = number + 'px';
        }
    }
    var rootElement = document.documentElement;
    var fixUserSelect = function () {
        avalon(rootElement).addClass('ui-helper-global-drag');
    };
    var restoreUserSelect = function () {
        avalon(rootElement).removeClass('ui-helper-global-drag');
    };
    if (window.VBArray && !('msUserSelect' in rootElement.style)) {
        var _ieSelectBack;
        //fix IE6789
        function returnFalse() {
            var e = window.event || {};
            e.returnValue = false;
        }
        fixUserSelect = function () {
            _ieSelectBack = body.onselectstart;
            body.onselectstart = returnFalse;
        };
        restoreUserSelect = function () {
            body.onselectstart = _ieSelectBack;
        };
    }
    function setContainment(o, data) {
        if (!o.containment) {
            if (Array.isArray(data.containment)) {
                return;
            }
            data.containment = null;
            return;
        }
        var elemWidth = data.$element.width();
        var elemHeight = data.$element.height();
        if (o.containment === 'window') {
            var $window = avalon(window);
            //左， 上， 右， 下
            data.containment = [
                $window.scrollLeft(),
                $window.scrollTop(),
                $window.scrollLeft() + $window.width() - data.marginLeft - elemWidth,
                $window.scrollTop() + $window.height() - data.marginTop - elemHeight
            ];
            return;
        }
        if (o.containment === 'document') {
            data.containment = [
                0,
                0,
                avalon(document).width() - data.marginLeft,
                avalon(document).height() - data.marginTop
            ];
            return;
        }
        if (Array.isArray(o.containment)) {
            var a = o.containment;
            data.containment = [
                a[0],
                a[1],
                a[2] - elemWidth,
                a[3] - elemHeight
            ];
            return;
        }
        if (o.containment === 'parent' || o.containment.charAt(0) === '#') {
            var elem;
            if (o.containment === 'parent') {
                elem = data.element.parentNode;
            } else {
                elem = document.getElementById(o.containment.slice(1));
            }
            if (elem) {
                var $offset = avalon(elem).offset();
                data.containment = [
                    $offset.left + data.marginLeft,
                    //如果元素设置了marginLeft，设置左边界时需要考虑它 
                    $offset.top + data.marginTop,
                    $offset.left + elem.offsetWidth - data.marginLeft - elemWidth,
                    $offset.top + elem.offsetHeight - data.marginTop - elemHeight
                ];
            }
        }
    }
    return avalon;
}
)();
},{"avalon":2}],21:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-dropdown\"\n     ms-class=\"oni-state-disabled:!enable\"\n     ms-class-1=\"{{titleClass}}\"\n     ms-css-width=\"{{width}}\"\n     ms-class-2=\"oni-state-focus: focusClass\"\n     ms-hover=\"oni-state-hover\"\n     ms-mouseenter=\"_titleenter\"\n     ms-mouseleave=\"_titleleave\"\n     ms-keydown=\"_keydown\"\n     tabindex=\"0\">\n    <div class=\"oni-dropdown-source\">\n        <div class=\"oni-dropdown-input\"\n             ms-attr-title=\"title\"\n             ms-css-width=\"titleWidth\"\n             id=\"title-MS_OPTION_ID\">{{label|sanitize|html}}</div>\n        <div class=\"oni-dropdown-icon-wrap\">\n            <i class=\"oni-dropdown-icon oni-icon oni-icon-angle-up\"\n               ms-visible=\"toggle\">&#xf028;</i>\n            <i class=\"oni-dropdown-icon oni-icon oni-icon-angle-down\"\n               ms-visible=\"!toggle\">&#xf032;</i>\n        </div>\n    </div>\n</div>\nMS_OPTION_TEMPLATE\n<div class=\"oni-dropdown\"\n     ms-class=\"oni-dropdown-menu:!multiple\"\n     ms-class-1=\"{{listClass}}\"\n     ms-css-width=\"{{listWidth}}\"\n     ms-mouseenter=\"_listenter\"\n     ms-mouseleave=\"_listleave\"\n     ms-visible=\"toggle||multiple\">\n    <div class=\"oni-dropdown-menu-inner\"\n         ms-css-width=\"menuWidth\"\n         ms-css-height=\"menuHeight\"\n         ms-widget=\"scrollbar,scrollbar-MS_OPTION_ID\" id=\"menu-MS_OPTION_ID\">\n        <div class=\"oni-scrollbar-scroller\"\n             id=\"list-MS_OPTION_ID\">\n            <div ms-repeat=\"data\" class=\"oni-dropdown-item\"\n                 ms-click-12=\"_select($index, $event)\"\n                 ms-attr-title=\"el.title||el.label\"\n                 ms-visible=\"el.toggle\"\n                 ms-hover=\"oni-state-hover: el.enable\"\n                 ms-class-1=\"oni-state-disabled:!el.enable\"\n                 ms-class-2=\"oni-state-active:isActive(el, multipleChange)\"\n                 ms-class-4=\"oni-dropdown-group:el.group\"\n                 ms-class-5=\"oni-dropdown-divider:el.group && !$first\"\n                 data-repeat-rendered=\"repeatRendered\"\n                 >{{el.label|sanitize|html}}</div>\n        </div>\n    </div>\n</div>\n";
innerRequire("../avalon.getModel");
innerRequire("../scrollbar/avalon.scrollbar");

module.exports = (
function () {
    var styleReg = /^(\d+).*$/;
    var ie6 = !-[1] && !window.XMLHttpRequest;
    var widget = avalon.ui.dropdown = function (element, data, vmodels) {
            var $element = avalon(element), elemParent = element.parentNode, options = data.dropdownOptions, hasBuiltinTemplate = true,
                //标志是否通过model值构建下拉列表
                dataSource, dataModel, templates, titleTemplate, listTemplate, blurHandler, scrollHandler, resizeHandler, keepState = false;
            //将元素的属性值copy到options中
            'multiple,size'.replace(avalon.rword, function (name) {
                if (hasAttribute(element, name)) {
                    options[name] = element[name];
                }
            });
            //将元素的属性值copy到options中
            options.enable = !element.disabled;
            //读取template
            templates = options.template = options.getTemplate(template, options).replace(/MS_OPTION_ID/g, data.dropdownId).split('MS_OPTION_TEMPLATE');
            titleTemplate = templates[0];
            listTemplate = templates[1];
            dataSource = options.data.$model || options.data;
            //由于element本身存在ms-if或者内部包含ms-repeat等绑定，在抽取数据之前，先对element进行扫描
            element.removeAttribute('ms-duplex');
            avalon.scan(element, vmodels);
            //数据抽取
            dataModel = getDataFromHTML(element);
            hasBuiltinTemplate = !!dataModel.length;
            if (dataModel.length === 0) {
                dataModel = getDataFromOption(dataSource);
            }
            options.data = dataModel;
            avalon(element).css('display', 'none');
            //转换option
            _buildOptions(options);
            for (var i = 0, n = dataModel.length; i < n; i++) {
                if (dataModel[i].value == options.value) {
                    options.activeIndex = i;
                    options.currentOption = dataModel[i];
                    break;
                }
            }
            var titleNode, listNode;
            var vmodel = avalon.define(data.dropdownId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'duplexName',
                        'menuNode',
                        'dropdownNode',
                        'scrollWidget',
                        'rootElement'
                    ];
                    if (vm.multiple && vm.$hasDuplex && vm.$skipArray.indexOf('value') === -1) {
                        vm.$skipArray.push('value');
                    }
                    vm.render = function (data) {
                        if (data === void 0) {
                            return;
                        }
                        vmodel.data = getDataFromOption(data.$model || data);
                        if (vmodel.toggle) {
                            vmodel._styleFix(true);
                        }
                    };
                    vm.widgetElement = element;
                    vm.rootElement = {};
                    vm.menuWidth = 'auto';
                    //下拉列表框宽度
                    vm.menuHeight = vm.height;
                    //下拉列表框高度
                    vm.dataSource = dataSource;
                    //源节点的数据源，通过dataSource传递的值将完全模拟select
                    vm.focusClass = false;
                    vm.$init = function (continueScan) {
                        //根据multiple的类型初始化组件
                        if (vmodel.multiple) {
                            //创建菜单
                            listNode = createListNode();
                            var list = listNode.firstChild;
                            elemParent.insertBefore(listNode, element);
                            list.appendChild(element);
                        } else {
                            //如果是单选
                            var title;
                            titleNode = avalon.parseHTML(titleTemplate);
                            title = titleNode.firstChild;
                            elemParent.insertBefore(titleNode, element);
                            title.appendChild(element);
                            titleNode = title;
                            //设置title宽度
                            vmodel.titleWidth = computeTitleWidth();
                            //设置label值
                            setLabelTitle(vmodel.value);
                            //注册blur事件
                            blurHandler = avalon.bind(document.body, 'click', function (e) {
                                //判断是否点击发生在dropdown节点内部
                                //如果不在节点内部即发生了blur事件
                                if (titleNode.contains(e.target)) {
                                    vmodel._toggle();
                                    return;
                                } else if (listNode && listNode.contains(e.target)) {
                                    return;
                                }
                                if (!vmodel.__cursorInList__ && !vmodel.multiple && vmodel.toggle) {
                                    vmodel.toggle = false;
                                }
                            });
                            if (vmodel.position) {
                                //监听window的滚动及resize事件，重新定位下拉框的位置
                                scrollHandler = avalon.bind(window, 'scroll', _positionListNode);
                                resizeHandler = avalon.bind(window, 'resize', _positionListNode);
                            }
                        }
                        //如果原来的select没有子节点，那么为它添加option与optgroup
                        if (!hasBuiltinTemplate) {
                            element.appendChild(getFragmentFromData(dataModel));
                            avalon.each([
                                'multiple',
                                'size'
                            ], function (i, attr) {
                                avalon(element).attr(attr, vmodel[attr]);
                            });
                        }
                        if (!vmodel.multiple) {
                            var duplexName = (element.msData['ms-duplex'] || '').trim(), duplexModel;
                            if (duplexName && (duplexModel = avalon.getModel(duplexName, vmodels))) {
                                duplexModel[1].$watch(duplexModel[0], function (newValue) {
                                    vmodel.value = newValue;
                                });
                            }
                            vmodel.$watch('value', function (n, o) {
                                var onChange = avalon.type(vmodel.onChange) === 'function' && vmodel.onChange || false;
                                if (keepState) {
                                    keepState = false;
                                    return;
                                }
                                function valueStateKeep(stateKeep) {
                                    if (stateKeep) {
                                        keepState = true;
                                        vmodel.value = o;
                                    } else {
                                        if (duplexModel) {
                                            duplexModel[1][duplexModel[0]] = n;
                                            element.value = n;
                                        }
                                        vmodel.currentOption = setLabelTitle(n);
                                    }
                                }
                                if (onChange && onChange.call(element, n, o, vmodel, valueStateKeep) !== false || !onChange) {
                                    if (duplexModel) {
                                        duplexModel[1][duplexModel[0]] = n;
                                        element.value = n;
                                    }
                                    vmodel.currentOption = setLabelTitle(n);
                                }
                            });
                        } else {
                            vmodel.value.$watch('length', function () {
                                vmodel.multipleChange = !vmodel.multipleChange;
                                optionsSync();
                            });
                        }
                        //同步disabled或者enabled
                        var disabledAttr = element.msData['ms-disabled'], disabledModel, enabledAttr = element.msData['ms-enabled'], enabledModel;
                        if (disabledAttr && (disabledModel = avalon.getModel(disabledAttr, vmodels))) {
                            disabledModel[1].$watch(disabledModel[0], function (n) {
                                vmodel.enable = !n;
                            });
                            vmodel.enable = !disabledModel[1][disabledModel[0]];
                        }
                        if (enabledAttr && (enabledModel = avalon.getModel(enabledAttr, vmodels))) {
                            enabledModel[1].$watch(enabledModel[0], function (n) {
                                vmodel.enable = n;
                            });
                            vmodel.enable = enabledModel[1][enabledModel[0]];
                        }
                        vmodel.enable = !element.disabled;
                        //同步readOnly
                        var readOnlyAttr = vmodel.readonlyAttr, readOnlyModel;
                        if (readOnlyAttr && (readOnlyModel = avalon.getModel(readOnlyAttr, vmodels))) {
                            readOnlyModel[1].$watch(readOnlyModel[0], function (n) {
                                vmodel.readOnly = n;
                            });
                            vmodel.readOnly = readOnlyModel[1][readOnlyModel[0]];
                        }
                        //获取$source信息
                        if (vmodel.$source) {
                            if (avalon.type(vmodel.$source) === 'string') {
                                var sourceModel = avalon.getModel(vmodel.$source, vmodels);
                                sourceModel && (vmodel.$source = sourceModel[1][sourceModel[0]]);
                            } else if (!vmodel.$source.$id) {
                                vmodel.$source = null;
                            } else if (vmodel.$source.length > 0) {
                                vmodel._refresh(vmodel.$source.length);
                            }
                            //对data的改变做监听，由于无法检测到对每一项的改变，检测数据项长度的改变
                            vmodel.$source && vmodel.$source.$watch && vmodel.$source.$watch('length', function (n) {
                                vmodel._refresh(n);
                            });
                        }
                        avalon.scan(element.parentNode, [vmodel].concat(vmodels));
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('\u8BF7\u5C3D\u5FEB\u5347\u5230avalon1.3.7+');
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        vmodel.multiple && optionsSync();
                    };
                    vm.repeatRendered = function () {
                        if (vmodel.multiple) {
                            avalon.vmodels['scrollbar-' + vmodel.$id].update();
                        }
                    };
                    /**
             * @interface 当组件移出DOM树时,系统自动调用的销毁函数
             */
                    vm.$remove = function () {
                        if (blurHandler) {
                            avalon.unbind(window, 'click', blurHandler);
                        }
                        if (scrollHandler) {
                            avalon.unbind(window, 'scroll', scrollHandler);
                        }
                        if (resizeHandler) {
                            avalon.unbind(window, 'resize', resizeHandler);
                        }
                        vmodel.toggle = false;
                        listNode && vmodel.container && vmodel.container.contains(listNode) && vmodel.container.removeChild(listNode);
                        avalon.log('dropdown $remove');
                    };
                    vm._select = function (index, event) {
                        var option = vmodel.data[index].$model;
                        if (option && option.enable && !option.group) {
                            var oldValue = vmodel.value;
                            //根据multiple区分对待, 多选时可以为空值
                            if (vmodel.multiple) {
                                index = vmodel.value.indexOf(option.value);
                                if (index > -1) {
                                    vmodel.value.splice(index, 1);
                                } else {
                                    vmodel.value.push(option.value);
                                }
                            } else {
                                vmodel.value = option.value;
                            }
                            // vmodel.currentOption = option;
                            vmodel.toggle = false;
                            if (avalon.type(vmodel.onSelect) === 'function') {
                                vmodel.onSelect.call(element, event, vmodel.value, oldValue, vmodel);
                            }
                            vmodel.activeIndex = index;
                        }
                    };
                    /**
             *
             * @param len 新数据长度
             * @private
             */
                    vm._refresh = function (len) {
                        vmodel.data.clear();
                        vmodel.label = '';
                        vmodel.__cursorInList__ = false;
                        if (len > 0) {
                            //当data改变时，解锁滚动条
                            vmodel._disabledScrollbar(false);
                            vmodel.data.pushArray(getDataFromOption(vmodel.$source.$model || vmodel.$source));
                            var option;
                            //当data改变时，尝试使用之前的value对label和title进行赋值，如果失败，使用data第一项
                            if (!(option = setLabelTitle(vmodel.value))) {
                                vmodel.currentOption = vmodel.data[0].$model;
                                vmodel.activeIndex = 0;
                                setLabelTitle(vmodel.value = vmodel.data[0].value);
                            } else {
                                vmodel.activeIndex = vmodel.data.$model.indexOf(option);
                            }
                            if (vmodel.menuNode) {
                                vmodel._styleFix(true);
                            }
                        }
                    };
                    vm._titleenter = function () {
                        if (vmodel.hoverAutoShow) {
                            vmodel._toggle()    // vmodel.toggle = true
;
                        }
                    };
                    vm._titleleave = function () {
                        if (vmodel.hoverAutoShow) {
                            vmodel.toggle = false;
                        }
                    };
                    vm._keydown = function (event) {
                        if (vmodel.keyboardEvent === false) {
                            return;
                        }
                        //如果是单选下拉框，可以通过键盘移动
                        if (!vmodel.multiple) {
                            var index = vmodel.activeIndex || 0, oldValue = vmodel.value;
                            //区分上下箭头和回车
                            switch (event.keyCode) {
                            case 9:
                            // tab
                            case 27:
                                // escape
                                event.preventDefault();
                                break;
                            case 13:
                                vmodel._select(index, event);
                                break;
                            case 38:
                            case 63233:
                                //safari 向上
                                event.preventDefault();
                                index = getEnableOption(vmodel.data, index);
                                if (index === null) {
                                    return;
                                }
                                vmodel.value = vmodel.data[index].value;
                                vmodel.activeIndex = index;
                                vmodel.scrollTo(index);
                                if (avalon.type(vmodel.onSelect) === 'function') {
                                    vmodel.onSelect.call(element, event, vmodel.value, oldValue, vmodel);
                                }
                                break;
                            case 40:
                            case 63235:
                                //safari 向下
                                event.preventDefault();
                                index = getEnableOption(vmodel.data, index, true);
                                if (index === null) {
                                    return;
                                }
                                vmodel.value = vmodel.data[index].value;
                                vmodel.activeIndex = index;
                                vmodel.scrollTo(index);
                                if (avalon.type(vmodel.onSelect) === 'function') {
                                    vmodel.onSelect.call(element, event, vmodel.value, oldValue, vmodel);
                                }
                                break;
                            }
                        }
                    };
                    //下拉列表的显示依赖toggle值，该函数用来处理下拉列表的初始化，定位
                    vm._toggle = function (b) {
                        if (vmodel.data.length === 0 && !vmodel.realTimeData || !vmodel.enable || vmodel.readOnly) {
                            vmodel.toggle = false;
                            return;
                        }
                        //为了防止显示时调整高度造成的抖动，将节点初始化放在改变toggle值之前
                        if (!listNode) {
                            //只有单选下拉框才存在显示隐藏的情况
                            var list;
                            listNode = createListNode();
                            list = listNode.firstChild;
                            vmodel.container.appendChild(listNode);
                            listNode = list;
                            vm.rootElement = list;
                            avalon.scan(list, [vmodel].concat(vmodels));
                            vmodel.menuNode = document.getElementById('menu-' + vmodel.$id);
                            //下拉列表框内层容器 （包裹滚动条部分的容器）
                            vmodel.dropdownNode = document.getElementById('list-' + vmodel.$id)    //下拉列表框内容（有滚动条的部分）
;
                        }
                        //如果参数b不为布尔值，对toggle值进行取反
                        if (typeof b !== 'boolean') {
                            vmodel.toggle = !vmodel.toggle;
                            return;
                        }
                        if (!b) {
                            avalon.type(vmodel.onHide) === 'function' && vmodel.onHide.call(element, listNode, vmodel);
                        } else {
                            var firstItemIndex, selectedItemIndex, value = vmodel.value;
                            if (avalon.type(value) !== 'array') {
                                value = [value];
                            }
                            //计算activeIndex的值
                            if (vmodel.activeIndex == null) {
                                avalon.each(vmodel.data, function (i, item) {
                                    if (firstItemIndex === void 0 && item.enable) {
                                        firstItemIndex = i;
                                    }
                                    if (item.value === value[0]) {
                                        selectedItemIndex = i;
                                        return false;
                                    }
                                    return true;
                                });
                                if (!selectedItemIndex) {
                                    selectedItemIndex = firstItemIndex;
                                }
                                vmodel.activeIndex = selectedItemIndex || 0;
                            }
                            vmodel.scrollWidget = avalon.vmodels['scrollbar-' + vmodel.$id];
                            vmodel._styleFix();
                            vmodel._position();
                            if (avalon.type(vmodel.onShow) === 'function') {
                                vmodel.onShow.call(element, listNode, vmodel);
                            }
                        }
                    };
                    vm.$watch('toggle', function (b) {
                        vmodel.focusClass = b;
                        vmodel._toggle(b);
                    });
                    vm.toggle = false;
                    vm._position = function () {
                        var $titleNode = avalon(titleNode);
                        //计算浮层当前位置，对其进行定位，默认定位正下方
                        //获取title元素的尺寸及位置
                        var offset = $titleNode.offset(), outerHeight = $titleNode.outerHeight(true), $listNode = avalon(listNode), $sourceNode = avalon(titleNode.firstChild), listHeight = $listNode.height(), $window = avalon(window), css = {}, offsetParent = listNode.offsetParent, $offsetParent = avalon(offsetParent);
                        while ($sourceNode.element && $sourceNode.element.nodeType != 1) {
                            $sourceNode = avalon($sourceNode.element.nextSibling);
                        }
                        //计算浮层的位置
                        if (options.position && offset.top + outerHeight + listHeight > $window.scrollTop() + $window.height() && offset.top - listHeight > $window.scrollTop()) {
                            css.top = offset.top - listHeight;
                        } else {
                            css.top = offset.top + outerHeight - $sourceNode.css('borderBottomWidth').replace(styleReg, '$1');
                        }
                        if (offsetParent && (offsetParent.tagName !== 'BODY' && offsetParent.tagName !== 'HTML')) {
                            //修正由于边框带来的重叠样式
                            css.top = css.top - $offsetParent.offset().top + listNode.offsetParent.scrollTop;
                            css.left = offset.left - $offsetParent.offset().left + listNode.offsetParent.scrollLeft;
                        } else {
                            //修正由于边框带来的重叠样式
                            css.left = offset.left;
                        }
                        //显示浮层
                        $listNode.css(css);
                    };
                    //是否当前鼠标在list区域
                    vm.__cursorInList__ = false;
                    //单选下拉框在失去焦点时会收起
                    vm._listenter = function () {
                        vmodel.__cursorInList__ = true;
                        if (vmodel.hoverAutoShow) {
                            vmodel.toggle = true;
                        }
                    };
                    vm._listleave = function () {
                        vmodel.__cursorInList__ = false;
                        if (vmodel.hoverAutoShow) {
                            vmodel.toggle = false;
                        }
                    };
                    vm._blur = function () {
                        if (!vmodel.__cursorInList__ && !vmodel.multiple && vmodel.toggle) {
                            vmodel.toggle = false;
                        }
                    };
                    /**
             * @interface
             * @param newValue 设置控件的值，需要注意的是dropdown设置了multiple属性之后，值是数组，未设置multiple属性的时候，可以接受字符串，数字，布尔值；未设置该值时，效果是返回当前控件的值
             * @returns vmodel.value 控件当前的值
             */
                    vm.val = function (newValue) {
                        if (typeof newValue !== 'undefined') {
                            if (avalon.type(newValue) !== 'array') {
                                newValue = [newValue];
                            }
                            vmodel.value = newValue;
                        }
                        return vmodel.value;
                    };
                    vm.isActive = function (el) {
                        var value = el.value, enable = el.enable, group = el.group;
                        if (vmodel.multiple) {
                            return vmodel.value.indexOf(value) > -1 && enable && !group;
                        } else {
                            return vmodel.value === value && enable && !group;
                        }
                    };
                    //当下拉列表中的项目发生改变时，调用该函数修正显示，顺序是修正下拉框高宽 --> 滚动条更新显示 --> 定位下拉框
                    vm._styleFix = function (resetHeight) {
                        var MAX_HEIGHT = options.height || 200, $menu = avalon(vmodel.menuNode), height = '';
                        if (resetHeight) {
                            vmodel.menuHeight = '';
                            avalon(vmodel.dropdownNode).css({ 'height': '' });
                        }
                        height = vmodel.dropdownNode.scrollHeight;
                        vmodel.menuWidth = !ie6 ? vmodel.listWidth - $menu.css('borderLeftWidth').replace(styleReg, '$1') - $menu.css('borderRightWidth').replace(styleReg, '$1') : vmodel.listWidth;
                        if (height > MAX_HEIGHT) {
                            vmodel._disabledScrollbar(false);
                            height = MAX_HEIGHT;
                            avalon(vmodel.dropdownNode).css({ 'width': vmodel.menuWidth - vmodel.scrollWidget.getBars()[0].width() });
                        } else {
                            vmodel._disabledScrollbar(true);
                            avalon(vmodel.dropdownNode).css({ 'width': vmodel.menuWidth });
                        }
                        vmodel.menuHeight = height;
                        vmodel.updateScrollbar();
                        vmodel.scrollTo(vmodel.activeIndex);
                    };
                    //利用scrollbar的样式改变修正父节点的样式
                    vm.updateScrollbar = function () {
                        vmodel.scrollWidget.update();
                    };
                    //通过当前的activeIndex，更新scrollbar的滚动位置
                    vm.scrollTo = function (activeIndex) {
                        if (!vmodel.dropdownNode)
                            return;
                        //计算是否需要滚动
                        var nodes = siblings(vmodel.dropdownNode.firstChild), $activeNode = avalon(nodes[activeIndex]), menuHeight = vmodel.menuHeight, nodeTop = nodes.length ? $activeNode.position().top - avalon(nodes[0]).position().top : 0, nodeHeight = nodes.length ? $activeNode.height() : 0, scrollTop = vmodel.dropdownNode.scrollTop;
                        if (nodeTop > scrollTop + menuHeight - nodeHeight || nodeTop + nodeHeight < scrollTop) {
                            vmodel.scrollWidget.scrollTo(0, nodeTop + nodeHeight - menuHeight);
                        }
                    };
                    //禁用滚动条，当下拉列表的高度小于最大高度时，只显示当前高度，需要对滚动条做禁用
                    vm._disabledScrollbar = function (b) {
                        vmodel.scrollWidget && (vmodel.scrollWidget.disabled = !!b);
                    };
                });
            vmodel.$watch('enable', function (n) {
                if (!n) {
                    vmodel.toggle = false;
                }
            });
            vmodel.$watch('readOnly', function (n) {
                if (!!n) {
                    vmodel.toggle = false;
                }
            });
            //在multiple模式下同步select的值
            //http://stackoverflow.com/questions/16582901/javascript-jquery-set-values-selection-in-a-multiple-select
            function optionsSync() {
                avalon.each(element.getElementsByTagName('option'), function (i, option) {
                    if (vmodel.value.$model.indexOf(option.value) > -1 || vmodel.value.$model.indexOf(parseData(option.value)) > -1) {
                        try {
                            option.selected = true;
                        } catch (e) {
                            avalon(option).attr('selected', 'selected');
                        }
                    } else {
                        try {
                            option.selected = false;
                        } catch (e) {
                            option.removeAttribute('selected');
                        }
                    }
                });
            }
            function _buildOptions(opt) {
                //为options添加value与duplexName
                //如果原来的select元素绑定了ms-duplex，那么取得其值作value
                //如果没有，则先从上层VM的配置对象中取，再没有则从内置模板里抽取
                var duplexName = (element.msData['ms-duplex'] || '').trim();
                var duplexModel;
                if (duplexName && (duplexModel = avalon.getModel(duplexName, vmodels))) {
                    opt.value = duplexModel[1][duplexModel[0]];
                    opt.$hasDuplex = true;
                } else if (!hasBuiltinTemplate) {
                    if (!Array.isArray(opt.value)) {
                        opt.value = [opt.value || ''];
                    }
                } else {
                    var values = [];
                    Array.prototype.forEach.call(element.options, function (option) {
                        if (option.selected) {
                            values.push(parseData(option.value));
                        }
                    });
                    opt.value = values;
                }
                if (!opt.multiple) {
                    if (Array.isArray(opt.value)) {
                        opt.value = opt.value[0] !== void 0 ? opt.value[0] : '';
                    }
                    //尝试在当前的data中查找value对应的选项，如果没有，将value设置为data中的option第一项的value
                    var option = opt.data.filter(function (item) {
                            return item.value === opt.value && !item.group;
                        }), options = opt.data.filter(function (item) {
                            return !item.group;
                        });
                    if (option.length === 0 && options.length > 0) {
                        opt.value = options[0].value;
                        //如果存在duplex，同步该值
                        if (duplexModel) {
                            duplexModel[1][duplexModel[0]] = opt.value;
                        }
                    }
                }
                //处理data-duplex-changed参数
                var changedCallbackName = $element.attr('data-duplex-changed'), changedCallbackModel;
                //回调函数
                if (changedCallbackName && (changedCallbackModel = avalon.getModel(changedCallbackName, vmodels))) {
                    opt.changedCallback = changedCallbackModel[1][changedCallbackModel[0]];
                }
                opt.duplexName = duplexName;
                //处理container
                var docBody = document.body, container = opt.container;
                // container必须是dom tree中某个元素节点对象或者元素的id，默认将dialog添加到body元素
                opt.container = (avalon.type(container) === 'object' && container.nodeType === 1 && docBody.contains(container) ? container : document.getElementById(container)) || docBody;
            }
            /**
         * 生成下拉框节点
         * @returns {*}
         */
            function createListNode() {
                return avalon.parseHTML(listTemplate);
            }
            //设置label以及title
            function setLabelTitle(value) {
                var option = vmodel.data.$model.filter(function (item) {
                        return item.value === value;
                    });
                option = option.length > 0 ? option[0] : null;
                if (!option) {
                    avalon.log('[log] avalon.dropdown \u8BBE\u7F6Elabel\u51FA\u9519');
                } else {
                    vmodel.label = option.label;
                    vmodel.title = option.title || option.label || '';
                }
                return option;
            }
            //计算title的宽度
            function computeTitleWidth() {
                var title = document.getElementById('title-' + vmodel.$id), $title = avalon(title);
                return vmodel.width - $title.css('paddingLeft').replace(styleReg, '$1') - $title.css('paddingRight').replace(styleReg, '$1');
            }
            //定位listNode
            function _positionListNode() {
                if (!vmodel.multiple && listNode) {
                    vmodel._position();
                }
            }
            return vmodel;
        };
    widget.version = '1.0';
    widget.defaults = {
        realTimeData: false,
        container: null,
        //@config 放置列表的容器
        width: 200,
        //@config 自定义宽度
        listWidth: 200,
        //@config 自定义下拉列表的宽度
        titleWidth: 0,
        //@config title部分宽度
        height: 200,
        //@config 下拉列表的高度
        enable: true,
        //@config 组件是否可用
        readOnly: false,
        //@config 组件是否只读
        hoverAutoShow: false,
        //@config 是否开启鼠标移入打开下拉列表鼠标移出关闭下拉列表功能
        readonlyAttr: null,
        //@config readonly依赖的属性
        currentOption: null,
        //@config 组件当前的选项
        data: [],
        //@config 下拉列表显示的数据模型
        $source: null,
        //@config 下拉列表的数据源
        textFiled: 'text',
        //@config 模型数据项中对应显示text的字段,可以传function，根据数据源对text值进行格式化
        valueField: 'value',
        //@config 模型数据项中对应value的字段
        value: [],
        //@config 设置组件的初始值
        label: '',
        //@config 设置组件的提示文案，可以是一个字符串，也可以是一个对象
        multiple: false,
        //@config 是否为多选模式
        listClass: '',
        //@config 列表添加自定义className来控制样式
        title: '',
        titleClass: '',
        //@config title添加自定义className来控制样式
        activeIndex: null,
        size: 1,
        menuNode: null,
        dropdownNode: null,
        scrollWidget: null,
        position: true,
        //@config 是否自动定位下拉列表
        onSelect: null,
        //@config 点击选项时的回调
        onShow: null,
        //@config 下拉框展示的回调函数
        onHide: null,
        //@config 下拉框隐藏的回调函数
        onChange: null,
        //@config value改变时的回调函数
        $hasDuplex: false,
        multipleChange: false,
        keyboardEvent: true,
        //@config 是否支持键盘事件
        /**
         * @config 模板函数,方便用户自定义模板
         * @param str {String} 默认模板
         * @param opts {Object} VM
         * @returns {String} 新模板
         */
        getTemplate: function (str, options) {
            return str;
        },
        onInit: avalon.noop
    };
    //用于将字符串中的值转换成具体值
    function parseData(data) {
        try {
            data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : data;
        } catch (e) {
        }
        return data;
    }
    //根据dataSource构建数据结构
    //从VM的配置对象提取数据源, dataSource为配置项的data数组，但它不能直接使用，需要转换一下
    //它的每一个对象代表option或optGroup，
    //如果是option则包含label, enable, value
    //如果是optGroup则包含label, enable, options(options则包含上面的option)
    //每个对象中的enable如果不是布尔，则默认为true; group与parent则框架自动添加
    function getDataFromOption(data, arr, parent) {
        var ret = arr || [];
        parent = parent || null;
        for (var i = 0, el; el = data[i++];) {
            if (Array.isArray(el.options)) {
                ret.push({
                    label: el.label,
                    value: el.value,
                    enable: ensureBool(el.enable, true),
                    group: true,
                    parent: parent,
                    toggle: true
                });
                getDataFromOption(el.options, ret, el);
            } else {
                if (typeof el === 'string') {
                    el = {
                        label: el,
                        value: el,
                        title: el
                    };
                }
                ret.push({
                    label: el.label,
                    value: el.value,
                    title: el.title,
                    enable: ensureBool(parent && parent.enable, true) && ensureBool(el.enable, true),
                    group: false,
                    parent: parent,
                    data: el,
                    //只有在dataModel的模式下有效
                    toggle: true
                });
            }
        }
        return ret;
    }
    function getFragmentFromData(data) {
        var ret = document.createDocumentFragment(), parent, node;
        for (var i = 0, el; el = data[i++];) {
            if (el.group) {
                node = document.createElement('optgroup');
                node.label = el.label;
                node.disabled = !el.enable;
                ret.appendChild(node);
                parent = node;
            } else {
                node = document.createElement('option');
                node.text = el.label;
                node.value = el.value;
                node.disabled = !el.enable;
                if (el.parent && parent) {
                    parent.appendChild(node);
                } else {
                    ret.appendChild(node);
                }
            }
        }
        return ret;
    }
    function ensureBool(value, defaultValue) {
        return typeof value === 'boolean' ? value : defaultValue;
    }
    //从页面的模板提取数据源, option元素的value会进一步被处理
    //label： option或optgroup元素显示的文本
    //value: 其value值，没有取innerHTML
    //enable: 是否可用
    //group: 对应的元素是否为optgroup
    //parent: 是否位于分组内，是则为对应的对象
    function getDataFromHTML(select, arr, parent) {
        var ret = arr || [];
        var elems = select.children;
        parent = parent || null;
        for (var i = 0, el; el = elems[i++];) {
            if (el.nodeType === 1) {
                //过滤注释节点
                if (el.tagName === 'OPTGROUP') {
                    parent = {
                        label: el.label,
                        value: '',
                        enable: !el.disabled,
                        group: true,
                        //group不能添加ui-state-active
                        parent: false,
                        toggle: true
                    };
                    ret.push(parent);
                    getDataFromHTML(el, ret, parent);
                } else if (el.tagName === 'OPTION') {
                    ret.push({
                        label: el.label.trim() || el.text.trim() || el.value.trim(),
                        //IE9-10有BUG，没有进行trim操作
                        title: el.title.trim(),
                        value: parseData(el.value.trim() || el.text.trim()),
                        enable: ensureBool(parent && parent.enable, true) && !el.disabled,
                        group: false,
                        parent: parent,
                        toggle: true
                    });
                }
            }
        }
        return ret;
    }
    /**
     * 在用户使用键盘上下箭头选择选项时，需要跳过被禁用的项，即向上或者向下找到非禁用项
     * @param data 用来选择的数据项
     * @param index 当前index
     * @param direction {Boolean} 方向，true为下，false为上，默认为上
     * @return ret 使用的项在数组中的下标
     */
    function getEnableOption(data, index, direction) {
        var size = data.size(), left = [], right = [], dataItem = {}, i, ret;
        //将data用index分成两段
        //当向上选择时，选择从左段的队尾到右段的队头
        //当向下选择时，选择从右端的对头到左段的队尾
        for (i = 0; i < index; i++) {
            dataItem = data[i];
            if (dataItem.enable && !dataItem.group && dataItem.toggle) {
                left.push(i);
            }
        }
        for (i = index + 1; i < size; i++) {
            dataItem = data[i];
            if (dataItem.enable && !dataItem.group && dataItem.toggle) {
                right.push(i);
            }
        }
        if (left.length === 0 && right.length === 0) {
            ret = null;
        } else if (direction) {
            ret = right.length > 0 ? right.shift() : left.shift();
        } else {
            ret = left.length > 0 ? left.pop() : right.pop();
        }
        return ret;
    }
    var hasAttribute = document.documentElement.hasAttribute ? function (el, attr) {
            return el.hasAttribute(attr);
        } : function (el, attr) {
            //IE67
            var outer = el.outerHTML, part = outer.slice(0, outer.search(/\/?['"]?>(?![^<]*<['"])/));
            return new RegExp('\\s' + attr + '\\b', 'i').test(part);
        };
    return avalon;
    /**
     * 获取元素节点的所有兄弟节点
     * @param n
     * @returns {Array}
     */
    function siblings(n) {
        var r = [];
        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1) {
                r.push(n);
            }
        }
        return r;
    }
}
)();
},{"../avalon.getModel":6,"../scrollbar/avalon.scrollbar":52,"avalon":2}],22:[function(innerRequire,module,exports){
var avalon = innerRequire("../textbox/avalon.textbox.js");
innerRequire("../dropdown/avalon.dropdown.js");

module.exports = (
function () {
    var widget = avalon.ui.dropdownlist = function (element, data, vmodels) {
            var options = data.dropdownlistOptions, $element = avalon(element), textboxConfig = {
                    getTemplate: function (tmp) {
                        return tmp.replace(/MS_OPTION_ICON/, '<i class="oni-icon oni-textbox-icon" ms-visible="textboxToggle">&#xf002;</i>');
                    },
                    onInit: function (textbox) {
                        vmodel.searchBox = textbox;
                    }
                }, dropdownConfig = {
                    realTimeData: options.realTimeData,
                    enable: options.enable,
                    getTemplate: function (tmp) {
                        return tmp.replace('ms-visible="toggle||multiple">', 'ms-visible=\'toggle||multiple\'><input ms-widget=\'textbox\' ms-css-width=\'{{listWidth-12}}\' ms-duplex=\'_search\' ms-keydown=\'_keydown\' ms-attr-placeholder=\'placeholder\'/>');
                    },
                    onShow: function () {
                        vmodel.searchBox.widgetElement.focus();
                    },
                    onInit: function (dropdown) {
                        vmodel.dropdown = dropdown;
                        vmodel.$watch('_search', function (val) {
                            var data = dropdown.data, groups = {}, _groups = [], searchItem = false, groupLabel = '', group = {}, activeIndexInvalidate = false;
                            if (vmodel.realTimeData) {
                                vmodel.getRealTimeData(val, vmodel);
                                return;
                            }
                            activeIndexInvalidate = data[dropdown.activeIndex].label.toLowerCase().indexOf(val) == -1;
                            data.forEach(function (item, index) {
                                searchItem = item.label.toLowerCase().indexOf(val) != -1;
                                if (!item.group) {
                                    if (item.parent) {
                                        groupLabel = item.parent.label;
                                        if (!groups[groupLabel]) {
                                            groups[groupLabel] = group = { t: 0 };
                                        } else {
                                            group = groups[groupLabel];
                                        }
                                        if (searchItem) {
                                            group.t += 1;
                                            if (activeIndexInvalidate) {
                                                dropdown.value = item.value;
                                                dropdown.activeIndex = index;
                                                activeIndexInvalidate = false;
                                            }
                                            item.toggle = true;
                                        } else {
                                            item.toggle = false;
                                        }
                                    } else if (!searchItem) {
                                        item.toggle = false;
                                    } else {
                                        item.toggle = true;
                                        if (activeIndexInvalidate) {
                                            dropdown.value = item.value;
                                            dropdown.activeIndex = index;
                                            activeIndexInvalidate = false;
                                        }
                                    }
                                }
                            });
                            _groups = Object.keys(groups);
                            _groups.forEach(function (group, index) {
                                var _group = group;
                                group = groups[_group];
                                for (var i = 0, len = data.length; i < len; i++) {
                                    var item = data[i];
                                    if (item.group && item.label == _group) {
                                        if (!group.t) {
                                            item.toggle = false;
                                        } else {
                                            item.toggle = true;
                                        }
                                        break;
                                    }
                                }
                            });
                            if (dropdown.toggle) {
                                dropdown._styleFix(true);
                            }
                        });
                        dropdown.$watch('toggle', function (val) {
                            if (!val) {
                                vmodel._search = '';
                            }
                        });
                        vmodel.$watch('_dataRerender', function () {
                            dropdown.activeIndex = 0;
                            dropdown.render(vmodel.data);
                        });
                        vmodel.$watch('enable', function (val) {
                            dropdown.enable = val;
                        });
                    }
                };
            options.textbox = avalon.mix(options.textbox, textboxConfig);
            options.dropdown = avalon.mix(options.dropdown, dropdownConfig);
            options.dropdown.data = options.data;
            var vmodel = avalon.define(data.dropdownlistId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'data',
                        'textbox',
                        'dropdown',
                        'searchBox',
                        'realTimeData'
                    ];
                    vm.searchBox = null;
                    //@config 搜索框对应的VM
                    vm._search = '';
                    vm._dataRerender = false;
                    /**
             * @config 获取选项值
             * @returns {String} 选项值
             */
                    vm.getSelected = function () {
                        return vmodel.dropdown.value;
                    };
                    /**
             * @config 重新渲染搜索选项列表
             * @param data {Array} 选项列表，必传
             */
                    vm.render = function (data) {
                        if (data === void 0) {
                            return;
                        }
                        vmodel.data = data;
                        vmodel._dataRerender = !vmodel._dataRerender;
                    };
                    // @config 绑定组件的元素引用
                    vm.widgetElement = element;
                    vm.$init = function () {
                        $element.addClass('oni-dropdownlist');
                        $element.attr('ms-widget', [
                            'dropdown',
                            '$',
                            'dropdown'
                        ].join());
                        avalon.scan(element, [vmodel].concat(vmodels));
                    };
                });
            return vmodel;
        };
    widget.version = 1;
    widget.defaults = {
        placeholder: '',
        //@config 搜索框的占位符
        realTimeData: false,
        //@config 是否动态的从远程获取数据
        enable: true,
        //@config 是否禁用组件
        /**
         * @config 当需要实时获取搜索数据时设置realTimeData为true，组件就会调用此方法来实时渲染搜索列表
         * @param search {String} 搜索内容
         * @param dropdownlist {Object} 组件对应的VM
         */
        getRealTimeData: function (search, dropdownlist) {
            dropdownlist.render();
        },
        /**
         * @config 模板函数,方便用户自定义模板
         * @param tmp {String} 默认模板
         * @param opts {Object} vmodel
         * @returns {String} 新模板
         */
        getTemplate: function (tmp, opts) {
            return tmp;
        }
    };
    return avalon;
}
)();
},{"../dropdown/avalon.dropdown.js":21,"../textbox/avalon.textbox.js":62}],23:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-flipswitch oni-state-default oni-helper-reset oni-flipswitch-use-no-img\" \n\t ms-class-103=\"oni-flipswitch-drawing:!radiusSupport\"\n\t ms-class-100=\"oni-flipswitch-{{MS_OPTION_SIZE}} oni-flipswitch-{{MS_OPTION_THEME}}\" \n\t ms-class-102=\"oni-flipswitch-off:_addThisClass()\" \n\t ms-class-101=\"oni-state-disabled:disabled\" \n\t ms-click=\"toggleStatus\" \n\t ms-hover=\"oni-state-hover\" \n\t ms-visible=\"toggle\">\n\t<div class=\"oni-flipswitch-modal\" ms-visible=\"disabled\"></div>\n\t<div class=\"oni-flipswitch-bar oni-helper-clearfix\" ms-class=\"oni-flipswitch-animate:$css3support\" ms-if=\"dir=='left'\" \n\t     ms-css-margin-top=\"(-height/2) + 'px'\" \n\t     ms-css-height=\"height +'px'\">\n\t\t<span class=\"oni-flipswitch-left\" ms-if=\"hdir\">{{MS_OPTION_ON_TEXT|html}}</span>\n\t\t<span class=\"oni-flipswitch-right\" ms-if=\"!hdir\">{{MS_OPTION_OFF_TEXT|html}}</span>\n\t\t<label class=\"oni-flipswitch-dragger\">\n\t\t   \t<b class=\"oni-flipswitch-dragger-ball oni-flipswitch-ico\" ms-class-103=\"oni-flipswitch-dragger-ball-unchecked:!checked\">\n\t\t\t\t<svg ms-if=\"_shallDrawSvg()\" version=\"1.1\" \n\t\t\t\twidth=\"100%\" \n\t\t\t\theight=\"100%\" \n\t\t\t\tstyle=\"position:absolute;z-index:3;left:0;\" \n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t<circle stroked=\"false\" \n\t\t\t\t\tms-attr-cx=\"draggerRadius\" \n\t\t\t\t\tms-attr-cy=\"draggerRadius\" \n\t\t\t\t\tms-attr-r=\"draggerRadius\"  \n\t\t\t\t\tms-attr-fill=\"draggerColor\"/>\n\t\t\t\t</svg>\n\t\t\t\t<v:oval class=\"oni-flipswitch-oval-n\" \n\t\t\t\tms-if=\"_shallDrawVML()\"\n\t\t\t   \tstroked=\"false\" \n\t\t\t   \tfilled=\"true\" \n\t\t\t    ms-css-height=\"draggerRadius*2+'px'\" \n\t\t\t    ms-css-width=\"draggerRadius*2+'px'\" \n\t\t\t   \tms-attr-fillcolor=\"draggerColor\" \n\t\t\t   \tstyle=\"position:absolute;z-index:2;left:-1px;top:0;behavior: url(#default#VML)\">\n\t\t\t\t    <v:fill opacity=\"1\"></v:fill>\n\t\t\t    </v:oval>\n\t\t\t\t<v:oval class=\"oni-flipswitch-oval-hd\" \n\t\t\t\tms-if=\"_shallDrawVML()\"\n\t\t\t   \tstroked=\"false\" \n\t\t\t   \tfilled=\"true\" \n\t\t\t    ms-css-height=\"draggerRadius*2+'px'\" \n\t\t\t    ms-css-width=\"draggerRadius*2+'px'\" \n\t\t\t   \tms-attr-fillcolor=\"draggerColor\" \n\t\t\t   \tstyle=\"position:absolute;z-index:2;left:-1px;top:0;behavior: url(#default#VML);\">\n\t\t\t\t    <v:fill opacity=\"0.4\"></v:fill>\n\t\t\t    </v:oval>\n\t\t   \t</b>\n\t\t</label>\n\t\t<span class=\"oni-flipswitch-left\" ms-if=\"!hdir\">{{MS_OPTION_ON_TEXT|html}}</span>\n\t\t<span class=\"oni-flipswitch-right\" ms-if=\"hdir\">{{MS_OPTION_OFF_TEXT|html}}</span>\n\t</div>\n\t<div class=\"oni-flipswitch-bg oni-flipswitch-ico\" ms-class-101=\"oni-flipswitch-uckbg:!checked\" ms-class-102=\"oni-flipswitch-uckbg-disabled:disabled\" \n\t    ms-css-height=\"height+4+'px'\"><svg ms-if=\"_shallDrawSvg()\" version=\"1.1\" \n\t\twidth=\"100%\" \n\t\theight=\"100%\" \n\t\tstyle=\"position:absolute;z-index:3;left:0;top:0;\" \n\t\txmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t<rect x=\"0\" y=\"0\" \n\t\t\tms-attr-rx=\"height/2\" \n\t\t\tms-attr-ry=\"height/2\" \n\t\t\twidth=\"100%\" \n\t\t\theight=\"100%\" \n\t\t\tms-attr-fill=\"_getFillColor()\"/>\n\t\t</svg>\n\t\t<v:roundrect ms-if=\"_shallDrawVML()\" style=\"position:absolute;left:-1px;top:0;\" \n\t\tstroked=\"false\"  \n\t\tfilled=\"t\"\n\t\tarcsize=\"1.0\"  \n\t\tms-attr-fillcolor=\"_getFillColor()\" \n\t    ms-css-height=\"height+4+'px'\" \n\t    ms-css-width=\"width+'px'\">\n\t\t</v:roundrect>\n\t</div>\n</div>";
innerRequire("../draggable/avalon.draggable");
innerRequire("../avalon.getModel");

module.exports = (
function () {
    var svgSupport = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect, radiusSupport = typeof avalon.cssName('border-radius') == 'string';
    function formateTpl(tpl) {
        return tpl.replace(/MS_OPTION_[^\}]+/g, function (mat) {
            return mat.split('MS_OPTION_')[1].toLowerCase().replace(/_[^_]/g, function (mat) {
                return mat.split('_')[1].toUpperCase();
            });
        });
    }
    function insertAfer(tar, ele) {
        var tar = tar.nextSibling, par = tar.parentNode;
        if (tar) {
            par.insertBefore(ele, tar);
        } else {
            par.appendChild(ele);
        }
    }
    var css3support = typeof avalon.cssName('transition') == 'string';
    var widget = avalon.ui['flipswitch'] = function (element, data, vmodels) {
            var options = data.flipswitchOptions;
            //方便用户对原始模板进行修改,提高制定性
            options.template = options.getTemplate(template, options);
            var timer;
            var vmodel = avalon.define(data.flipswitchId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.rootElement = '';
                    vm.$css3support = css3support && vm.animated;
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'rootElement'
                    ];
                    vm.$svgSupport = svgSupport;
                    if (vm.size == 'large') {
                        vm.draggerRadius = 19;
                        vm.height = 38;
                        vm.width = 76;
                    } else if (vm.size == 'mini') {
                        vm.draggerRadius = 6;
                        vm.height = 12;
                        vm.width = 28;
                    } else if (vm.size == 'small') {
                        vm.draggerRadius = 8;
                        vm.height = 18;
                        vm.width = 36;
                    }
                    var newDiv, inputEle, bar, dragger, dragEvent = {};
                    var attrMaps = {
                            'draxis': 'x',
                            'drStop': function (e, data) {
                                if (e.x == dragEvent.x) {
                                    vmodel._toggle();
                                } else {
                                    var dis = dragEvent.x - e.x, dir = vmodel._getDir();
                                    if (Math.abs(dis) >= dragger.offsetWidth * 2 / 5) {
                                        // 右边拖动
                                        if (dis > 0 && !dir || dis < 0 && dir) {
                                            vmodel.checked = !vmodel.checked;
                                        }
                                    }
                                    var to = vmodel._getDir() ? -50 : 0;
                                    if (css3support) {
                                        bar.style[vmodel.dir] = to ? to + '%' : 0;
                                    } else {
                                        vm._animate(-to);
                                    }
                                }
                            },
                            'drStart': function (e, data) {
                                dragEvent = e;
                            },
                            'drDrag': function (e) {
                            },
                            'drHandle': function (e, data) {
                                if (vmodel.disabled) {
                                    return;
                                } else if ((e.target || e.srcElement) != dragger && (e.target || e.srcElement).parentNode != dragger && (e.target || e.srcElement).parentNode.parentNode != dragger) {
                                    vmodel._toggle();
                                    return;
                                }
                                return dragger;
                            },
                            'drBeforeStart': function (e, data) {
                                var w = bar.parentNode.clientWidth, w2 = bar.parentNode.offsetWidth, b = (w2 - w) / 2, p = avalon(bar.parentNode).position();
                                vmodel.drContainment = data.containment = [
                                    -w * 0.5 + b + p.left,
                                    0,
                                    p.left + b,
                                    0
                                ];
                            },
                            'drBeforeStop': function (e, data) {
                            },
                            'drContainment': [
                                0,
                                0,
                                0,
                                0
                            ]
                        };
                    avalon.mix(vm, attrMaps);
                    var inited;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        var divCon = avalon.parseHTML(formateTpl(vmodel.template));
                        newDiv = divCon.childNodes[0];
                        insertAfer(element, newDiv);
                        vm.rootElement = newDiv;
                        divCon = null;
                        inputEle = element;
                        // 阻止节点移除事件触发$destroy
                        inputEle.msRetain = true;
                        inputEle.parentNode.removeChild(inputEle);
                        inputEle.style.display = 'none';
                        // input元素的checked属性优先级高
                        if (inputEle.checked) {
                            vmodel.checked = true;
                        }
                        inputEle.setAttribute('ms-attr-checked', 'checked');
                        var du = inputEle.getAttribute('ms-duplex');
                        if (du) {
                            var tarVmodel = avalon.getModel(du, vmodels);
                            inputEle.removeAttribute('ms-duplex');
                            tarVmodel = tarVmodel[1];
                            if (tarVmodel) {
                                tarVmodel[du].$watch('length', function (v) {
                                    vmodel.checked = !!v;
                                });
                                vmodel.$watch('checked', function (v) {
                                    tarVmodel[du] = v ? ['on'] : [];
                                });
                            }
                        }
                        newDiv.appendChild(inputEle);
                        inputEle.msRetain = false;
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        avalon.scan(newDiv, [vmodel].concat(vmodels));
                        bar = newDiv.firstChild;
                        while (bar) {
                            if (bar.className && bar.className.indexOf('oni-flipswitch-bar') != -1)
                                break;
                            bar = bar.nextSibling;
                        }
                        bar.style[vmodel.dir] = vmodel._addthisCss();
                        if (vmodel.draggable) {
                            dragger = bar.firstChild;
                            while (dragger) {
                                if (dragger.className && dragger.className.indexOf('oni-flipswitch-dragger') != -1)
                                    break;
                                dragger = dragger.nextSibling;
                            }
                            if (dragger) {
                                bar.setAttribute('ms-draggable', '');
                                var avaElem = avalon(bar);
                                avalon.each(attrMaps, function (key, item) {
                                    var _key = key.replace(/^dr/, '').replace(/[A-Z]/, function (mat) {
                                            return '-' + mat.toLowerCase();
                                        });
                                    avaElem.data('draggable' + _key, typeof item != 'function' ? item : key);
                                });
                            }
                            avalon.scan(bar, [vmodel].concat(vmodels));
                        }
                    };
                    vm.$remove = function () {
                        newDiv.parentNode.insertBefore(inputEle, newDiv);
                        newDiv.parentNode.removeChild(newDiv);
                        inputEle.style.display = 'inline';
                        if (element.innerHTML)
                            element.innerHTML = element.textContent = '';
                    };
                    vm._addThisClass = function () {
                        if (!vmodel.checked && vmodel.hdir || vmodel.checked && !vmodel.hdir)
                            return true;
                        return false;
                    };
                    vm._addthisCss = function () {
                        if (vmodel.checked && !vmodel.hdir || !vmodel.checked && vmodel.hdir)
                            return '-50%';
                        return '0';
                    };
                    //@interface toggleStatus 交替改变选中状态
                    vm.toggleStatus = function () {
                        if (vmodel.disabled || vmodel.draggable)
                            return;
                        vmodel._toggle();
                    };
                    vm._toggle = function () {
                        vmodel.checked = !vmodel.checked;
                        vmodel._animate();
                    };
                    vm._getDir = function () {
                        return vmodel.checked && !vmodel.hdir || !vmodel.checked && vmodel.hdir;
                    };
                    vm._animate = function (to, fn) {
                        var dir = vmodel._getDir(), lt = bar.style[vmodel.dir];
                        if (!css3support && vmodel.animated) {
                            clearTimeout(timer);
                            if (/px/.test(lt)) {
                                lt = -parseInt((parseInt(lt) >> 0) / bar.parentNode.clientWidth * 100);
                            } else {
                                lt = -parseInt(lt) >> 0;
                            }
                            var distance;
                            if (dir) {
                                distance = vmodel._animateArrMaker(lt, to == void 0 ? 50 : to);
                            } else {
                                distance = vmodel._animateArrMaker(lt, to == void 0 ? 0 : to);
                            }
                            bar.style[vmodel.dir] = -distance[0] + '%';
                            distance.splice(0, 1);
                            timer = setInterval(function () {
                                if (!distance.length) {
                                    fn && fn();
                                    return;
                                }
                                bar.style[vmodel.dir] = -distance[0] + '%';
                                distance.splice(0, 1);
                            }, 100);
                        } else if (vmodel.animated) {
                            bar.style[vmodel.dir] = dir ? '-50%' : '0';
                        }
                    };
                    //@interface disable 禁用组件
                    vm.disable = function () {
                        vmodel.disabled = true;
                    };
                    //@interface enable 启用组件
                    vm.enable = function () {
                        vmodel.disabled = false;
                    };
                    vm._getFillColor = function () {
                        return vmodel.disabled ? vmodel.disabledColor : vmodel.checked ? vmodel.onColor : vmodel.offColor;
                    };
                    vm._shallDrawSvg = function () {
                        return vmodel.$svgSupport && !radiusSupport;
                    };
                    vm._shallDrawVML = function () {
                        return !vmodel.$svgSupport && !radiusSupport;
                    };
                    vm.radiusSupport = radiusSupport;
                    // 根据样式绘制圆，圆角等
                    //interface _draw() 动态更换皮肤后，可以调用这个方法更新提取switch样式
                    // vm._draw = function() {
                    //     if(radiusSupport) return
                    //     var divs = newDiv.getElementsByTagName("div")
                    //         , bs = newDiv.getElementsByTagName("b")
                    //         , bg
                    //         , ball
                    //     if(vmodel.getStyleFromSkin) {
                    //         avalon.each(divs, function(i, item) {
                    //             var ae = avalon(item)
                    //             if(ae.hasClass("oni-flipswitch-bg")) bg = ae
                    //         }) 
                    //         avalon.each(bs, function(i, item) {
                    //             var ae = avalon(item)
                    //             if(ae.hasClass("oni-flipswitch-dragger-ball")) ball = ae
                    //         }) 
                    //     }
                    //     if(bg) {
                    //         // 从css里面提取颜色等设置，写入vmodel
                    //         var par = avalon(newDiv),
                    //             bgColor = bg.css("background-color"),
                    //             offColor = bgColor,
                    //             disabledColor = bgColor,
                    //             w = bg.css("width"),
                    //             h = bg.css("height")
                    //         // 防止由于样式没有加载成功造成无法获取正确的样式
                    //         if(!parseInt(h)) {
                    //             return setTimeout(vmodel._draw, 16)
                    //         }
                    //         if(vmodel.disabled) {
                    //             vmodel.disabled = false
                    //             if(vmodel.checked) {
                    //                 bgColor = bg.css("background-color")
                    //                 vmodel.checked = false
                    //                 offColor = bg.css("background-color")
                    //                 vmodel.checked = true
                    //             } else {
                    //                 offColor = bg.css("background-color")
                    //                 vmodel.checked = true
                    //                 bgColor = bg.css("background-color")
                    //                 vmodel.checked = false
                    //             }
                    //             vmodel.disabled = true
                    //         } else {
                    //             if(vmodel.checked) {
                    //                 bgColor = bg.css("background-color")
                    //                 vmodel.checked = false
                    //                 offColor = bg.css("background-color")
                    //                 vmodel.checked = true
                    //             } else {
                    //                 vmodel.checked = true
                    //                 bgColor = bg.css("background-color")
                    //                 vmodel.checked = false
                    //             }
                    //             vmodel.disabled = true
                    //             disabledColor = bg.css("background-color")
                    //             vmodel.disabled = false
                    //         }
                    //         vmodel.onColor = bgColor
                    //         vmodel.offColor = offColor
                    //         vmodel.disabledColor = disabledColor
                    //         vmodel.height = parseInt(h)
                    //         vmodel.width = parseInt(w)
                    //         bg.css("background-color", "transparent")
                    //     }
                    //     if(ball) {
                    //         var bbColor = ball.css("background-color"),
                    //             bw = parseInt(ball.css("width")) >> 0
                    //         vmodel.draggerColor = bbColor
                    //         vmodel.draggerRadius = bw / 2
                    //         ball.css("background-color", "transparent")
                    //     }
                    // }
                    return vm;
                });
            vmodel.$watch('checked', function (newValue, oldValue) {
                vmodel.onChange && vmodel.onChange(newValue, vmodel);
            });
            return vmodel;
        };
    widget.defaults = {
        toggle: true,
        //@config 组件是否显示，可以通过设置为false来隐藏组件
        onText: '<b class="oni-flipswitch-on"></b>',
        //@config 选中状态提示文字
        offText: '',
        //"&times;",         //@config 未选中状态提示文字
        size: 'normal',
        //@config 滑动条类型，默认normal，可设置为large,small,mini，以及其他任意组件不自带的名词，可以用来注入自定义class，生成ui-flipswitch-{{size}}添加给flipswitch模板容器
        theme: 'normal',
        //@config 主题，normal,success,warning,danger
        draggable: false,
        //@config 是否支持拖动切换状态
        disabled: false,
        //@config 禁用
        checked: false,
        //@config 默认选中状态
        animated: true,
        //@config 是否开启切换动画效果
        hdir: true,
        //@config 开启、关闭选项排列顺序默认为true，即on-off,false为off-on
        dir: 'left',
        //\@config 组件排列方向,left,to
        getStyleFromSkin: true,
        //\@config 是否从皮肤的css里面计算获取圆形进度条样式，默认为true，设置为true的时候，将忽略下面draggerColor,draggerRadius,onColor,offColor,height,width,draggerRadius样式设置
        draggerColor: '#ffffff',
        //\@config 推动头颜色，会尝试自动到样式文件里面提取
        // draggerHoverColor: "#ffffff",
        onColor: '#45A846',
        //\@config 选中情况颜色，会尝试自动到样式文件里面提取
        offColor: '#D5D5D5',
        //\@config 未选中情况颜色，会尝试自动到样式文件里面提取
        disabledColor: '#DEDEDE',
        //\@config 禁用情况颜色，会尝试自动到样式文件里面提取
        draggerRadius: 12,
        //\@config normal size拖动头半径，会尝试自动到样式文件里面提取
        height: 24,
        //\@config normal size高度，会尝试自动到样式文件里面提取
        width: 48,
        //\@config normal size宽度，会尝试自动到样式文件里面提取
        css3support: false,
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        //@config _animateArrMaker(from, to) 不支持css3动画效果步长生成器函数，返回一个数组，类似[0,xx,xx,xx,50]
        _animateArrMaker: function (from, to) {
            var arr = [], dis = to - from;
            while (from != to) {
                from += parseInt(dis / 1.5);
                dis = parseInt(dis - dis / 1.5);
                if (Math.abs(dis) <= 1)
                    from = to;
                arr.push(from);
            }
            if (!arr.length)
                arr = [to];
            return arr;
        },
        //@config onChange(newValue, vmodel) 选中状态发生变化时触发，参数为当前的选中状态及vmodel对象
        onChange: avalon.noop,
        //@config getTemplate(tmpl, opts) 用于修改模板的接口，默认不做修改
        getTemplate: function (tmpl, opts) {
            return tmpl;
        },
        _author: 'skipper@123'
    };
}
)();
},{"../avalon.getModel":6,"../draggable/avalon.draggable":20,"avalon":2}],24:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    //组合键绑定
    var specialKeys = {
            8: 'backspace',
            9: 'tab',
            10: 'return',
            13: 'return',
            16: 'shift',
            17: 'ctrl',
            18: 'alt',
            19: 'pause',
            20: 'capslock',
            27: 'esc',
            32: 'space',
            33: 'pageup',
            34: 'pagedown',
            35: 'end',
            36: 'home',
            37: 'left',
            38: 'up',
            39: 'right',
            40: 'down',
            45: 'insert',
            46: 'del',
            96: '0',
            97: '1',
            98: '2',
            99: '3',
            100: '4',
            101: '5',
            102: '6',
            103: '7',
            104: '8',
            105: '9',
            106: '*',
            107: '+',
            109: '-',
            110: '.',
            111: '/',
            112: 'f1',
            113: 'f2',
            114: 'f3',
            115: 'f4',
            116: 'f5',
            117: 'f6',
            118: 'f7',
            119: 'f8',
            120: 'f9',
            121: 'f10',
            122: 'f11',
            123: 'f12',
            144: 'numlock',
            145: 'scroll',
            186: ';',
            191: '/',
            220: '\\',
            222: '\'',
            224: 'meta'
        };
    var shiftNums = {
            '`': '~',
            '1': '!',
            '2': '@',
            '3': '#',
            '4': '$',
            '5': '%',
            '6': '^',
            '7': '&',
            '8': '*',
            '9': '(',
            '0': ')',
            '-': '_',
            '=': '+',
            ';': ': ',
            '\'': '"',
            ',': '<',
            '.': '>',
            '/': '?',
            '\\': '|'
        };
    function sortKey(key) {
        return key.replace('++', '+add').split('+').sort().join('+');
    }
    var callbacks = [];
    function check(event, hotkeys) {
        var special = specialKeys[event.keyCode],
            //将keyCode转换为各种值
            character = String.fromCharCode(event.which).toLowerCase(), modif = '', possible = {};
        // 处理各种组合情况 (alt|ctrl|shift+X)
        if (event.altKey && special !== 'alt') {
            modif += 'alt+';
        }
        if (event.ctrlKey && special !== 'ctrl') {
            modif += 'ctrl+';
        }
        if (event.metaKey && !event.ctrlKey && special !== 'meta') {
            modif += 'meta+';
        }
        if (event.shiftKey && special !== 'shift') {
            modif += 'shift+';
        }
        if (character) {
            possible[sortKey(modif + character)] = true;
            possible[sortKey(modif + shiftNums[character])] = true;
            if (modif === 'shift+') {
                possible[shiftNums[character]] = true;
            }
        }
        if (possible[hotkeys]) {
            return true;
        }
    }
    avalon.bindingHandlers.hotkeys = function (data, vmodels) {
        data.specialBind = function (elem, fn) {
            var obj = {
                    elem: elem,
                    fn: fn,
                    hotkeys: sortKey(data.param)
                };
            callbacks.push(obj);
            data.specialUnbind = function () {
                avalon.Array.remove(callbacks, obj);
                delete data.specialBind;
                delete data.specialUnbind;
            };
        };
        data.type = 'on';
        avalon.bindingHandlers.on(data, vmodels);
    };
    //avalon.bindingExecutors.hotkeys = avalon.bindingExecutors.on
    var root = document.documentElement;
    var hotkeysCallback = function (e) {
        var safelist = callbacks.concat();
        for (var i = 0, obj; obj = safelist[i++];) {
            if (root.contains(obj.elem)) {
                if (check.call(obj.elem, e, obj.hotkeys)) {
                    return obj.fn.call(obj.elem, e);
                }
            } else {
                avalon.Array.remove(callbacks, obj);
            }
        }
    };
    avalon.bind(document, 'keydown', hotkeysCallback);
    return avalon;
}
)();
},{"avalon":2}],25:[function(innerRequire,module,exports){
innerRequire("../datepicker/avalon.datepicker.js");

module.exports = (
function () {
    var datepicker = avalon.ui.datepicker;
    datepicker.defaultRegional = datepicker.regional['en'] = {
        dayNames: [
            'Sun',
            'Mon',
            'Tue',
            'Wed',
            'Thu',
            'Fri',
            'Sat'
        ],
        //该变量被注册到了vm中，同时在方法中使用
        weekDayNames: [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday'
        ],
        monthNames: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ],
        monthNamesShort: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
        ],
        closeText: 'Done',
        prevText: 'Prev',
        prevDayText: 'Yesterday',
        nextText: 'Next',
        nextDayText: 'Tomorrow',
        dayAfterTomorrow: 'TDAT',
        currentDayText: 'TDA',
        currentDayFullText: 'Today',
        showMonthAfterYear: false,
        titleFormat: function (year, month) {
            return this.monthNames[month] + ' ' + year;
        },
        dayText: 'Day',
        weekText: 'Week',
        yearText: '',
        monthText: '',
        timerText: 'Timer',
        hourText: 'Hour',
        minuteText: 'Minutes',
        nowText: 'Now',
        confirmText: 'Confirm'
    };
}
)();
},{"../datepicker/avalon.datepicker.js":15}],26:[function(innerRequire,module,exports){
innerRequire("../pager/avalon.pager.js");

module.exports = (
function () {
    var pager = avalon.ui.pager;
    pager.defaultRegional = pager.regional['en'] = {
        prevText: 'Prev',
        nextText: 'Next',
        confirmText: 'Confirm',
        totalText: '',
        pagesText: ' total pages.',
        pageText: '',
        toText: 'To',
        jumpToText: 'JumpTo',
        currentText: 'CurrentPage',
        firstText: 'FirstPage',
        lastText: 'LastPage',
        numberText: ''
    };
}
)();
},{"../pager/avalon.pager.js":46}],27:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    if (Object.prototype.toString.call(window.JSON) === '[object JSON]') {
        return window.JSON;
    } else {
        var JSON = window.JSON = { fake: true };
        function f(n) {
            //补零
            return n < 10 ? '0' + n : n;
        }
        function toJSON(obj, type) {
            //序列化字符串,数字,布尔与日期
            return type === 'date' ? '(new Date(' + obj.valueOf() + '))' : type === 'string' ? quote(obj) : obj + '';
        }
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
                // table of character substitutions
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
            }, rep;
        function quote(string) {
            //为字符串两边加双引号
            escapable.lastIndex = 0;
            return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"' : '"' + string + '"';
        }
        //开始序列化各种数据类型
        function str(key, holder) {
            var i,
                // The loop counter.
                k,
                // The member key.
                v,
                // The member value.
                length, mind = gap, partial, value = holder[key];
            if (value) {
                var type = avalon.type(value);
                if (/date|string|number|boolean/i.test(type)) {
                    return toJSON(value, type);
                }
            }
            if (typeof rep === 'function') {
                value = rep.call(holder, key, value);
            }
            switch (typeof value) {
            case 'string':
                return quote(value);
            case 'number':
                return isFinite(value) ? String(value) : 'NaN';
            case 'boolean':
            case 'null':
                return String(value);
            case 'object':
                if (!value) {
                    return 'null';
                }
                gap += indent;
                partial = [];
                if (Array.isArray(value)) {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }
                    v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }
                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }
                v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
            }
        }
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';
            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            } else if (typeof space === 'string') {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }
            return str('', { '': value });
        };
        JSON.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                j = eval('(' + text + ')');
                return typeof reviver === 'function' ? walk({ '': j }, '') : j;
            }
            throw new SyntaxError('JSON.parse');
        };
        return window.JSON;
    }
}
)();
},{"avalon":2}],28:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
K = innerRequire("./kindeditor.4.1.0.js");

module.exports = (
function () {
    var widgetName = 'kindeditor', widget = avalon.ui[widgetName] = function (element, data, vmodels) {
            var options = data[widgetName + 'Options'], $element = avalon(element);
            var vmodel = avalon.define(avalon.mix(true, {
                    $id: data[widgetName + 'Id'],
                    /**
                 * @interface kindeditor实例引用
                 */
                    $instance: null,
                    $duplexBinded: null,
                    /**
                 * @interface 组件初始化函数
                 */
                    $init: function () {
                        //对element进行扫描，初始化节点中的avalon绑定
                        avalon.scan(element, vmodels);
                        vmodel.$instance = K.create(element, vmodel.$options);
                        //在element上绑定了duplex之后，实现element与$instance的双向绑定
                        //执行顺序：
                        // (1) 从model同步到editor: vm.txt = "text" --> data.changed --> editor.html( element.value )
                        // (2) 从editor同步到model: editor.afterChange --> element.value = editor.html() --> data.handler
                        if (vmodel.$duplexBinded) {
                            var data = vmodel.$duplexBinded, $instance = vmodel.$instance, changed = data.changed, afterChange = $instance.options.afterChange, syncFlag = true;
                            //使用data.changed实现对数据改变的监听
                            data.changed = function (value, data) {
                                changed.call(this, value, data);
                                if (syncFlag) {
                                    $instance.html($element.val());
                                } else {
                                    syncFlag = true;
                                }
                            };
                            //在$instance中通过注入afterChange实现对editor内容改变的监听
                            $instance.options.afterChange = function () {
                                if (avalon.type(afterChange) === 'function') {
                                    afterChange.call($instance);
                                }
                                //kindeditor的afterchange事件无论值是否改变都会触发
                                //如果当前editor的值与vm中变量的值不一致，对元素进行赋值，并将syncFlag置为false，进行单向处理，防止死循环
                                if ($element.val() !== $instance.html()) {
                                    syncFlag = false;
                                    $element.val($instance.html());
                                    data.handler();
                                } else {
                                    syncFlag = true;
                                }
                            };
                        }
                        if (typeof vmodel.onInit === 'function') {
                            vmodel.onInit.call(element, vmodel, options, vmodels);
                        }
                    },
                    /**
                 * @interface textarea移除编辑器，删除属性并回收vmodel
                 */
                    remove: function () {
                        K.remove(element);
                        element.removeAttribute('avalonctrl');
                        delete avalon.vmodels[vmodel.$id];
                    },
                    /**
                 * @interface 当组件移出DOM树时,系统自动调用的销毁函数
                 */
                    $remove: function () {
                    }
                }, options));
            //如果element绑定了ms-duplex，对editor中的内容进行同步
            vmodel.$watch('avalon-ms-duplex-init', function (data) {
                vmodel.$duplexBinded = data;
            });
            return vmodel;
        };
    widget.defaults = {
        //@config 传递给kindeditor的配置项
        $options: {
            wellFormatMode: false    //美化HTML数据，默认为false，美化HTML在duplex模式下会额外触发变量的改变事件
        },
        onInit: avalon.noop
    };
    return avalon;
}
)();
},{"./kindeditor.4.1.0.js":29,"avalon":2}],29:[function(innerRequire,module,exports){
module.exports = (
function () {
    if (!window.console) {
        window.console = {};
    }
    if (!console.log) {
        console.log = function () {
        };
    }
    if (window.KindEditor) {
        return window.KindEditor;
    }
    var _VERSION = '4.1.10 (2013-11-23)', _ua = navigator.userAgent.toLowerCase(), _IE = _ua.indexOf('msie') > -1 && _ua.indexOf('opera') == -1, _NEWIE = _ua.indexOf('msie') == -1 && _ua.indexOf('trident') > -1, _GECKO = _ua.indexOf('gecko') > -1 && _ua.indexOf('khtml') == -1, _WEBKIT = _ua.indexOf('applewebkit') > -1, _OPERA = _ua.indexOf('opera') > -1, _MOBILE = _ua.indexOf('mobile') > -1, _IOS = /ipad|iphone|ipod/.test(_ua), _QUIRKS = document.compatMode != 'CSS1Compat', _IERANGE = !window.getSelection, _matches = /(?:msie|firefox|webkit|opera)[\/:\s](\d+)/.exec(_ua), _V = _matches ? _matches[1] : '0', _TIME = new Date().getTime();
    function _isArray(val) {
        if (!val) {
            return false;
        }
        return Object.prototype.toString.call(val) === '[object Array]';
    }
    function _isFunction(val) {
        if (!val) {
            return false;
        }
        return Object.prototype.toString.call(val) === '[object Function]';
    }
    function _inArray(val, arr) {
        for (var i = 0, len = arr.length; i < len; i++) {
            if (val === arr[i]) {
                return i;
            }
        }
        return -1;
    }
    function _each(obj, fn) {
        if (_isArray(obj)) {
            for (var i = 0, len = obj.length; i < len; i++) {
                if (fn.call(obj[i], i, obj[i]) === false) {
                    break;
                }
            }
        } else {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (fn.call(obj[key], key, obj[key]) === false) {
                        break;
                    }
                }
            }
        }
    }
    function _trim(str) {
        return str.replace(/(?:^[ \t\n\r]+)|(?:[ \t\n\r]+$)/g, '');
    }
    function _inString(val, str, delimiter) {
        delimiter = delimiter === undefined ? ',' : delimiter;
        return (delimiter + str + delimiter).indexOf(delimiter + val + delimiter) >= 0;
    }
    function _addUnit(val, unit) {
        unit = unit || 'px';
        return val && /^\d+$/.test(val) ? val + unit : val;
    }
    function _removeUnit(val) {
        var match;
        return val && (match = /(\d+)/.exec(val)) ? parseInt(match[1], 10) : 0;
    }
    function _escape(val) {
        return val.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    }
    function _unescape(val) {
        return val.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&amp;/g, '&');
    }
    function _toCamel(str) {
        var arr = str.split('-');
        str = '';
        _each(arr, function (key, val) {
            str += key > 0 ? val.charAt(0).toUpperCase() + val.substr(1) : val;
        });
        return str;
    }
    function _toHex(val) {
        function hex(d) {
            var s = parseInt(d, 10).toString(16).toUpperCase();
            return s.length > 1 ? s : '0' + s;
        }
        return val.replace(/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/gi, function ($0, $1, $2, $3) {
            return '#' + hex($1) + hex($2) + hex($3);
        });
    }
    function _toMap(val, delimiter) {
        delimiter = delimiter === undefined ? ',' : delimiter;
        var map = {}, arr = _isArray(val) ? val : val.split(delimiter), match;
        _each(arr, function (key, val) {
            if (match = /^(\d+)\.\.(\d+)$/.exec(val)) {
                for (var i = parseInt(match[1], 10); i <= parseInt(match[2], 10); i++) {
                    map[i.toString()] = true;
                }
            } else {
                map[val] = true;
            }
        });
        return map;
    }
    function _toArray(obj, offset) {
        return Array.prototype.slice.call(obj, offset || 0);
    }
    function _undef(val, defaultVal) {
        return val === undefined ? defaultVal : val;
    }
    function _invalidUrl(url) {
        return !url || /[<>"]/.test(url);
    }
    function _addParam(url, param) {
        return url.indexOf('?') >= 0 ? url + '&' + param : url + '?' + param;
    }
    function _extend(child, parent, proto) {
        if (!proto) {
            proto = parent;
            parent = null;
        }
        var childProto;
        if (parent) {
            var fn = function () {
            };
            fn.prototype = parent.prototype;
            childProto = new fn();
            _each(proto, function (key, val) {
                childProto[key] = val;
            });
        } else {
            childProto = proto;
        }
        childProto.constructor = child;
        child.prototype = childProto;
        child.parent = parent ? parent.prototype : null;
    }
    function _json(text) {
        var match;
        if (match = /\{[\s\S]*\}|\[[\s\S]*\]/.exec(text)) {
            text = match[0];
        }
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        cx.lastIndex = 0;
        if (cx.test(text)) {
            text = text.replace(cx, function (a) {
                return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            });
        }
        if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
            return eval('(' + text + ')');
        }
        throw 'JSON parse error';
    }
    var _round = Math.round;
    var K = {
            DEBUG: false,
            VERSION: _VERSION,
            IE: _IE,
            GECKO: _GECKO,
            WEBKIT: _WEBKIT,
            OPERA: _OPERA,
            V: _V,
            TIME: _TIME,
            each: _each,
            isArray: _isArray,
            isFunction: _isFunction,
            inArray: _inArray,
            inString: _inString,
            trim: _trim,
            addUnit: _addUnit,
            removeUnit: _removeUnit,
            escape: _escape,
            unescape: _unescape,
            toCamel: _toCamel,
            toHex: _toHex,
            toMap: _toMap,
            toArray: _toArray,
            undef: _undef,
            invalidUrl: _invalidUrl,
            addParam: _addParam,
            extend: _extend,
            json: _json
        };
    var _INLINE_TAG_MAP = _toMap('a,abbr,acronym,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,img,input,ins,kbd,label,map,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'), _BLOCK_TAG_MAP = _toMap('address,applet,blockquote,body,center,dd,dir,div,dl,dt,fieldset,form,frameset,h1,h2,h3,h4,h5,h6,head,hr,html,iframe,ins,isindex,li,map,menu,meta,noframes,noscript,object,ol,p,pre,script,style,table,tbody,td,tfoot,th,thead,title,tr,ul'), _SINGLE_TAG_MAP = _toMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed'), _STYLE_TAG_MAP = _toMap('b,basefont,big,del,em,font,i,s,small,span,strike,strong,sub,sup,u'), _CONTROL_TAG_MAP = _toMap('img,table,input,textarea,button'), _PRE_TAG_MAP = _toMap('pre,style,script'), _NOSPLIT_TAG_MAP = _toMap('html,head,body,td,tr,table,ol,ul,li'), _AUTOCLOSE_TAG_MAP = _toMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr'), _FILL_ATTR_MAP = _toMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected'), _VALUE_TAG_MAP = _toMap('input,button,textarea,select');
    function _getBasePath() {
        var els = document.getElementsByTagName('script'), src;
        for (var i = 0, len = els.length; i < len; i++) {
            src = els[i].src || '';
            if (/kindeditor[\w\-\.]*\.js/.test(src)) {
                return src.substring(0, src.lastIndexOf('/') + 1);
            }
        }
        return '';
    }
    K.basePath = _getBasePath();
    K.options = {
        designMode: true,
        fullscreenMode: false,
        filterMode: true,
        wellFormatMode: true,
        shadowMode: true,
        loadStyleMode: true,
        basePath: K.basePath,
        themesPath: K.basePath + 'themes/',
        langPath: K.basePath + 'lang/',
        pluginsPath: K.basePath + 'plugins/',
        themeType: 'default',
        langType: 'zh_CN',
        urlType: '',
        newlineTag: 'p',
        resizeType: 2,
        syncType: 'form',
        pasteType: 2,
        dialogAlignType: 'page',
        useContextmenu: true,
        fullscreenShortcut: false,
        bodyClass: 'ke-content',
        indentChar: '\t',
        cssPath: '',
        cssData: '',
        minWidth: 650,
        minHeight: 100,
        minChangeSize: 50,
        zIndex: 811213,
        items: [
            'source',
            '|',
            'undo',
            'redo',
            '|',
            'preview',
            'print',
            'template',
            'code',
            'cut',
            'copy',
            'paste',
            'plainpaste',
            'wordpaste',
            '|',
            'justifyleft',
            'justifycenter',
            'justifyright',
            'justifyfull',
            'insertorderedlist',
            'insertunorderedlist',
            'indent',
            'outdent',
            'subscript',
            'superscript',
            'clearhtml',
            'quickformat',
            'selectall',
            '|',
            'fullscreen',
            '/',
            'formatblock',
            'fontname',
            'fontsize',
            '|',
            'forecolor',
            'hilitecolor',
            'bold',
            'italic',
            'underline',
            'strikethrough',
            'lineheight',
            'removeformat',
            '|',
            'image',
            'multiimage',
            'flash',
            'media',
            'insertfile',
            'table',
            'hr',
            'emoticons',
            'baidumap',
            'pagebreak',
            'anchor',
            'link',
            'unlink',
            '|',
            'about'
        ],
        noDisableItems: [
            'source',
            'fullscreen'
        ],
        colorTable: [
            [
                '#E53333',
                '#E56600',
                '#FF9900',
                '#64451D',
                '#DFC5A4',
                '#FFE500'
            ],
            [
                '#009900',
                '#006600',
                '#99BB00',
                '#B8D100',
                '#60D978',
                '#00D5FF'
            ],
            [
                '#337FE5',
                '#003399',
                '#4C33E5',
                '#9933E5',
                '#CC33E5',
                '#EE33EE'
            ],
            [
                '#FFFFFF',
                '#CCCCCC',
                '#999999',
                '#666666',
                '#333333',
                '#000000'
            ]
        ],
        fontSizeTable: [
            '9px',
            '10px',
            '12px',
            '14px',
            '16px',
            '18px',
            '24px',
            '32px'
        ],
        htmlTags: {
            font: [
                'id',
                'class',
                'color',
                'size',
                'face',
                '.background-color'
            ],
            span: [
                'id',
                'class',
                '.color',
                '.background-color',
                '.font-size',
                '.font-family',
                '.background',
                '.font-weight',
                '.font-style',
                '.text-decoration',
                '.vertical-align',
                '.line-height'
            ],
            div: [
                'id',
                'class',
                'align',
                '.border',
                '.margin',
                '.padding',
                '.text-align',
                '.color',
                '.background-color',
                '.font-size',
                '.font-family',
                '.font-weight',
                '.background',
                '.font-style',
                '.text-decoration',
                '.vertical-align',
                '.margin-left'
            ],
            table: [
                'id',
                'class',
                'border',
                'cellspacing',
                'cellpadding',
                'width',
                'height',
                'align',
                'bordercolor',
                '.padding',
                '.margin',
                '.border',
                'bgcolor',
                '.text-align',
                '.color',
                '.background-color',
                '.font-size',
                '.font-family',
                '.font-weight',
                '.font-style',
                '.text-decoration',
                '.background',
                '.width',
                '.height',
                '.border-collapse'
            ],
            'td,th': [
                'id',
                'class',
                'align',
                'valign',
                'width',
                'height',
                'colspan',
                'rowspan',
                'bgcolor',
                '.text-align',
                '.color',
                '.background-color',
                '.font-size',
                '.font-family',
                '.font-weight',
                '.font-style',
                '.text-decoration',
                '.vertical-align',
                '.background',
                '.border'
            ],
            a: [
                'id',
                'class',
                'href',
                'target',
                'name'
            ],
            embed: [
                'id',
                'class',
                'src',
                'width',
                'height',
                'type',
                'loop',
                'autostart',
                'quality',
                '.width',
                '.height',
                'align',
                'allowscriptaccess'
            ],
            img: [
                'id',
                'class',
                'src',
                'width',
                'height',
                'border',
                'alt',
                'title',
                'align',
                '.width',
                '.height',
                '.border'
            ],
            'p,ol,ul,li,blockquote,h1,h2,h3,h4,h5,h6': [
                'id',
                'class',
                'align',
                '.text-align',
                '.color',
                '.background-color',
                '.font-size',
                '.font-family',
                '.background',
                '.font-weight',
                '.font-style',
                '.text-decoration',
                '.vertical-align',
                '.text-indent',
                '.margin-left'
            ],
            pre: [
                'id',
                'class'
            ],
            hr: [
                'id',
                'class',
                '.page-break-after'
            ],
            'br,tbody,tr,strong,b,sub,sup,em,i,u,strike,s,del': [
                'id',
                'class'
            ],
            iframe: [
                'id',
                'class',
                'src',
                'frameborder',
                'width',
                'height',
                '.width',
                '.height'
            ]
        },
        layout: '<div class="container"><div class="toolbar"></div><div class="edit"></div><div class="statusbar"></div></div>'
    };
    var _useCapture = false;
    var _INPUT_KEY_MAP = _toMap('8,9,13,32,46,48..57,59,61,65..90,106,109..111,188,190..192,219..222');
    var _CURSORMOVE_KEY_MAP = _toMap('33..40');
    var _CHANGE_KEY_MAP = {};
    _each(_INPUT_KEY_MAP, function (key, val) {
        _CHANGE_KEY_MAP[key] = val;
    });
    _each(_CURSORMOVE_KEY_MAP, function (key, val) {
        _CHANGE_KEY_MAP[key] = val;
    });
    function _bindEvent(el, type, fn) {
        if (el.addEventListener) {
            el.addEventListener(type, fn, _useCapture);
        } else if (el.attachEvent) {
            el.attachEvent('on' + type, fn);
        }
    }
    function _unbindEvent(el, type, fn) {
        if (el.removeEventListener) {
            el.removeEventListener(type, fn, _useCapture);
        } else if (el.detachEvent) {
            el.detachEvent('on' + type, fn);
        }
    }
    var _EVENT_PROPS = ('altKey,attrChange,attrName,bubbles,button,cancelable,charCode,clientX,clientY,ctrlKey,currentTarget,' + 'data,detail,eventPhase,fromElement,handler,keyCode,metaKey,newValue,offsetX,offsetY,originalTarget,pageX,' + 'pageY,prevValue,relatedNode,relatedTarget,screenX,screenY,shiftKey,srcElement,target,toElement,view,wheelDelta,which').split(',');
    function KEvent(el, event) {
        this.init(el, event);
    }
    _extend(KEvent, {
        init: function (el, event) {
            var self = this, doc = el.ownerDocument || el.document || el;
            self.event = event;
            _each(_EVENT_PROPS, function (key, val) {
                self[val] = event[val];
            });
            if (!self.target) {
                self.target = self.srcElement || doc;
            }
            if (self.target.nodeType === 3) {
                self.target = self.target.parentNode;
            }
            if (!self.relatedTarget && self.fromElement) {
                self.relatedTarget = self.fromElement === self.target ? self.toElement : self.fromElement;
            }
            if (self.pageX == null && self.clientX != null) {
                var d = doc.documentElement, body = doc.body;
                self.pageX = self.clientX + (d && d.scrollLeft || body && body.scrollLeft || 0) - (d && d.clientLeft || body && body.clientLeft || 0);
                self.pageY = self.clientY + (d && d.scrollTop || body && body.scrollTop || 0) - (d && d.clientTop || body && body.clientTop || 0);
            }
            if (!self.which && (self.charCode || self.charCode === 0 ? self.charCode : self.keyCode)) {
                self.which = self.charCode || self.keyCode;
            }
            if (!self.metaKey && self.ctrlKey) {
                self.metaKey = self.ctrlKey;
            }
            if (!self.which && self.button !== undefined) {
                self.which = self.button & 1 ? 1 : self.button & 2 ? 3 : self.button & 4 ? 2 : 0;
            }
            switch (self.which) {
            case 186:
                self.which = 59;
                break;
            case 187:
            case 107:
            case 43:
                self.which = 61;
                break;
            case 189:
            case 45:
                self.which = 109;
                break;
            case 42:
                self.which = 106;
                break;
            case 47:
                self.which = 111;
                break;
            case 78:
                self.which = 110;
                break;
            }
            if (self.which >= 96 && self.which <= 105) {
                self.which -= 48;
            }
        },
        preventDefault: function () {
            var ev = this.event;
            if (ev.preventDefault) {
                ev.preventDefault();
            } else {
                ev.returnValue = false;
            }
        },
        stopPropagation: function () {
            var ev = this.event;
            if (ev.stopPropagation) {
                ev.stopPropagation();
            } else {
                ev.cancelBubble = true;
            }
        },
        stop: function () {
            this.preventDefault();
            this.stopPropagation();
        }
    });
    var _eventExpendo = 'kindeditor_' + _TIME, _eventId = 0, _eventData = {};
    function _getId(el) {
        return el[_eventExpendo] || null;
    }
    function _setId(el) {
        el[_eventExpendo] = ++_eventId;
        return _eventId;
    }
    function _removeId(el) {
        try {
            delete el[_eventExpendo];
        } catch (e) {
            if (el.removeAttribute) {
                el.removeAttribute(_eventExpendo);
            }
        }
    }
    function _bind(el, type, fn) {
        if (type.indexOf(',') >= 0) {
            _each(type.split(','), function () {
                _bind(el, this, fn);
            });
            return;
        }
        var id = _getId(el);
        if (!id) {
            id = _setId(el);
        }
        if (_eventData[id] === undefined) {
            _eventData[id] = {};
        }
        var events = _eventData[id][type];
        if (events && events.length > 0) {
            _unbindEvent(el, type, events[0]);
        } else {
            _eventData[id][type] = [];
            _eventData[id].el = el;
        }
        events = _eventData[id][type];
        if (events.length === 0) {
            events[0] = function (e) {
                var kevent = e ? new KEvent(el, e) : undefined;
                _each(events, function (i, event) {
                    if (i > 0 && event) {
                        event.call(el, kevent);
                    }
                });
            };
        }
        if (_inArray(fn, events) < 0) {
            events.push(fn);
        }
        _bindEvent(el, type, events[0]);
    }
    function _unbind(el, type, fn) {
        if (type && type.indexOf(',') >= 0) {
            _each(type.split(','), function () {
                _unbind(el, this, fn);
            });
            return;
        }
        var id = _getId(el);
        if (!id) {
            return;
        }
        if (type === undefined) {
            if (id in _eventData) {
                _each(_eventData[id], function (key, events) {
                    if (key != 'el' && events.length > 0) {
                        _unbindEvent(el, key, events[0]);
                    }
                });
                delete _eventData[id];
                _removeId(el);
            }
            return;
        }
        if (!_eventData[id]) {
            return;
        }
        var events = _eventData[id][type];
        if (events && events.length > 0) {
            if (fn === undefined) {
                _unbindEvent(el, type, events[0]);
                delete _eventData[id][type];
            } else {
                _each(events, function (i, event) {
                    if (i > 0 && event === fn) {
                        events.splice(i, 1);
                    }
                });
                if (events.length == 1) {
                    _unbindEvent(el, type, events[0]);
                    delete _eventData[id][type];
                }
            }
            var count = 0;
            _each(_eventData[id], function () {
                count++;
            });
            if (count < 2) {
                delete _eventData[id];
                _removeId(el);
            }
        }
    }
    function _fire(el, type) {
        if (type.indexOf(',') >= 0) {
            _each(type.split(','), function () {
                _fire(el, this);
            });
            return;
        }
        var id = _getId(el);
        if (!id) {
            return;
        }
        var events = _eventData[id][type];
        if (_eventData[id] && events && events.length > 0) {
            events[0]();
        }
    }
    function _ctrl(el, key, fn) {
        var self = this;
        key = /^\d{2,}$/.test(key) ? key : key.toUpperCase().charCodeAt(0);
        _bind(el, 'keydown', function (e) {
            if (e.ctrlKey && e.which == key && !e.shiftKey && !e.altKey) {
                fn.call(el);
                e.stop();
            }
        });
    }
    var _readyFinished = false;
    function _ready(fn) {
        if (_readyFinished) {
            fn(KindEditor);
            return;
        }
        var loaded = false;
        function readyFunc() {
            if (!loaded) {
                loaded = true;
                fn(KindEditor);
                _readyFinished = true;
            }
        }
        function ieReadyFunc() {
            if (!loaded) {
                try {
                    document.documentElement.doScroll('left');
                } catch (e) {
                    setTimeout(ieReadyFunc, 100);
                    return;
                }
                readyFunc();
            }
        }
        function ieReadyStateFunc() {
            if (document.readyState === 'complete') {
                readyFunc();
            }
        }
        if (document.addEventListener) {
            _bind(document, 'DOMContentLoaded', readyFunc);
        } else if (document.attachEvent) {
            _bind(document, 'readystatechange', ieReadyStateFunc);
            var toplevel = false;
            try {
                toplevel = window.frameElement == null;
            } catch (e) {
            }
            if (document.documentElement.doScroll && toplevel) {
                ieReadyFunc();
            }
        }
        _bind(window, 'load', readyFunc);
    }
    if (_IE) {
        window.attachEvent('onunload', function () {
            _each(_eventData, function (key, events) {
                if (events.el) {
                    _unbind(events.el);
                }
            });
        });
    }
    K.ctrl = _ctrl;
    K.ready = _ready;
    function _getCssList(css) {
        var list = {}, reg = /\s*([\w\-]+)\s*:([^;]*)(;|$)/g, match;
        while (match = reg.exec(css)) {
            var key = _trim(match[1].toLowerCase()), val = _trim(_toHex(match[2]));
            list[key] = val;
        }
        return list;
    }
    function _getAttrList(tag) {
        var list = {}, reg = /\s+(?:([\w\-:]+)|(?:([\w\-:]+)=([^\s"'<>]+))|(?:([\w\-:"]+)="([^"]*)")|(?:([\w\-:"]+)='([^']*)'))(?=(?:\s|\/|>)+)/g, match;
        while (match = reg.exec(tag)) {
            var key = (match[1] || match[2] || match[4] || match[6]).toLowerCase(), val = (match[2] ? match[3] : match[4] ? match[5] : match[7]) || '';
            list[key] = val;
        }
        return list;
    }
    function _addClassToTag(tag, className) {
        if (/\s+class\s*=/.test(tag)) {
            tag = tag.replace(/(\s+class=["']?)([^"']*)(["']?[\s>])/, function ($0, $1, $2, $3) {
                if ((' ' + $2 + ' ').indexOf(' ' + className + ' ') < 0) {
                    return $2 === '' ? $1 + className + $3 : $1 + $2 + ' ' + className + $3;
                } else {
                    return $0;
                }
            });
        } else {
            tag = tag.substr(0, tag.length - 1) + ' class="' + className + '">';
        }
        return tag;
    }
    function _formatCss(css) {
        var str = '';
        _each(_getCssList(css), function (key, val) {
            str += key + ':' + val + ';';
        });
        return str;
    }
    function _formatUrl(url, mode, host, pathname) {
        mode = _undef(mode, '').toLowerCase();
        if (url.substr(0, 5) != 'data:') {
            url = url.replace(/([^:])\/\//g, '$1/');
        }
        if (_inArray(mode, [
                'absolute',
                'relative',
                'domain'
            ]) < 0) {
            return url;
        }
        host = host || location.protocol + '//' + location.host;
        if (pathname === undefined) {
            var m = location.pathname.match(/^(\/.*)\//);
            pathname = m ? m[1] : '';
        }
        var match;
        if (match = /^(\w+:\/\/[^\/]*)/.exec(url)) {
            if (match[1] !== host) {
                return url;
            }
        } else if (/^\w+:/.test(url)) {
            return url;
        }
        function getRealPath(path) {
            var parts = path.split('/'), paths = [];
            for (var i = 0, len = parts.length; i < len; i++) {
                var part = parts[i];
                if (part == '..') {
                    if (paths.length > 0) {
                        paths.pop();
                    }
                } else if (part !== '' && part != '.') {
                    paths.push(part);
                }
            }
            return '/' + paths.join('/');
        }
        if (/^\//.test(url)) {
            url = host + getRealPath(url.substr(1));
        } else if (!/^\w+:\/\//.test(url)) {
            url = host + getRealPath(pathname + '/' + url);
        }
        function getRelativePath(path, depth) {
            if (url.substr(0, path.length) === path) {
                var arr = [];
                for (var i = 0; i < depth; i++) {
                    arr.push('..');
                }
                var prefix = '.';
                if (arr.length > 0) {
                    prefix += '/' + arr.join('/');
                }
                if (pathname == '/') {
                    prefix += '/';
                }
                return prefix + url.substr(path.length);
            } else {
                if (match = /^(.*)\//.exec(path)) {
                    return getRelativePath(match[1], ++depth);
                }
            }
        }
        if (mode === 'relative') {
            url = getRelativePath(host + pathname, 0).substr(2);
        } else if (mode === 'absolute') {
            if (url.substr(0, host.length) === host) {
                url = url.substr(host.length);
            }
        }
        return url;
    }
    function _formatHtml(html, htmlTags, urlType, wellFormatted, indentChar) {
        if (html == null) {
            html = '';
        }
        urlType = urlType || '';
        wellFormatted = _undef(wellFormatted, false);
        indentChar = _undef(indentChar, '\t');
        var fontSizeList = 'xx-small,x-small,small,medium,large,x-large,xx-large'.split(',');
        html = html.replace(/(<(?:pre|pre\s[^>]*)>)([\s\S]*?)(<\/pre>)/gi, function ($0, $1, $2, $3) {
            return $1 + $2.replace(/<(?:br|br\s[^>]*)>/gi, '\n') + $3;
        });
        html = html.replace(/<(?:br|br\s[^>]*)\s*\/?>\s*<\/p>/gi, '</p>');
        html = html.replace(/(<(?:p|p\s[^>]*)>)\s*(<\/p>)/gi, '$1<br />$2');
        html = html.replace(/\u200B/g, '');
        html = html.replace(/\u00A9/g, '&copy;');
        html = html.replace(/\u00AE/g, '&reg;');
        html = html.replace(/<[^>]+/g, function ($0) {
            return $0.replace(/\s+/g, ' ');
        });
        var htmlTagMap = {};
        if (htmlTags) {
            _each(htmlTags, function (key, val) {
                var arr = key.split(',');
                for (var i = 0, len = arr.length; i < len; i++) {
                    htmlTagMap[arr[i]] = _toMap(val);
                }
            });
            if (!htmlTagMap.script) {
                html = html.replace(/(<(?:script|script\s[^>]*)>)([\s\S]*?)(<\/script>)/gi, '');
            }
            if (!htmlTagMap.style) {
                html = html.replace(/(<(?:style|style\s[^>]*)>)([\s\S]*?)(<\/style>)/gi, '');
            }
        }
        var re = /(\s*)<(\/)?([\w\-:]+)((?:\s+|(?:\s+[\w\-:]+)|(?:\s+[\w\-:]+=[^\s"'<>]+)|(?:\s+[\w\-:"]+="[^"]*")|(?:\s+[\w\-:"]+='[^']*'))*)(\/)?>(\s*)/g;
        var tagStack = [];
        html = html.replace(re, function ($0, $1, $2, $3, $4, $5, $6) {
            var full = $0, startNewline = $1 || '', startSlash = $2 || '', tagName = $3.toLowerCase(), attr = $4 || '', endSlash = $5 ? ' ' + $5 : '', endNewline = $6 || '';
            if (htmlTags && !htmlTagMap[tagName]) {
                return '';
            }
            if (endSlash === '' && _SINGLE_TAG_MAP[tagName]) {
                endSlash = ' /';
            }
            if (_INLINE_TAG_MAP[tagName]) {
                if (startNewline) {
                    startNewline = ' ';
                }
                if (endNewline) {
                    endNewline = ' ';
                }
            }
            if (_PRE_TAG_MAP[tagName]) {
                if (startSlash) {
                    endNewline = '\n';
                } else {
                    startNewline = '\n';
                }
            }
            if (wellFormatted && tagName == 'br') {
                endNewline = '\n';
            }
            if (_BLOCK_TAG_MAP[tagName] && !_PRE_TAG_MAP[tagName]) {
                if (wellFormatted) {
                    if (startSlash && tagStack.length > 0 && tagStack[tagStack.length - 1] === tagName) {
                        tagStack.pop();
                    } else {
                        tagStack.push(tagName);
                    }
                    startNewline = '\n';
                    endNewline = '\n';
                    for (var i = 0, len = startSlash ? tagStack.length : tagStack.length - 1; i < len; i++) {
                        startNewline += indentChar;
                        if (!startSlash) {
                            endNewline += indentChar;
                        }
                    }
                    if (endSlash) {
                        tagStack.pop();
                    } else if (!startSlash) {
                        endNewline += indentChar;
                    }
                } else {
                    startNewline = endNewline = '';
                }
            }
            if (attr !== '') {
                var attrMap = _getAttrList(full);
                if (tagName === 'font') {
                    var fontStyleMap = {}, fontStyle = '';
                    _each(attrMap, function (key, val) {
                        if (key === 'color') {
                            fontStyleMap.color = val;
                            delete attrMap[key];
                        }
                        if (key === 'size') {
                            fontStyleMap['font-size'] = fontSizeList[parseInt(val, 10) - 1] || '';
                            delete attrMap[key];
                        }
                        if (key === 'face') {
                            fontStyleMap['font-family'] = val;
                            delete attrMap[key];
                        }
                        if (key === 'style') {
                            fontStyle = val;
                        }
                    });
                    if (fontStyle && !/;$/.test(fontStyle)) {
                        fontStyle += ';';
                    }
                    _each(fontStyleMap, function (key, val) {
                        if (val === '') {
                            return;
                        }
                        if (/\s/.test(val)) {
                            val = '\'' + val + '\'';
                        }
                        fontStyle += key + ':' + val + ';';
                    });
                    attrMap.style = fontStyle;
                }
                _each(attrMap, function (key, val) {
                    if (_FILL_ATTR_MAP[key]) {
                        attrMap[key] = key;
                    }
                    if (_inArray(key, [
                            'src',
                            'href'
                        ]) >= 0) {
                        attrMap[key] = _formatUrl(val, urlType);
                    }
                    if (htmlTags && key !== 'style' && !htmlTagMap[tagName]['*'] && !htmlTagMap[tagName][key] || tagName === 'body' && key === 'contenteditable' || /^kindeditor_\d+$/.test(key)) {
                        delete attrMap[key];
                    }
                    if (key === 'style' && val !== '') {
                        var styleMap = _getCssList(val);
                        _each(styleMap, function (k, v) {
                            if (htmlTags && !htmlTagMap[tagName].style && !htmlTagMap[tagName]['.' + k]) {
                                delete styleMap[k];
                            }
                        });
                        var style = '';
                        _each(styleMap, function (k, v) {
                            style += k + ':' + v + ';';
                        });
                        attrMap.style = style;
                    }
                });
                attr = '';
                _each(attrMap, function (key, val) {
                    if (key === 'style' && val === '') {
                        return;
                    }
                    val = val.replace(/"/g, '&quot;');
                    attr += ' ' + key + '="' + val + '"';
                });
            }
            if (tagName === 'font') {
                tagName = 'span';
            }
            return startNewline + '<' + startSlash + tagName + attr + endSlash + '>' + endNewline;
        });
        html = html.replace(/(<(?:pre|pre\s[^>]*)>)([\s\S]*?)(<\/pre>)/gi, function ($0, $1, $2, $3) {
            return $1 + $2.replace(/\n/g, '<span id="__kindeditor_pre_newline__">\n') + $3;
        });
        html = html.replace(/\n\s*\n/g, '\n');
        html = html.replace(/<span id="__kindeditor_pre_newline__">\n/g, '\n');
        return _trim(html);
    }
    function _clearMsWord(html, htmlTags) {
        html = html.replace(/<meta[\s\S]*?>/gi, '').replace(/<![\s\S]*?>/gi, '').replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '').replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '').replace(/<w:[^>]+>[\s\S]*?<\/w:[^>]+>/gi, '').replace(/<o:[^>]+>[\s\S]*?<\/o:[^>]+>/gi, '').replace(/<xml>[\s\S]*?<\/xml>/gi, '').replace(/<(?:table|td)[^>]*>/gi, function (full) {
            return full.replace(/border-bottom:([#\w\s]+)/gi, 'border:$1');
        });
        return _formatHtml(html, htmlTags);
    }
    function _mediaType(src) {
        if (/\.(rm|rmvb)(\?|$)/i.test(src)) {
            return 'audio/x-pn-realaudio-plugin';
        }
        if (/\.(swf|flv)(\?|$)/i.test(src)) {
            return 'application/x-shockwave-flash';
        }
        return 'video/x-ms-asf-plugin';
    }
    function _mediaClass(type) {
        if (/realaudio/i.test(type)) {
            return 'ke-rm';
        }
        if (/flash/i.test(type)) {
            return 'ke-flash';
        }
        return 'ke-media';
    }
    function _mediaAttrs(srcTag) {
        return _getAttrList(unescape(srcTag));
    }
    function _mediaEmbed(attrs) {
        var html = '<embed ';
        _each(attrs, function (key, val) {
            html += key + '="' + val + '" ';
        });
        html += '/>';
        return html;
    }
    function _mediaImg(blankPath, attrs) {
        var width = attrs.width, height = attrs.height, type = attrs.type || _mediaType(attrs.src), srcTag = _mediaEmbed(attrs), style = '';
        if (/\D/.test(width)) {
            style += 'width:' + width + ';';
        } else if (width > 0) {
            style += 'width:' + width + 'px;';
        }
        if (/\D/.test(height)) {
            style += 'height:' + height + ';';
        } else if (height > 0) {
            style += 'height:' + height + 'px;';
        }
        var html = '<img class="' + _mediaClass(type) + '" src="' + blankPath + '" ';
        if (style !== '') {
            html += 'style="' + style + '" ';
        }
        html += 'data-ke-tag="' + escape(srcTag) + '" alt="" />';
        return html;
    }
    function _tmpl(str, data) {
        var fn = new Function('obj', 'var p=[],print=function(){p.push.apply(p,arguments);};' + 'with(obj){p.push(\'' + str.replace(/[\r\t\n]/g, ' ').split('<%').join('\t').replace(/((^|%>)[^\t]*)'/g, '$1\r').replace(/\t=(.*?)%>/g, '\',$1,\'').split('\t').join('\');').split('%>').join('p.push(\'').split('\r').join('\\\'') + '\');}return p.join(\'\');');
        return data ? fn(data) : fn;
    }
    K.formatUrl = _formatUrl;
    K.formatHtml = _formatHtml;
    K.getCssList = _getCssList;
    K.getAttrList = _getAttrList;
    K.mediaType = _mediaType;
    K.mediaAttrs = _mediaAttrs;
    K.mediaEmbed = _mediaEmbed;
    K.mediaImg = _mediaImg;
    K.clearMsWord = _clearMsWord;
    K.tmpl = _tmpl;
    function _contains(nodeA, nodeB) {
        if (nodeA.nodeType == 9 && nodeB.nodeType != 9) {
            return true;
        }
        while (nodeB = nodeB.parentNode) {
            if (nodeB == nodeA) {
                return true;
            }
        }
        return false;
    }
    var _getSetAttrDiv = document.createElement('div');
    _getSetAttrDiv.setAttribute('className', 't');
    var _GET_SET_ATTRIBUTE = _getSetAttrDiv.className !== 't';
    function _getAttr(el, key) {
        key = key.toLowerCase();
        var val = null;
        if (!_GET_SET_ATTRIBUTE && el.nodeName.toLowerCase() != 'script') {
            var div = el.ownerDocument.createElement('div');
            div.appendChild(el.cloneNode(false));
            var list = _getAttrList(_unescape(div.innerHTML));
            if (key in list) {
                val = list[key];
            }
        } else {
            try {
                val = el.getAttribute(key, 2);
            } catch (e) {
                val = el.getAttribute(key, 1);
            }
        }
        if (key === 'style' && val !== null) {
            val = _formatCss(val);
        }
        return val;
    }
    function _queryAll(expr, root) {
        var exprList = expr.split(',');
        if (exprList.length > 1) {
            var mergedResults = [];
            _each(exprList, function () {
                _each(_queryAll(this, root), function () {
                    if (_inArray(this, mergedResults) < 0) {
                        mergedResults.push(this);
                    }
                });
            });
            return mergedResults;
        }
        root = root || document;
        function escape(str) {
            if (typeof str != 'string') {
                return str;
            }
            return str.replace(/([^\w\-])/g, '\\$1');
        }
        function stripslashes(str) {
            return str.replace(/\\/g, '');
        }
        function cmpTag(tagA, tagB) {
            return tagA === '*' || tagA.toLowerCase() === escape(tagB.toLowerCase());
        }
        function byId(id, tag, root) {
            var arr = [], doc = root.ownerDocument || root, el = doc.getElementById(stripslashes(id));
            if (el) {
                if (cmpTag(tag, el.nodeName) && _contains(root, el)) {
                    arr.push(el);
                }
            }
            return arr;
        }
        function byClass(className, tag, root) {
            var doc = root.ownerDocument || root, arr = [], els, i, len, el;
            if (root.getElementsByClassName) {
                els = root.getElementsByClassName(stripslashes(className));
                for (i = 0, len = els.length; i < len; i++) {
                    el = els[i];
                    if (cmpTag(tag, el.nodeName)) {
                        arr.push(el);
                    }
                }
            } else if (doc.querySelectorAll) {
                els = doc.querySelectorAll((root.nodeName !== '#document' ? root.nodeName + ' ' : '') + tag + '.' + className);
                for (i = 0, len = els.length; i < len; i++) {
                    el = els[i];
                    if (_contains(root, el)) {
                        arr.push(el);
                    }
                }
            } else {
                els = root.getElementsByTagName(tag);
                className = ' ' + className + ' ';
                for (i = 0, len = els.length; i < len; i++) {
                    el = els[i];
                    if (el.nodeType == 1) {
                        var cls = el.className;
                        if (cls && (' ' + cls + ' ').indexOf(className) > -1) {
                            arr.push(el);
                        }
                    }
                }
            }
            return arr;
        }
        function byName(name, tag, root) {
            var arr = [], doc = root.ownerDocument || root, els = doc.getElementsByName(stripslashes(name)), el;
            for (var i = 0, len = els.length; i < len; i++) {
                el = els[i];
                if (cmpTag(tag, el.nodeName) && _contains(root, el)) {
                    if (el.getAttribute('name') !== null) {
                        arr.push(el);
                    }
                }
            }
            return arr;
        }
        function byAttr(key, val, tag, root) {
            var arr = [], els = root.getElementsByTagName(tag), el;
            for (var i = 0, len = els.length; i < len; i++) {
                el = els[i];
                if (el.nodeType == 1) {
                    if (val === null) {
                        if (_getAttr(el, key) !== null) {
                            arr.push(el);
                        }
                    } else {
                        if (val === escape(_getAttr(el, key))) {
                            arr.push(el);
                        }
                    }
                }
            }
            return arr;
        }
        function select(expr, root) {
            var arr = [], matches;
            matches = /^((?:\\.|[^.#\s\[<>])+)/.exec(expr);
            var tag = matches ? matches[1] : '*';
            if (matches = /#((?:[\w\-]|\\.)+)$/.exec(expr)) {
                arr = byId(matches[1], tag, root);
            } else if (matches = /\.((?:[\w\-]|\\.)+)$/.exec(expr)) {
                arr = byClass(matches[1], tag, root);
            } else if (matches = /\[((?:[\w\-]|\\.)+)\]/.exec(expr)) {
                arr = byAttr(matches[1].toLowerCase(), null, tag, root);
            } else if (matches = /\[((?:[\w\-]|\\.)+)\s*=\s*['"]?((?:\\.|[^'"]+)+)['"]?\]/.exec(expr)) {
                var key = matches[1].toLowerCase(), val = matches[2];
                if (key === 'id') {
                    arr = byId(val, tag, root);
                } else if (key === 'class') {
                    arr = byClass(val, tag, root);
                } else if (key === 'name') {
                    arr = byName(val, tag, root);
                } else {
                    arr = byAttr(key, val, tag, root);
                }
            } else {
                var els = root.getElementsByTagName(tag), el;
                for (var i = 0, len = els.length; i < len; i++) {
                    el = els[i];
                    if (el.nodeType == 1) {
                        arr.push(el);
                    }
                }
            }
            return arr;
        }
        var parts = [], arr, re = /((?:\\.|[^\s>])+|[\s>])/g;
        while (arr = re.exec(expr)) {
            if (arr[1] !== ' ') {
                parts.push(arr[1]);
            }
        }
        var results = [];
        if (parts.length == 1) {
            return select(parts[0], root);
        }
        var isChild = false, part, els, subResults, val, v, i, j, k, length, len, l;
        for (i = 0, lenth = parts.length; i < lenth; i++) {
            part = parts[i];
            if (part === '>') {
                isChild = true;
                continue;
            }
            if (i > 0) {
                els = [];
                for (j = 0, len = results.length; j < len; j++) {
                    val = results[j];
                    subResults = select(part, val);
                    for (k = 0, l = subResults.length; k < l; k++) {
                        v = subResults[k];
                        if (isChild) {
                            if (val === v.parentNode) {
                                els.push(v);
                            }
                        } else {
                            els.push(v);
                        }
                    }
                }
                results = els;
            } else {
                results = select(part, root);
            }
            if (results.length === 0) {
                return [];
            }
        }
        return results;
    }
    function _query(expr, root) {
        var arr = _queryAll(expr, root);
        return arr.length > 0 ? arr[0] : null;
    }
    K.query = _query;
    K.queryAll = _queryAll;
    function _get(val) {
        return K(val)[0];
    }
    function _getDoc(node) {
        if (!node) {
            return document;
        }
        return node.ownerDocument || node.document || node;
    }
    function _getWin(node) {
        if (!node) {
            return window;
        }
        var doc = _getDoc(node);
        return doc.parentWindow || doc.defaultView;
    }
    function _setHtml(el, html) {
        if (el.nodeType != 1) {
            return;
        }
        var doc = _getDoc(el);
        try {
            el.innerHTML = '<img id="__kindeditor_temp_tag__" width="0" height="0" style="display:none;" />' + html;
            var temp = doc.getElementById('__kindeditor_temp_tag__');
            temp.parentNode.removeChild(temp);
        } catch (e) {
            K(el).empty();
            K('@' + html, doc).each(function () {
                el.appendChild(this);
            });
        }
    }
    function _hasClass(el, cls) {
        return _inString(cls, el.className, ' ');
    }
    function _setAttr(el, key, val) {
        if (_IE && _V < 8 && key.toLowerCase() == 'class') {
            key = 'className';
        }
        el.setAttribute(key, '' + val);
    }
    function _removeAttr(el, key) {
        if (_IE && _V < 8 && key.toLowerCase() == 'class') {
            key = 'className';
        }
        _setAttr(el, key, '');
        el.removeAttribute(key);
    }
    function _getNodeName(node) {
        if (!node || !node.nodeName) {
            return '';
        }
        return node.nodeName.toLowerCase();
    }
    function _computedCss(el, key) {
        var self = this, win = _getWin(el), camelKey = _toCamel(key), val = '';
        if (win.getComputedStyle) {
            var style = win.getComputedStyle(el, null);
            val = style[camelKey] || style.getPropertyValue(key) || el.style[camelKey];
        } else if (el.currentStyle) {
            val = el.currentStyle[camelKey] || el.style[camelKey];
        }
        return val;
    }
    function _hasVal(node) {
        return !!_VALUE_TAG_MAP[_getNodeName(node)];
    }
    function _docElement(doc) {
        doc = doc || document;
        return _QUIRKS ? doc.body : doc.documentElement;
    }
    function _docHeight(doc) {
        var el = _docElement(doc);
        return Math.max(el.scrollHeight, el.clientHeight);
    }
    function _docWidth(doc) {
        var el = _docElement(doc);
        return Math.max(el.scrollWidth, el.clientWidth);
    }
    function _getScrollPos(doc) {
        doc = doc || document;
        var x, y;
        if (_IE || _NEWIE || _OPERA) {
            x = _docElement(doc).scrollLeft;
            y = _docElement(doc).scrollTop;
        } else {
            x = _getWin(doc).scrollX;
            y = _getWin(doc).scrollY;
        }
        return {
            x: x,
            y: y
        };
    }
    function KNode(node) {
        this.init(node);
    }
    _extend(KNode, {
        init: function (node) {
            var self = this;
            node = _isArray(node) ? node : [node];
            var length = 0;
            for (var i = 0, len = node.length; i < len; i++) {
                if (node[i]) {
                    self[i] = node[i].constructor === KNode ? node[i][0] : node[i];
                    length++;
                }
            }
            self.length = length;
            self.doc = _getDoc(self[0]);
            self.name = _getNodeName(self[0]);
            self.type = self.length > 0 ? self[0].nodeType : null;
            self.win = _getWin(self[0]);
        },
        each: function (fn) {
            var self = this;
            for (var i = 0; i < self.length; i++) {
                if (fn.call(self[i], i, self[i]) === false) {
                    return self;
                }
            }
            return self;
        },
        bind: function (type, fn) {
            this.each(function () {
                _bind(this, type, fn);
            });
            return this;
        },
        unbind: function (type, fn) {
            this.each(function () {
                _unbind(this, type, fn);
            });
            return this;
        },
        fire: function (type) {
            if (this.length < 1) {
                return this;
            }
            _fire(this[0], type);
            return this;
        },
        hasAttr: function (key) {
            if (this.length < 1) {
                return false;
            }
            return !!_getAttr(this[0], key);
        },
        attr: function (key, val) {
            var self = this;
            if (key === undefined) {
                return _getAttrList(self.outer());
            }
            if (typeof key === 'object') {
                _each(key, function (k, v) {
                    self.attr(k, v);
                });
                return self;
            }
            if (val === undefined) {
                val = self.length < 1 ? null : _getAttr(self[0], key);
                return val === null ? '' : val;
            }
            self.each(function () {
                _setAttr(this, key, val);
            });
            return self;
        },
        removeAttr: function (key) {
            this.each(function () {
                _removeAttr(this, key);
            });
            return this;
        },
        get: function (i) {
            if (this.length < 1) {
                return null;
            }
            return this[i || 0];
        },
        eq: function (i) {
            if (this.length < 1) {
                return null;
            }
            return this[i] ? new KNode(this[i]) : null;
        },
        hasClass: function (cls) {
            if (this.length < 1) {
                return false;
            }
            return _hasClass(this[0], cls);
        },
        addClass: function (cls) {
            this.each(function () {
                if (!_hasClass(this, cls)) {
                    this.className = _trim(this.className + ' ' + cls);
                }
            });
            return this;
        },
        removeClass: function (cls) {
            this.each(function () {
                if (_hasClass(this, cls)) {
                    this.className = _trim(this.className.replace(new RegExp('(^|\\s)' + cls + '(\\s|$)'), ' '));
                }
            });
            return this;
        },
        html: function (val) {
            var self = this;
            if (val === undefined) {
                if (self.length < 1 || self.type != 1) {
                    return '';
                }
                return _formatHtml(self[0].innerHTML);
            }
            self.each(function () {
                _setHtml(this, val);
            });
            return self;
        },
        text: function () {
            var self = this;
            if (self.length < 1) {
                return '';
            }
            return _IE ? self[0].innerText : self[0].textContent;
        },
        hasVal: function () {
            if (this.length < 1) {
                return false;
            }
            return _hasVal(this[0]);
        },
        val: function (val) {
            var self = this;
            if (val === undefined) {
                if (self.length < 1) {
                    return '';
                }
                return self.hasVal() ? self[0].value : self.attr('value');
            } else {
                self.each(function () {
                    if (_hasVal(this)) {
                        this.value = val;
                    } else {
                        _setAttr(this, 'value', val);
                    }
                });
                return self;
            }
        },
        css: function (key, val) {
            var self = this;
            if (key === undefined) {
                return _getCssList(self.attr('style'));
            }
            if (typeof key === 'object') {
                _each(key, function (k, v) {
                    self.css(k, v);
                });
                return self;
            }
            if (val === undefined) {
                if (self.length < 1) {
                    return '';
                }
                return self[0].style[_toCamel(key)] || _computedCss(self[0], key) || '';
            }
            self.each(function () {
                this.style[_toCamel(key)] = val;
            });
            return self;
        },
        width: function (val) {
            var self = this;
            if (val === undefined) {
                if (self.length < 1) {
                    return 0;
                }
                return self[0].offsetWidth;
            }
            return self.css('width', _addUnit(val));
        },
        height: function (val) {
            var self = this;
            if (val === undefined) {
                if (self.length < 1) {
                    return 0;
                }
                return self[0].offsetHeight;
            }
            return self.css('height', _addUnit(val));
        },
        opacity: function (val) {
            this.each(function () {
                if (this.style.opacity === undefined) {
                    this.style.filter = val == 1 ? '' : 'alpha(opacity=' + val * 100 + ')';
                } else {
                    this.style.opacity = val == 1 ? '' : val;
                }
            });
            return this;
        },
        data: function (key, val) {
            var self = this;
            key = 'kindeditor_data_' + key;
            if (val === undefined) {
                if (self.length < 1) {
                    return null;
                }
                return self[0][key];
            }
            this.each(function () {
                this[key] = val;
            });
            return self;
        },
        pos: function () {
            var self = this, node = self[0], x = 0, y = 0;
            if (node) {
                if (node.getBoundingClientRect) {
                    var box = node.getBoundingClientRect(), pos = _getScrollPos(self.doc);
                    x = box.left + pos.x;
                    y = box.top + pos.y;
                } else {
                    while (node) {
                        x += node.offsetLeft;
                        y += node.offsetTop;
                        node = node.offsetParent;
                    }
                }
            }
            return {
                x: _round(x),
                y: _round(y)
            };
        },
        clone: function (bool) {
            if (this.length < 1) {
                return new KNode([]);
            }
            return new KNode(this[0].cloneNode(bool));
        },
        append: function (expr) {
            this.each(function () {
                if (this.appendChild) {
                    this.appendChild(_get(expr));
                }
            });
            return this;
        },
        appendTo: function (expr) {
            this.each(function () {
                _get(expr).appendChild(this);
            });
            return this;
        },
        before: function (expr) {
            this.each(function () {
                this.parentNode.insertBefore(_get(expr), this);
            });
            return this;
        },
        after: function (expr) {
            this.each(function () {
                if (this.nextSibling) {
                    this.parentNode.insertBefore(_get(expr), this.nextSibling);
                } else {
                    this.parentNode.appendChild(_get(expr));
                }
            });
            return this;
        },
        replaceWith: function (expr) {
            var nodes = [];
            this.each(function (i, node) {
                _unbind(node);
                var newNode = _get(expr);
                node.parentNode.replaceChild(newNode, node);
                nodes.push(newNode);
            });
            return K(nodes);
        },
        empty: function () {
            var self = this;
            self.each(function (i, node) {
                var child = node.firstChild;
                while (child) {
                    if (!node.parentNode) {
                        return;
                    }
                    var next = child.nextSibling;
                    child.parentNode.removeChild(child);
                    child = next;
                }
            });
            return self;
        },
        remove: function (keepChilds) {
            var self = this;
            self.each(function (i, node) {
                if (!node.parentNode) {
                    return;
                }
                _unbind(node);
                if (keepChilds) {
                    var child = node.firstChild;
                    while (child) {
                        var next = child.nextSibling;
                        node.parentNode.insertBefore(child, node);
                        child = next;
                    }
                }
                node.parentNode.removeChild(node);
                delete self[i];
            });
            self.length = 0;
            return self;
        },
        show: function (val) {
            var self = this;
            if (val === undefined) {
                val = self._originDisplay || '';
            }
            if (self.css('display') != 'none') {
                return self;
            }
            return self.css('display', val);
        },
        hide: function () {
            var self = this;
            if (self.length < 1) {
                return self;
            }
            self._originDisplay = self[0].style.display;
            return self.css('display', 'none');
        },
        outer: function () {
            var self = this;
            if (self.length < 1) {
                return '';
            }
            var div = self.doc.createElement('div'), html;
            div.appendChild(self[0].cloneNode(true));
            html = _formatHtml(div.innerHTML);
            div = null;
            return html;
        },
        isSingle: function () {
            return !!_SINGLE_TAG_MAP[this.name];
        },
        isInline: function () {
            return !!_INLINE_TAG_MAP[this.name];
        },
        isBlock: function () {
            return !!_BLOCK_TAG_MAP[this.name];
        },
        isStyle: function () {
            return !!_STYLE_TAG_MAP[this.name];
        },
        isControl: function () {
            return !!_CONTROL_TAG_MAP[this.name];
        },
        contains: function (otherNode) {
            if (this.length < 1) {
                return false;
            }
            return _contains(this[0], _get(otherNode));
        },
        parent: function () {
            if (this.length < 1) {
                return null;
            }
            var node = this[0].parentNode;
            return node ? new KNode(node) : null;
        },
        children: function () {
            if (this.length < 1) {
                return new KNode([]);
            }
            var list = [], child = this[0].firstChild;
            while (child) {
                if (child.nodeType != 3 || _trim(child.nodeValue) !== '') {
                    list.push(child);
                }
                child = child.nextSibling;
            }
            return new KNode(list);
        },
        first: function () {
            var list = this.children();
            return list.length > 0 ? list.eq(0) : null;
        },
        last: function () {
            var list = this.children();
            return list.length > 0 ? list.eq(list.length - 1) : null;
        },
        index: function () {
            if (this.length < 1) {
                return -1;
            }
            var i = -1, sibling = this[0];
            while (sibling) {
                i++;
                sibling = sibling.previousSibling;
            }
            return i;
        },
        prev: function () {
            if (this.length < 1) {
                return null;
            }
            var node = this[0].previousSibling;
            return node ? new KNode(node) : null;
        },
        next: function () {
            if (this.length < 1) {
                return null;
            }
            var node = this[0].nextSibling;
            return node ? new KNode(node) : null;
        },
        scan: function (fn, order) {
            if (this.length < 1) {
                return;
            }
            order = order === undefined ? true : order;
            function walk(node) {
                var n = order ? node.firstChild : node.lastChild;
                while (n) {
                    var next = order ? n.nextSibling : n.previousSibling;
                    if (fn(n) === false) {
                        return false;
                    }
                    if (walk(n) === false) {
                        return false;
                    }
                    n = next;
                }
            }
            walk(this[0]);
            return this;
        }
    });
    _each(('blur,focus,focusin,focusout,load,resize,scroll,unload,click,dblclick,' + 'mousedown,mouseup,mousemove,mouseover,mouseout,mouseenter,mouseleave,' + 'change,select,submit,keydown,keypress,keyup,error,contextmenu').split(','), function (i, type) {
        KNode.prototype[type] = function (fn) {
            return fn ? this.bind(type, fn) : this.fire(type);
        };
    });
    var _K = K;
    K = function (expr, root) {
        if (expr === undefined || expr === null) {
            return;
        }
        function newNode(node) {
            if (!node[0]) {
                node = [];
            }
            return new KNode(node);
        }
        if (typeof expr === 'string') {
            if (root) {
                root = _get(root);
            }
            var length = expr.length;
            if (expr.charAt(0) === '@') {
                expr = expr.substr(1);
            }
            if (expr.length !== length || /<.+>/.test(expr)) {
                var doc = root ? root.ownerDocument || root : document, div = doc.createElement('div'), list = [];
                div.innerHTML = '<img id="__kindeditor_temp_tag__" width="0" height="0" style="display:none;" />' + expr;
                for (var i = 0, len = div.childNodes.length; i < len; i++) {
                    var child = div.childNodes[i];
                    if (child.id == '__kindeditor_temp_tag__') {
                        continue;
                    }
                    list.push(child);
                }
                return newNode(list);
            }
            return newNode(_queryAll(expr, root));
        }
        if (expr && expr.constructor === KNode) {
            return expr;
        }
        if (expr.toArray) {
            expr = expr.toArray();
        }
        if (_isArray(expr)) {
            return newNode(expr);
        }
        return newNode(_toArray(arguments));
    };
    _each(_K, function (key, val) {
        K[key] = val;
    });
    K.NodeClass = KNode;
    window.KindEditor = K;
    var _START_TO_START = 0, _START_TO_END = 1, _END_TO_END = 2, _END_TO_START = 3, _BOOKMARK_ID = 0;
    function _updateCollapsed(range) {
        range.collapsed = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
        return range;
    }
    function _copyAndDelete(range, isCopy, isDelete) {
        var doc = range.doc, nodeList = [];
        function splitTextNode(node, startOffset, endOffset) {
            var length = node.nodeValue.length, centerNode;
            if (isCopy) {
                var cloneNode = node.cloneNode(true);
                if (startOffset > 0) {
                    centerNode = cloneNode.splitText(startOffset);
                } else {
                    centerNode = cloneNode;
                }
                if (endOffset < length) {
                    centerNode.splitText(endOffset - startOffset);
                }
            }
            if (isDelete) {
                var center = node;
                if (startOffset > 0) {
                    center = node.splitText(startOffset);
                    range.setStart(node, startOffset);
                }
                if (endOffset < length) {
                    var right = center.splitText(endOffset - startOffset);
                    range.setEnd(right, 0);
                }
                nodeList.push(center);
            }
            return centerNode;
        }
        function removeNodes() {
            if (isDelete) {
                range.up().collapse(true);
            }
            for (var i = 0, len = nodeList.length; i < len; i++) {
                var node = nodeList[i];
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            }
        }
        var copyRange = range.cloneRange().down();
        var start = -1, incStart = -1, incEnd = -1, end = -1, ancestor = range.commonAncestor(), frag = doc.createDocumentFragment();
        if (ancestor.nodeType == 3) {
            var textNode = splitTextNode(ancestor, range.startOffset, range.endOffset);
            if (isCopy) {
                frag.appendChild(textNode);
            }
            removeNodes();
            return isCopy ? frag : range;
        }
        function extractNodes(parent, frag) {
            var node = parent.firstChild, nextNode;
            while (node) {
                var testRange = new KRange(doc).selectNode(node);
                start = testRange.compareBoundaryPoints(_START_TO_END, range);
                if (start >= 0 && incStart <= 0) {
                    incStart = testRange.compareBoundaryPoints(_START_TO_START, range);
                }
                if (incStart >= 0 && incEnd <= 0) {
                    incEnd = testRange.compareBoundaryPoints(_END_TO_END, range);
                }
                if (incEnd >= 0 && end <= 0) {
                    end = testRange.compareBoundaryPoints(_END_TO_START, range);
                }
                if (end >= 0) {
                    return false;
                }
                nextNode = node.nextSibling;
                if (start > 0) {
                    if (node.nodeType == 1) {
                        if (incStart >= 0 && incEnd <= 0) {
                            if (isCopy) {
                                frag.appendChild(node.cloneNode(true));
                            }
                            if (isDelete) {
                                nodeList.push(node);
                            }
                        } else {
                            var childFlag;
                            if (isCopy) {
                                childFlag = node.cloneNode(false);
                                frag.appendChild(childFlag);
                            }
                            if (extractNodes(node, childFlag) === false) {
                                return false;
                            }
                        }
                    } else if (node.nodeType == 3) {
                        var textNode;
                        if (node == copyRange.startContainer) {
                            textNode = splitTextNode(node, copyRange.startOffset, node.nodeValue.length);
                        } else if (node == copyRange.endContainer) {
                            textNode = splitTextNode(node, 0, copyRange.endOffset);
                        } else {
                            textNode = splitTextNode(node, 0, node.nodeValue.length);
                        }
                        if (isCopy) {
                            try {
                                frag.appendChild(textNode);
                            } catch (e) {
                            }
                        }
                    }
                }
                node = nextNode;
            }
        }
        extractNodes(ancestor, frag);
        if (isDelete) {
            range.up().collapse(true);
        }
        for (var i = 0, len = nodeList.length; i < len; i++) {
            var node = nodeList[i];
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
        return isCopy ? frag : range;
    }
    function _moveToElementText(range, el) {
        var node = el;
        while (node) {
            var knode = K(node);
            if (knode.name == 'marquee' || knode.name == 'select') {
                return;
            }
            node = node.parentNode;
        }
        try {
            range.moveToElementText(el);
        } catch (e) {
        }
    }
    function _getStartEnd(rng, isStart) {
        var doc = rng.parentElement().ownerDocument, pointRange = rng.duplicate();
        pointRange.collapse(isStart);
        var parent = pointRange.parentElement(), nodes = parent.childNodes;
        if (nodes.length === 0) {
            return {
                node: parent.parentNode,
                offset: K(parent).index()
            };
        }
        var startNode = doc, startPos = 0, cmp = -1;
        var testRange = rng.duplicate();
        _moveToElementText(testRange, parent);
        for (var i = 0, len = nodes.length; i < len; i++) {
            var node = nodes[i];
            cmp = testRange.compareEndPoints('StartToStart', pointRange);
            if (cmp === 0) {
                return {
                    node: node.parentNode,
                    offset: i
                };
            }
            if (node.nodeType == 1) {
                var nodeRange = rng.duplicate(), dummy, knode = K(node), newNode = node;
                if (knode.isControl()) {
                    dummy = doc.createElement('span');
                    knode.after(dummy);
                    newNode = dummy;
                    startPos += knode.text().replace(/\r\n|\n|\r/g, '').length;
                }
                _moveToElementText(nodeRange, newNode);
                testRange.setEndPoint('StartToEnd', nodeRange);
                if (cmp > 0) {
                    startPos += nodeRange.text.replace(/\r\n|\n|\r/g, '').length;
                } else {
                    startPos = 0;
                }
                if (dummy) {
                    K(dummy).remove();
                }
            } else if (node.nodeType == 3) {
                testRange.moveStart('character', node.nodeValue.length);
                startPos += node.nodeValue.length;
            }
            if (cmp < 0) {
                startNode = node;
            }
        }
        if (cmp < 0 && startNode.nodeType == 1) {
            return {
                node: parent,
                offset: K(parent.lastChild).index() + 1
            };
        }
        if (cmp > 0) {
            while (startNode.nextSibling && startNode.nodeType == 1) {
                startNode = startNode.nextSibling;
            }
        }
        testRange = rng.duplicate();
        _moveToElementText(testRange, parent);
        testRange.setEndPoint('StartToEnd', pointRange);
        startPos -= testRange.text.replace(/\r\n|\n|\r/g, '').length;
        if (cmp > 0 && startNode.nodeType == 3) {
            var prevNode = startNode.previousSibling;
            while (prevNode && prevNode.nodeType == 3) {
                startPos -= prevNode.nodeValue.length;
                prevNode = prevNode.previousSibling;
            }
        }
        return {
            node: startNode,
            offset: startPos
        };
    }
    function _getEndRange(node, offset) {
        var doc = node.ownerDocument || node, range = doc.body.createTextRange();
        if (doc == node) {
            range.collapse(true);
            return range;
        }
        if (node.nodeType == 1 && node.childNodes.length > 0) {
            var children = node.childNodes, isStart, child;
            if (offset === 0) {
                child = children[0];
                isStart = true;
            } else {
                child = children[offset - 1];
                isStart = false;
            }
            if (!child) {
                return range;
            }
            if (K(child).name === 'head') {
                if (offset === 1) {
                    isStart = true;
                }
                if (offset === 2) {
                    isStart = false;
                }
                range.collapse(isStart);
                return range;
            }
            if (child.nodeType == 1) {
                var kchild = K(child), span;
                if (kchild.isControl()) {
                    span = doc.createElement('span');
                    if (isStart) {
                        kchild.before(span);
                    } else {
                        kchild.after(span);
                    }
                    child = span;
                }
                _moveToElementText(range, child);
                range.collapse(isStart);
                if (span) {
                    K(span).remove();
                }
                return range;
            }
            node = child;
            offset = isStart ? 0 : child.nodeValue.length;
        }
        var dummy = doc.createElement('span');
        K(node).before(dummy);
        _moveToElementText(range, dummy);
        range.moveStart('character', offset);
        K(dummy).remove();
        return range;
    }
    function _toRange(rng) {
        var doc, range;
        function tr2td(start) {
            if (K(start.node).name == 'tr') {
                start.node = start.node.cells[start.offset];
                start.offset = 0;
            }
        }
        if (_IERANGE) {
            if (rng.item) {
                doc = _getDoc(rng.item(0));
                range = new KRange(doc);
                range.selectNode(rng.item(0));
                return range;
            }
            doc = rng.parentElement().ownerDocument;
            var start = _getStartEnd(rng, true), end = _getStartEnd(rng, false);
            tr2td(start);
            tr2td(end);
            range = new KRange(doc);
            range.setStart(start.node, start.offset);
            range.setEnd(end.node, end.offset);
            return range;
        }
        var startContainer = rng.startContainer;
        doc = startContainer.ownerDocument || startContainer;
        range = new KRange(doc);
        range.setStart(startContainer, rng.startOffset);
        range.setEnd(rng.endContainer, rng.endOffset);
        return range;
    }
    function KRange(doc) {
        this.init(doc);
    }
    _extend(KRange, {
        init: function (doc) {
            var self = this;
            self.startContainer = doc;
            self.startOffset = 0;
            self.endContainer = doc;
            self.endOffset = 0;
            self.collapsed = true;
            self.doc = doc;
        },
        commonAncestor: function () {
            function getParents(node) {
                var parents = [];
                while (node) {
                    parents.push(node);
                    node = node.parentNode;
                }
                return parents;
            }
            var parentsA = getParents(this.startContainer), parentsB = getParents(this.endContainer), i = 0, lenA = parentsA.length, lenB = parentsB.length, parentA, parentB;
            while (++i) {
                parentA = parentsA[lenA - i];
                parentB = parentsB[lenB - i];
                if (!parentA || !parentB || parentA !== parentB) {
                    break;
                }
            }
            return parentsA[lenA - i + 1];
        },
        setStart: function (node, offset) {
            var self = this, doc = self.doc;
            self.startContainer = node;
            self.startOffset = offset;
            if (self.endContainer === doc) {
                self.endContainer = node;
                self.endOffset = offset;
            }
            return _updateCollapsed(this);
        },
        setEnd: function (node, offset) {
            var self = this, doc = self.doc;
            self.endContainer = node;
            self.endOffset = offset;
            if (self.startContainer === doc) {
                self.startContainer = node;
                self.startOffset = offset;
            }
            return _updateCollapsed(this);
        },
        setStartBefore: function (node) {
            return this.setStart(node.parentNode || this.doc, K(node).index());
        },
        setStartAfter: function (node) {
            return this.setStart(node.parentNode || this.doc, K(node).index() + 1);
        },
        setEndBefore: function (node) {
            return this.setEnd(node.parentNode || this.doc, K(node).index());
        },
        setEndAfter: function (node) {
            return this.setEnd(node.parentNode || this.doc, K(node).index() + 1);
        },
        selectNode: function (node) {
            return this.setStartBefore(node).setEndAfter(node);
        },
        selectNodeContents: function (node) {
            var knode = K(node);
            if (knode.type == 3 || knode.isSingle()) {
                return this.selectNode(node);
            }
            var children = knode.children();
            if (children.length > 0) {
                return this.setStartBefore(children[0]).setEndAfter(children[children.length - 1]);
            }
            return this.setStart(node, 0).setEnd(node, 0);
        },
        collapse: function (toStart) {
            if (toStart) {
                return this.setEnd(this.startContainer, this.startOffset);
            }
            return this.setStart(this.endContainer, this.endOffset);
        },
        compareBoundaryPoints: function (how, range) {
            var rangeA = this.get(), rangeB = range.get();
            if (_IERANGE) {
                var arr = {};
                arr[_START_TO_START] = 'StartToStart';
                arr[_START_TO_END] = 'EndToStart';
                arr[_END_TO_END] = 'EndToEnd';
                arr[_END_TO_START] = 'StartToEnd';
                var cmp = rangeA.compareEndPoints(arr[how], rangeB);
                if (cmp !== 0) {
                    return cmp;
                }
                var nodeA, nodeB, nodeC, posA, posB;
                if (how === _START_TO_START || how === _END_TO_START) {
                    nodeA = this.startContainer;
                    posA = this.startOffset;
                }
                if (how === _START_TO_END || how === _END_TO_END) {
                    nodeA = this.endContainer;
                    posA = this.endOffset;
                }
                if (how === _START_TO_START || how === _START_TO_END) {
                    nodeB = range.startContainer;
                    posB = range.startOffset;
                }
                if (how === _END_TO_END || how === _END_TO_START) {
                    nodeB = range.endContainer;
                    posB = range.endOffset;
                }
                if (nodeA === nodeB) {
                    var diff = posA - posB;
                    return diff > 0 ? 1 : diff < 0 ? -1 : 0;
                }
                nodeC = nodeB;
                while (nodeC && nodeC.parentNode !== nodeA) {
                    nodeC = nodeC.parentNode;
                }
                if (nodeC) {
                    return K(nodeC).index() >= posA ? -1 : 1;
                }
                nodeC = nodeA;
                while (nodeC && nodeC.parentNode !== nodeB) {
                    nodeC = nodeC.parentNode;
                }
                if (nodeC) {
                    return K(nodeC).index() >= posB ? 1 : -1;
                }
                nodeC = K(nodeB).next();
                if (nodeC && nodeC.contains(nodeA)) {
                    return 1;
                }
                nodeC = K(nodeA).next();
                if (nodeC && nodeC.contains(nodeB)) {
                    return -1;
                }
            } else {
                return rangeA.compareBoundaryPoints(how, rangeB);
            }
        },
        cloneRange: function () {
            return new KRange(this.doc).setStart(this.startContainer, this.startOffset).setEnd(this.endContainer, this.endOffset);
        },
        toString: function () {
            var rng = this.get(), str = _IERANGE ? rng.text : rng.toString();
            return str.replace(/\r\n|\n|\r/g, '');
        },
        cloneContents: function () {
            return _copyAndDelete(this, true, false);
        },
        deleteContents: function () {
            return _copyAndDelete(this, false, true);
        },
        extractContents: function () {
            return _copyAndDelete(this, true, true);
        },
        insertNode: function (node) {
            var self = this, sc = self.startContainer, so = self.startOffset, ec = self.endContainer, eo = self.endOffset, firstChild, lastChild, c, nodeCount = 1;
            if (node.nodeName.toLowerCase() === '#document-fragment') {
                firstChild = node.firstChild;
                lastChild = node.lastChild;
                nodeCount = node.childNodes.length;
            }
            if (sc.nodeType == 1) {
                c = sc.childNodes[so];
                if (c) {
                    sc.insertBefore(node, c);
                    if (sc === ec) {
                        eo += nodeCount;
                    }
                } else {
                    sc.appendChild(node);
                }
            } else if (sc.nodeType == 3) {
                if (so === 0) {
                    sc.parentNode.insertBefore(node, sc);
                    if (sc.parentNode === ec) {
                        eo += nodeCount;
                    }
                } else if (so >= sc.nodeValue.length) {
                    if (sc.nextSibling) {
                        sc.parentNode.insertBefore(node, sc.nextSibling);
                    } else {
                        sc.parentNode.appendChild(node);
                    }
                } else {
                    if (so > 0) {
                        c = sc.splitText(so);
                    } else {
                        c = sc;
                    }
                    sc.parentNode.insertBefore(node, c);
                    if (sc === ec) {
                        ec = c;
                        eo -= so;
                    }
                }
            }
            if (firstChild) {
                self.setStartBefore(firstChild).setEndAfter(lastChild);
            } else {
                self.selectNode(node);
            }
            if (self.compareBoundaryPoints(_END_TO_END, self.cloneRange().setEnd(ec, eo)) >= 1) {
                return self;
            }
            return self.setEnd(ec, eo);
        },
        surroundContents: function (node) {
            node.appendChild(this.extractContents());
            return this.insertNode(node).selectNode(node);
        },
        isControl: function () {
            var self = this, sc = self.startContainer, so = self.startOffset, ec = self.endContainer, eo = self.endOffset, rng;
            return sc.nodeType == 1 && sc === ec && so + 1 === eo && K(sc.childNodes[so]).isControl();
        },
        get: function (hasControlRange) {
            var self = this, doc = self.doc, node, rng;
            if (!_IERANGE) {
                rng = doc.createRange();
                try {
                    rng.setStart(self.startContainer, self.startOffset);
                    rng.setEnd(self.endContainer, self.endOffset);
                } catch (e) {
                }
                return rng;
            }
            if (hasControlRange && self.isControl()) {
                rng = doc.body.createControlRange();
                rng.addElement(self.startContainer.childNodes[self.startOffset]);
                return rng;
            }
            var range = self.cloneRange().down();
            rng = doc.body.createTextRange();
            rng.setEndPoint('StartToStart', _getEndRange(range.startContainer, range.startOffset));
            rng.setEndPoint('EndToStart', _getEndRange(range.endContainer, range.endOffset));
            return rng;
        },
        html: function () {
            return K(this.cloneContents()).outer();
        },
        down: function () {
            var self = this;
            function downPos(node, pos, isStart) {
                if (node.nodeType != 1) {
                    return;
                }
                var children = K(node).children();
                if (children.length === 0) {
                    return;
                }
                var left, right, child, offset;
                if (pos > 0) {
                    left = children.eq(pos - 1);
                }
                if (pos < children.length) {
                    right = children.eq(pos);
                }
                if (left && left.type == 3) {
                    child = left[0];
                    offset = child.nodeValue.length;
                }
                if (right && right.type == 3) {
                    child = right[0];
                    offset = 0;
                }
                if (!child) {
                    return;
                }
                if (isStart) {
                    self.setStart(child, offset);
                } else {
                    self.setEnd(child, offset);
                }
            }
            downPos(self.startContainer, self.startOffset, true);
            downPos(self.endContainer, self.endOffset, false);
            return self;
        },
        up: function () {
            var self = this;
            function upPos(node, pos, isStart) {
                if (node.nodeType != 3) {
                    return;
                }
                if (pos === 0) {
                    if (isStart) {
                        self.setStartBefore(node);
                    } else {
                        self.setEndBefore(node);
                    }
                } else if (pos == node.nodeValue.length) {
                    if (isStart) {
                        self.setStartAfter(node);
                    } else {
                        self.setEndAfter(node);
                    }
                }
            }
            upPos(self.startContainer, self.startOffset, true);
            upPos(self.endContainer, self.endOffset, false);
            return self;
        },
        enlarge: function (toBlock) {
            var self = this;
            self.up();
            function enlargePos(node, pos, isStart) {
                var knode = K(node), parent;
                if (knode.type == 3 || _NOSPLIT_TAG_MAP[knode.name] || !toBlock && knode.isBlock()) {
                    return;
                }
                if (pos === 0) {
                    while (!knode.prev()) {
                        parent = knode.parent();
                        if (!parent || _NOSPLIT_TAG_MAP[parent.name] || !toBlock && parent.isBlock()) {
                            break;
                        }
                        knode = parent;
                    }
                    if (isStart) {
                        self.setStartBefore(knode[0]);
                    } else {
                        self.setEndBefore(knode[0]);
                    }
                } else if (pos == knode.children().length) {
                    while (!knode.next()) {
                        parent = knode.parent();
                        if (!parent || _NOSPLIT_TAG_MAP[parent.name] || !toBlock && parent.isBlock()) {
                            break;
                        }
                        knode = parent;
                    }
                    if (isStart) {
                        self.setStartAfter(knode[0]);
                    } else {
                        self.setEndAfter(knode[0]);
                    }
                }
            }
            enlargePos(self.startContainer, self.startOffset, true);
            enlargePos(self.endContainer, self.endOffset, false);
            return self;
        },
        shrink: function () {
            var self = this, child, collapsed = self.collapsed;
            while (self.startContainer.nodeType == 1 && (child = self.startContainer.childNodes[self.startOffset]) && child.nodeType == 1 && !K(child).isSingle()) {
                self.setStart(child, 0);
            }
            if (collapsed) {
                return self.collapse(collapsed);
            }
            while (self.endContainer.nodeType == 1 && self.endOffset > 0 && (child = self.endContainer.childNodes[self.endOffset - 1]) && child.nodeType == 1 && !K(child).isSingle()) {
                self.setEnd(child, child.childNodes.length);
            }
            return self;
        },
        createBookmark: function (serialize) {
            var self = this, doc = self.doc, endNode, startNode = K('<span style="display:none;"></span>', doc)[0];
            startNode.id = '__kindeditor_bookmark_start_' + _BOOKMARK_ID++ + '__';
            if (!self.collapsed) {
                endNode = startNode.cloneNode(true);
                endNode.id = '__kindeditor_bookmark_end_' + _BOOKMARK_ID++ + '__';
            }
            if (endNode) {
                self.cloneRange().collapse(false).insertNode(endNode).setEndBefore(endNode);
            }
            self.insertNode(startNode).setStartAfter(startNode);
            return {
                start: serialize ? '#' + startNode.id : startNode,
                end: endNode ? serialize ? '#' + endNode.id : endNode : null
            };
        },
        moveToBookmark: function (bookmark) {
            var self = this, doc = self.doc, start = K(bookmark.start, doc), end = bookmark.end ? K(bookmark.end, doc) : null;
            if (!start || start.length < 1) {
                return self;
            }
            self.setStartBefore(start[0]);
            start.remove();
            if (end && end.length > 0) {
                self.setEndBefore(end[0]);
                end.remove();
            } else {
                self.collapse(true);
            }
            return self;
        },
        dump: function () {
            console.log('--------------------');
            console.log(this.startContainer.nodeType == 3 ? this.startContainer.nodeValue : this.startContainer, this.startOffset);
            console.log(this.endContainer.nodeType == 3 ? this.endContainer.nodeValue : this.endContainer, this.endOffset);
        }
    });
    function _range(mixed) {
        if (!mixed.nodeName) {
            return mixed.constructor === KRange ? mixed : _toRange(mixed);
        }
        return new KRange(mixed);
    }
    K.RangeClass = KRange;
    K.range = _range;
    K.START_TO_START = _START_TO_START;
    K.START_TO_END = _START_TO_END;
    K.END_TO_END = _END_TO_END;
    K.END_TO_START = _END_TO_START;
    function _nativeCommand(doc, key, val) {
        try {
            doc.execCommand(key, false, val);
        } catch (e) {
        }
    }
    function _nativeCommandValue(doc, key) {
        var val = '';
        try {
            val = doc.queryCommandValue(key);
        } catch (e) {
        }
        if (typeof val !== 'string') {
            val = '';
        }
        return val;
    }
    function _getSel(doc) {
        var win = _getWin(doc);
        return _IERANGE ? doc.selection : win.getSelection();
    }
    function _getRng(doc) {
        var sel = _getSel(doc), rng;
        try {
            if (sel.rangeCount > 0) {
                rng = sel.getRangeAt(0);
            } else {
                rng = sel.createRange();
            }
        } catch (e) {
        }
        if (_IERANGE && (!rng || !rng.item && rng.parentElement().ownerDocument !== doc)) {
            return null;
        }
        return rng;
    }
    function _singleKeyMap(map) {
        var newMap = {}, arr, v;
        _each(map, function (key, val) {
            arr = key.split(',');
            for (var i = 0, len = arr.length; i < len; i++) {
                v = arr[i];
                newMap[v] = val;
            }
        });
        return newMap;
    }
    function _hasAttrOrCss(knode, map) {
        return _hasAttrOrCssByKey(knode, map, '*') || _hasAttrOrCssByKey(knode, map);
    }
    function _hasAttrOrCssByKey(knode, map, mapKey) {
        mapKey = mapKey || knode.name;
        if (knode.type !== 1) {
            return false;
        }
        var newMap = _singleKeyMap(map);
        if (!newMap[mapKey]) {
            return false;
        }
        var arr = newMap[mapKey].split(',');
        for (var i = 0, len = arr.length; i < len; i++) {
            var key = arr[i];
            if (key === '*') {
                return true;
            }
            var match = /^(\.?)([^=]+)(?:=([^=]*))?$/.exec(key);
            var method = match[1] ? 'css' : 'attr';
            key = match[2];
            var val = match[3] || '';
            if (val === '' && knode[method](key) !== '') {
                return true;
            }
            if (val !== '' && knode[method](key) === val) {
                return true;
            }
        }
        return false;
    }
    function _removeAttrOrCss(knode, map) {
        if (knode.type != 1) {
            return;
        }
        _removeAttrOrCssByKey(knode, map, '*');
        _removeAttrOrCssByKey(knode, map);
    }
    function _removeAttrOrCssByKey(knode, map, mapKey) {
        mapKey = mapKey || knode.name;
        if (knode.type !== 1) {
            return;
        }
        var newMap = _singleKeyMap(map);
        if (!newMap[mapKey]) {
            return;
        }
        var arr = newMap[mapKey].split(','), allFlag = false;
        for (var i = 0, len = arr.length; i < len; i++) {
            var key = arr[i];
            if (key === '*') {
                allFlag = true;
                break;
            }
            var match = /^(\.?)([^=]+)(?:=([^=]*))?$/.exec(key);
            key = match[2];
            if (match[1]) {
                key = _toCamel(key);
                if (knode[0].style[key]) {
                    knode[0].style[key] = '';
                }
            } else {
                knode.removeAttr(key);
            }
        }
        if (allFlag) {
            knode.remove(true);
        }
    }
    function _getInnerNode(knode) {
        var inner = knode;
        while (inner.first()) {
            inner = inner.first();
        }
        return inner;
    }
    function _isEmptyNode(knode) {
        if (knode.type != 1 || knode.isSingle()) {
            return false;
        }
        return knode.html().replace(/<[^>]+>/g, '') === '';
    }
    function _mergeWrapper(a, b) {
        a = a.clone(true);
        var lastA = _getInnerNode(a), childA = a, merged = false;
        while (b) {
            while (childA) {
                if (childA.name === b.name) {
                    _mergeAttrs(childA, b.attr(), b.css());
                    merged = true;
                }
                childA = childA.first();
            }
            if (!merged) {
                lastA.append(b.clone(false));
            }
            merged = false;
            b = b.first();
        }
        return a;
    }
    function _wrapNode(knode, wrapper) {
        wrapper = wrapper.clone(true);
        if (knode.type == 3) {
            _getInnerNode(wrapper).append(knode.clone(false));
            knode.replaceWith(wrapper);
            return wrapper;
        }
        var nodeWrapper = knode, child;
        while ((child = knode.first()) && child.children().length == 1) {
            knode = child;
        }
        child = knode.first();
        var frag = knode.doc.createDocumentFragment();
        while (child) {
            frag.appendChild(child[0]);
            child = child.next();
        }
        wrapper = _mergeWrapper(nodeWrapper, wrapper);
        if (frag.firstChild) {
            _getInnerNode(wrapper).append(frag);
        }
        nodeWrapper.replaceWith(wrapper);
        return wrapper;
    }
    function _mergeAttrs(knode, attrs, styles) {
        _each(attrs, function (key, val) {
            if (key !== 'style') {
                knode.attr(key, val);
            }
        });
        _each(styles, function (key, val) {
            knode.css(key, val);
        });
    }
    function _inPreElement(knode) {
        while (knode && knode.name != 'body') {
            if (_PRE_TAG_MAP[knode.name] || knode.name == 'div' && knode.hasClass('ke-script')) {
                return true;
            }
            knode = knode.parent();
        }
        return false;
    }
    function KCmd(range) {
        this.init(range);
    }
    _extend(KCmd, {
        init: function (range) {
            var self = this, doc = range.doc;
            self.doc = doc;
            self.win = _getWin(doc);
            self.sel = _getSel(doc);
            self.range = range;
        },
        selection: function (forceReset) {
            var self = this, doc = self.doc, rng = _getRng(doc);
            self.sel = _getSel(doc);
            if (rng) {
                self.range = _range(rng);
                if (K(self.range.startContainer).name == 'html') {
                    self.range.selectNodeContents(doc.body).collapse(false);
                }
                return self;
            }
            if (forceReset) {
                self.range.selectNodeContents(doc.body).collapse(false);
            }
            return self;
        },
        select: function (hasDummy) {
            hasDummy = _undef(hasDummy, true);
            var self = this, sel = self.sel, range = self.range.cloneRange().shrink(), sc = range.startContainer, so = range.startOffset, ec = range.endContainer, eo = range.endOffset, doc = _getDoc(sc), win = self.win, rng, hasU200b = false;
            if (hasDummy && sc.nodeType == 1 && range.collapsed) {
                if (_IERANGE) {
                    var dummy = K('<span>&nbsp;</span>', doc);
                    range.insertNode(dummy[0]);
                    rng = doc.body.createTextRange();
                    try {
                        rng.moveToElementText(dummy[0]);
                    } catch (ex) {
                    }
                    rng.collapse(false);
                    rng.select();
                    dummy.remove();
                    win.focus();
                    return self;
                }
                if (_WEBKIT) {
                    var children = sc.childNodes;
                    if (K(sc).isInline() || so > 0 && K(children[so - 1]).isInline() || children[so] && K(children[so]).isInline()) {
                        range.insertNode(doc.createTextNode('\u200B'));
                        hasU200b = true;
                    }
                }
            }
            if (_IERANGE) {
                try {
                    rng = range.get(true);
                    rng.select();
                } catch (e) {
                }
            } else {
                if (hasU200b) {
                    range.collapse(false);
                }
                rng = range.get(true);
                sel.removeAllRanges();
                sel.addRange(rng);
                if (doc !== document) {
                    var pos = K(rng.endContainer).pos();
                    win.scrollTo(pos.x, pos.y);
                }
            }
            win.focus();
            return self;
        },
        wrap: function (val) {
            var self = this, doc = self.doc, range = self.range, wrapper;
            wrapper = K(val, doc);
            if (range.collapsed) {
                range.shrink();
                range.insertNode(wrapper[0]).selectNodeContents(wrapper[0]);
                return self;
            }
            if (wrapper.isBlock()) {
                var copyWrapper = wrapper.clone(true), child = copyWrapper;
                while (child.first()) {
                    child = child.first();
                }
                child.append(range.extractContents());
                range.insertNode(copyWrapper[0]).selectNode(copyWrapper[0]);
                return self;
            }
            range.enlarge();
            var bookmark = range.createBookmark(), ancestor = range.commonAncestor(), isStart = false;
            K(ancestor).scan(function (node) {
                if (!isStart && node == bookmark.start) {
                    isStart = true;
                    return;
                }
                if (isStart) {
                    if (node == bookmark.end) {
                        return false;
                    }
                    var knode = K(node);
                    if (_inPreElement(knode)) {
                        return;
                    }
                    if (knode.type == 3 && _trim(node.nodeValue).length > 0) {
                        var parent;
                        while ((parent = knode.parent()) && parent.isStyle() && parent.children().length == 1) {
                            knode = parent;
                        }
                        _wrapNode(knode, wrapper);
                    }
                }
            });
            range.moveToBookmark(bookmark);
            return self;
        },
        split: function (isStart, map) {
            var range = this.range, doc = range.doc;
            var tempRange = range.cloneRange().collapse(isStart);
            var node = tempRange.startContainer, pos = tempRange.startOffset, parent = node.nodeType == 3 ? node.parentNode : node, needSplit = false, knode;
            while (parent && parent.parentNode) {
                knode = K(parent);
                if (map) {
                    if (!knode.isStyle()) {
                        break;
                    }
                    if (!_hasAttrOrCss(knode, map)) {
                        break;
                    }
                } else {
                    if (_NOSPLIT_TAG_MAP[knode.name]) {
                        break;
                    }
                }
                needSplit = true;
                parent = parent.parentNode;
            }
            if (needSplit) {
                var dummy = doc.createElement('span');
                range.cloneRange().collapse(!isStart).insertNode(dummy);
                if (isStart) {
                    tempRange.setStartBefore(parent.firstChild).setEnd(node, pos);
                } else {
                    tempRange.setStart(node, pos).setEndAfter(parent.lastChild);
                }
                var frag = tempRange.extractContents(), first = frag.firstChild, last = frag.lastChild;
                if (isStart) {
                    tempRange.insertNode(frag);
                    range.setStartAfter(last).setEndBefore(dummy);
                } else {
                    parent.appendChild(frag);
                    range.setStartBefore(dummy).setEndBefore(first);
                }
                var dummyParent = dummy.parentNode;
                if (dummyParent == range.endContainer) {
                    var prev = K(dummy).prev(), next = K(dummy).next();
                    if (prev && next && prev.type == 3 && next.type == 3) {
                        range.setEnd(prev[0], prev[0].nodeValue.length);
                    } else if (!isStart) {
                        range.setEnd(range.endContainer, range.endOffset - 1);
                    }
                }
                dummyParent.removeChild(dummy);
            }
            return this;
        },
        remove: function (map) {
            var self = this, doc = self.doc, range = self.range;
            range.enlarge();
            if (range.startOffset === 0) {
                var ksc = K(range.startContainer), parent;
                while ((parent = ksc.parent()) && parent.isStyle() && parent.children().length == 1) {
                    ksc = parent;
                }
                range.setStart(ksc[0], 0);
                ksc = K(range.startContainer);
                if (ksc.isBlock()) {
                    _removeAttrOrCss(ksc, map);
                }
                var kscp = ksc.parent();
                if (kscp && kscp.isBlock()) {
                    _removeAttrOrCss(kscp, map);
                }
            }
            var sc, so;
            if (range.collapsed) {
                self.split(true, map);
                sc = range.startContainer;
                so = range.startOffset;
                if (so > 0) {
                    var sb = K(sc.childNodes[so - 1]);
                    if (sb && _isEmptyNode(sb)) {
                        sb.remove();
                        range.setStart(sc, so - 1);
                    }
                }
                var sa = K(sc.childNodes[so]);
                if (sa && _isEmptyNode(sa)) {
                    sa.remove();
                }
                if (_isEmptyNode(sc)) {
                    range.startBefore(sc);
                    sc.remove();
                }
                range.collapse(true);
                return self;
            }
            self.split(true, map);
            self.split(false, map);
            var startDummy = doc.createElement('span'), endDummy = doc.createElement('span');
            range.cloneRange().collapse(false).insertNode(endDummy);
            range.cloneRange().collapse(true).insertNode(startDummy);
            var nodeList = [], cmpStart = false;
            K(range.commonAncestor()).scan(function (node) {
                if (!cmpStart && node == startDummy) {
                    cmpStart = true;
                    return;
                }
                if (node == endDummy) {
                    return false;
                }
                if (cmpStart) {
                    nodeList.push(node);
                }
            });
            K(startDummy).remove();
            K(endDummy).remove();
            sc = range.startContainer;
            so = range.startOffset;
            var ec = range.endContainer, eo = range.endOffset;
            if (so > 0) {
                var startBefore = K(sc.childNodes[so - 1]);
                if (startBefore && _isEmptyNode(startBefore)) {
                    startBefore.remove();
                    range.setStart(sc, so - 1);
                    if (sc == ec) {
                        range.setEnd(ec, eo - 1);
                    }
                }
                var startAfter = K(sc.childNodes[so]);
                if (startAfter && _isEmptyNode(startAfter)) {
                    startAfter.remove();
                    if (sc == ec) {
                        range.setEnd(ec, eo - 1);
                    }
                }
            }
            var endAfter = K(ec.childNodes[range.endOffset]);
            if (endAfter && _isEmptyNode(endAfter)) {
                endAfter.remove();
            }
            var bookmark = range.createBookmark(true);
            _each(nodeList, function (i, node) {
                _removeAttrOrCss(K(node), map);
            });
            range.moveToBookmark(bookmark);
            return self;
        },
        commonNode: function (map) {
            var range = this.range;
            var ec = range.endContainer, eo = range.endOffset, node = ec.nodeType == 3 || eo === 0 ? ec : ec.childNodes[eo - 1];
            function find(node) {
                var child = node, parent = node;
                while (parent) {
                    if (_hasAttrOrCss(K(parent), map)) {
                        return K(parent);
                    }
                    parent = parent.parentNode;
                }
                while (child && (child = child.lastChild)) {
                    if (_hasAttrOrCss(K(child), map)) {
                        return K(child);
                    }
                }
                return null;
            }
            var cNode = find(node);
            if (cNode) {
                return cNode;
            }
            if (node.nodeType == 1 || ec.nodeType == 3 && eo === 0) {
                var prev = K(node).prev();
                if (prev) {
                    return find(prev);
                }
            }
            return null;
        },
        commonAncestor: function (tagName) {
            var range = this.range, sc = range.startContainer, so = range.startOffset, ec = range.endContainer, eo = range.endOffset, startNode = sc.nodeType == 3 || so === 0 ? sc : sc.childNodes[so - 1], endNode = ec.nodeType == 3 || eo === 0 ? ec : ec.childNodes[eo - 1];
            function find(node) {
                while (node) {
                    if (node.nodeType == 1) {
                        if (node.tagName.toLowerCase() === tagName) {
                            return node;
                        }
                    }
                    node = node.parentNode;
                }
                return null;
            }
            var start = find(startNode), end = find(endNode);
            if (start && end && start === end) {
                return K(start);
            }
            return null;
        },
        state: function (key) {
            var self = this, doc = self.doc, bool = false;
            try {
                bool = doc.queryCommandState(key);
            } catch (e) {
            }
            return bool;
        },
        val: function (key) {
            var self = this, doc = self.doc, range = self.range;
            function lc(val) {
                return val.toLowerCase();
            }
            key = lc(key);
            var val = '', knode;
            if (key === 'fontfamily' || key === 'fontname') {
                val = _nativeCommandValue(doc, 'fontname');
                val = val.replace(/['"]/g, '');
                return lc(val);
            }
            if (key === 'formatblock') {
                val = _nativeCommandValue(doc, key);
                if (val === '') {
                    knode = self.commonNode({ 'h1,h2,h3,h4,h5,h6,p,div,pre,address': '*' });
                    if (knode) {
                        val = knode.name;
                    }
                }
                if (val === 'Normal') {
                    val = 'p';
                }
                return lc(val);
            }
            if (key === 'fontsize') {
                knode = self.commonNode({ '*': '.font-size' });
                if (knode) {
                    val = knode.css('font-size');
                }
                return lc(val);
            }
            if (key === 'forecolor') {
                knode = self.commonNode({ '*': '.color' });
                if (knode) {
                    val = knode.css('color');
                }
                val = _toHex(val);
                if (val === '') {
                    val = 'default';
                }
                return lc(val);
            }
            if (key === 'hilitecolor') {
                knode = self.commonNode({ '*': '.background-color' });
                if (knode) {
                    val = knode.css('background-color');
                }
                val = _toHex(val);
                if (val === '') {
                    val = 'default';
                }
                return lc(val);
            }
            return val;
        },
        toggle: function (wrapper, map) {
            var self = this;
            if (self.commonNode(map)) {
                self.remove(map);
            } else {
                self.wrap(wrapper);
            }
            return self.select();
        },
        bold: function () {
            return this.toggle('<strong></strong>', {
                span: '.font-weight=bold',
                strong: '*',
                b: '*'
            });
        },
        italic: function () {
            return this.toggle('<em></em>', {
                span: '.font-style=italic',
                em: '*',
                i: '*'
            });
        },
        underline: function () {
            return this.toggle('<u></u>', {
                span: '.text-decoration=underline',
                u: '*'
            });
        },
        strikethrough: function () {
            return this.toggle('<s></s>', {
                span: '.text-decoration=line-through',
                s: '*'
            });
        },
        forecolor: function (val) {
            return this.wrap('<span style="color:' + val + ';"></span>').select();
        },
        hilitecolor: function (val) {
            return this.wrap('<span style="background-color:' + val + ';"></span>').select();
        },
        fontsize: function (val) {
            return this.wrap('<span style="font-size:' + val + ';"></span>').select();
        },
        fontname: function (val) {
            return this.fontfamily(val);
        },
        fontfamily: function (val) {
            return this.wrap('<span style="font-family:' + val + ';"></span>').select();
        },
        removeformat: function () {
            var map = { '*': '.font-weight,.font-style,.text-decoration,.color,.background-color,.font-size,.font-family,.text-indent' }, tags = _STYLE_TAG_MAP;
            _each(tags, function (key, val) {
                map[key] = '*';
            });
            this.remove(map);
            return this.select();
        },
        inserthtml: function (val, quickMode) {
            var self = this, range = self.range;
            if (val === '') {
                return self;
            }
            function pasteHtml(range, val) {
                val = '<img id="__kindeditor_temp_tag__" width="0" height="0" style="display:none;" />' + val;
                var rng = range.get();
                if (rng.item) {
                    rng.item(0).outerHTML = val;
                } else {
                    rng.pasteHTML(val);
                }
                var temp = range.doc.getElementById('__kindeditor_temp_tag__');
                temp.parentNode.removeChild(temp);
                var newRange = _toRange(rng);
                range.setEnd(newRange.endContainer, newRange.endOffset);
                range.collapse(false);
                self.select(false);
            }
            function insertHtml(range, val) {
                var doc = range.doc, frag = doc.createDocumentFragment();
                K('@' + val, doc).each(function () {
                    frag.appendChild(this);
                });
                range.deleteContents();
                range.insertNode(frag);
                range.collapse(false);
                self.select(false);
            }
            if (_IERANGE && quickMode) {
                try {
                    pasteHtml(range, val);
                } catch (e) {
                    insertHtml(range, val);
                }
                return self;
            }
            insertHtml(range, val);
            return self;
        },
        hr: function () {
            return this.inserthtml('<hr />');
        },
        print: function () {
            this.win.print();
            return this;
        },
        insertimage: function (url, title, width, height, border, align) {
            title = _undef(title, '');
            border = _undef(border, 0);
            var html = '<img src="' + _escape(url) + '" data-ke-src="' + _escape(url) + '" ';
            if (width) {
                html += 'width="' + _escape(width) + '" ';
            }
            if (height) {
                html += 'height="' + _escape(height) + '" ';
            }
            if (title) {
                html += 'title="' + _escape(title) + '" ';
            }
            if (align) {
                html += 'align="' + _escape(align) + '" ';
            }
            html += 'alt="' + _escape(title) + '" ';
            html += '/>';
            return this.inserthtml(html);
        },
        createlink: function (url, type) {
            var self = this, doc = self.doc, range = self.range;
            self.select();
            var a = self.commonNode({ a: '*' });
            if (a && !range.isControl()) {
                range.selectNode(a.get());
                self.select();
            }
            var html = '<a href="' + _escape(url) + '" data-ke-src="' + _escape(url) + '" ';
            if (type) {
                html += ' target="' + _escape(type) + '"';
            }
            if (range.collapsed) {
                html += '>' + _escape(url) + '</a>';
                return self.inserthtml(html);
            }
            if (range.isControl()) {
                var node = K(range.startContainer.childNodes[range.startOffset]);
                html += '></a>';
                node.after(K(html, doc));
                node.next().append(node);
                range.selectNode(node[0]);
                return self.select();
            }
            function setAttr(node, url, type) {
                K(node).attr('href', url).attr('data-ke-src', url);
                if (type) {
                    K(node).attr('target', type);
                } else {
                    K(node).removeAttr('target');
                }
            }
            var sc = range.startContainer, so = range.startOffset, ec = range.endContainer, eo = range.endOffset;
            if (sc.nodeType == 1 && sc === ec && so + 1 === eo) {
                var child = sc.childNodes[so];
                if (child.nodeName.toLowerCase() == 'a') {
                    setAttr(child, url, type);
                    return self;
                }
            }
            _nativeCommand(doc, 'createlink', '__kindeditor_temp_url__');
            K('a[href="__kindeditor_temp_url__"]', doc).each(function () {
                setAttr(this, url, type);
            });
            return self;
        },
        unlink: function () {
            var self = this, doc = self.doc, range = self.range;
            self.select();
            if (range.collapsed) {
                var a = self.commonNode({ a: '*' });
                if (a) {
                    range.selectNode(a.get());
                    self.select();
                }
                _nativeCommand(doc, 'unlink', null);
                if (_WEBKIT && K(range.startContainer).name === 'img') {
                    var parent = K(range.startContainer).parent();
                    if (parent.name === 'a') {
                        parent.remove(true);
                    }
                }
            } else {
                _nativeCommand(doc, 'unlink', null);
            }
            return self;
        }
    });
    _each(('formatblock,selectall,justifyleft,justifycenter,justifyright,justifyfull,insertorderedlist,' + 'insertunorderedlist,indent,outdent,subscript,superscript').split(','), function (i, name) {
        KCmd.prototype[name] = function (val) {
            var self = this;
            self.select();
            _nativeCommand(self.doc, name, val);
            if (_IERANGE && _inArray(name, 'justifyleft,justifycenter,justifyright,justifyfull'.split(',')) >= 0) {
                self.selection();
            }
            if (!_IERANGE || _inArray(name, 'formatblock,selectall,insertorderedlist,insertunorderedlist'.split(',')) >= 0) {
                self.selection();
            }
            return self;
        };
    });
    _each('cut,copy,paste'.split(','), function (i, name) {
        KCmd.prototype[name] = function () {
            var self = this;
            if (!self.doc.queryCommandSupported(name)) {
                throw 'not supported';
            }
            self.select();
            _nativeCommand(self.doc, name, null);
            return self;
        };
    });
    function _cmd(mixed) {
        if (mixed.nodeName) {
            var doc = _getDoc(mixed);
            mixed = _range(doc).selectNodeContents(doc.body).collapse(false);
        }
        return new KCmd(mixed);
    }
    K.CmdClass = KCmd;
    K.cmd = _cmd;
    function _drag(options) {
        var moveEl = options.moveEl, moveFn = options.moveFn, clickEl = options.clickEl || moveEl, beforeDrag = options.beforeDrag, iframeFix = options.iframeFix === undefined ? true : options.iframeFix;
        var docs = [document];
        if (iframeFix) {
            K('iframe').each(function () {
                var src = _formatUrl(this.src || '', 'absolute');
                if (/^https?:\/\//.test(src)) {
                    return;
                }
                var doc;
                try {
                    doc = _iframeDoc(this);
                } catch (e) {
                }
                if (doc) {
                    var pos = K(this).pos();
                    K(doc).data('pos-x', pos.x);
                    K(doc).data('pos-y', pos.y);
                    docs.push(doc);
                }
            });
        }
        clickEl.mousedown(function (e) {
            e.stopPropagation();
            var self = clickEl.get(), x = _removeUnit(moveEl.css('left')), y = _removeUnit(moveEl.css('top')), width = moveEl.width(), height = moveEl.height(), pageX = e.pageX, pageY = e.pageY;
            if (beforeDrag) {
                beforeDrag();
            }
            function moveListener(e) {
                e.preventDefault();
                var kdoc = K(_getDoc(e.target));
                var diffX = _round((kdoc.data('pos-x') || 0) + e.pageX - pageX);
                var diffY = _round((kdoc.data('pos-y') || 0) + e.pageY - pageY);
                moveFn.call(clickEl, x, y, width, height, diffX, diffY);
            }
            function selectListener(e) {
                e.preventDefault();
            }
            function upListener(e) {
                e.preventDefault();
                K(docs).unbind('mousemove', moveListener).unbind('mouseup', upListener).unbind('selectstart', selectListener);
                if (self.releaseCapture) {
                    self.releaseCapture();
                }
            }
            K(docs).mousemove(moveListener).mouseup(upListener).bind('selectstart', selectListener);
            if (self.setCapture) {
                self.setCapture();
            }
        });
    }
    function KWidget(options) {
        this.init(options);
    }
    _extend(KWidget, {
        init: function (options) {
            var self = this;
            self.name = options.name || '';
            self.doc = options.doc || document;
            self.win = _getWin(self.doc);
            self.x = _addUnit(options.x);
            self.y = _addUnit(options.y);
            self.z = options.z;
            self.width = _addUnit(options.width);
            self.height = _addUnit(options.height);
            self.div = K('<div style="display:block;"></div>');
            self.options = options;
            self._alignEl = options.alignEl;
            if (self.width) {
                self.div.css('width', self.width);
            }
            if (self.height) {
                self.div.css('height', self.height);
            }
            if (self.z) {
                self.div.css({
                    position: 'absolute',
                    left: self.x,
                    top: self.y,
                    'z-index': self.z
                });
            }
            if (self.z && (self.x === undefined || self.y === undefined)) {
                self.autoPos(self.width, self.height);
            }
            if (options.cls) {
                self.div.addClass(options.cls);
            }
            if (options.shadowMode) {
                self.div.addClass('ke-shadow');
            }
            if (options.css) {
                self.div.css(options.css);
            }
            if (options.src) {
                K(options.src).replaceWith(self.div);
            } else {
                K(self.doc.body).append(self.div);
            }
            if (options.html) {
                self.div.html(options.html);
            }
            if (options.autoScroll) {
                if (_IE && _V < 7 || _QUIRKS) {
                    var scrollPos = _getScrollPos();
                    K(self.win).bind('scroll', function (e) {
                        var pos = _getScrollPos(), diffX = pos.x - scrollPos.x, diffY = pos.y - scrollPos.y;
                        self.pos(_removeUnit(self.x) + diffX, _removeUnit(self.y) + diffY, false);
                    });
                } else {
                    self.div.css('position', 'fixed');
                }
            }
        },
        pos: function (x, y, updateProp) {
            var self = this;
            updateProp = _undef(updateProp, true);
            if (x !== null) {
                x = x < 0 ? 0 : _addUnit(x);
                self.div.css('left', x);
                if (updateProp) {
                    self.x = x;
                }
            }
            if (y !== null) {
                y = y < 0 ? 0 : _addUnit(y);
                self.div.css('top', y);
                if (updateProp) {
                    self.y = y;
                }
            }
            return self;
        },
        autoPos: function (width, height) {
            var self = this, w = _removeUnit(width) || 0, h = _removeUnit(height) || 0, scrollPos = _getScrollPos();
            if (self._alignEl) {
                var knode = K(self._alignEl), pos = knode.pos(), diffX = _round(knode[0].clientWidth / 2 - w / 2), diffY = _round(knode[0].clientHeight / 2 - h / 2);
                x = diffX < 0 ? pos.x : pos.x + diffX;
                y = diffY < 0 ? pos.y : pos.y + diffY;
            } else {
                var docEl = _docElement(self.doc);
                x = _round(scrollPos.x + (docEl.clientWidth - w) / 2);
                y = _round(scrollPos.y + (docEl.clientHeight - h) / 2);
            }
            if (!(_IE && _V < 7 || _QUIRKS)) {
                x -= scrollPos.x;
                y -= scrollPos.y;
            }
            return self.pos(x, y);
        },
        remove: function () {
            var self = this;
            if (_IE && _V < 7 || _QUIRKS) {
                K(self.win).unbind('scroll');
            }
            self.div.remove();
            _each(self, function (i) {
                self[i] = null;
            });
            return this;
        },
        show: function () {
            this.div.show();
            return this;
        },
        hide: function () {
            this.div.hide();
            return this;
        },
        draggable: function (options) {
            var self = this;
            options = options || {};
            options.moveEl = self.div;
            options.moveFn = function (x, y, width, height, diffX, diffY) {
                if ((x = x + diffX) < 0) {
                    x = 0;
                }
                if ((y = y + diffY) < 0) {
                    y = 0;
                }
                self.pos(x, y);
            };
            _drag(options);
            return self;
        }
    });
    function _widget(options) {
        return new KWidget(options);
    }
    K.WidgetClass = KWidget;
    K.widget = _widget;
    function _iframeDoc(iframe) {
        iframe = _get(iframe);
        return iframe.contentDocument || iframe.contentWindow.document;
    }
    var html, _direction = '';
    if (html = document.getElementsByTagName('html')) {
        _direction = html[0].dir;
    }
    function _getInitHtml(themesPath, bodyClass, cssPath, cssData) {
        var arr = [
                _direction === '' ? '<html>' : '<html dir="' + _direction + '">',
                '<head><meta charset="utf-8" /><title></title>',
                '<style>',
                'html {margin:0;padding:0;}',
                'body {margin:0;padding:5px;}',
                'body, td {font:12px/1.5 "sans serif",tahoma,verdana,helvetica;}',
                'body, p, div {word-wrap: break-word;}',
                'p {margin:5px 0;}',
                'table {border-collapse:collapse;}',
                'img {border:0;}',
                'noscript {display:none;}',
                'table.ke-zeroborder td {border:1px dotted #AAA;}',
                'img.ke-flash {',
                '\tborder:1px solid #AAA;',
                '\tbackground-image:url(' + themesPath + 'common/flash.gif);',
                '\tbackground-position:center center;',
                '\tbackground-repeat:no-repeat;',
                '\twidth:100px;',
                '\theight:100px;',
                '}',
                'img.ke-rm {',
                '\tborder:1px solid #AAA;',
                '\tbackground-image:url(' + themesPath + 'common/rm.gif);',
                '\tbackground-position:center center;',
                '\tbackground-repeat:no-repeat;',
                '\twidth:100px;',
                '\theight:100px;',
                '}',
                'img.ke-media {',
                '\tborder:1px solid #AAA;',
                '\tbackground-image:url(' + themesPath + 'common/media.gif);',
                '\tbackground-position:center center;',
                '\tbackground-repeat:no-repeat;',
                '\twidth:100px;',
                '\theight:100px;',
                '}',
                'img.ke-anchor {',
                '\tborder:1px dashed #666;',
                '\twidth:16px;',
                '\theight:16px;',
                '}',
                '.ke-script, .ke-noscript, .ke-display-none {',
                '\tdisplay:none;',
                '\tfont-size:0;',
                '\twidth:0;',
                '\theight:0;',
                '}',
                '.ke-pagebreak {',
                '\tborder:1px dotted #AAA;',
                '\tfont-size:0;',
                '\theight:2px;',
                '}',
                '</style>'
            ];
        if (!_isArray(cssPath)) {
            cssPath = [cssPath];
        }
        _each(cssPath, function (i, path) {
            if (path) {
                arr.push('<link href="' + path + '" rel="stylesheet" />');
            }
        });
        if (cssData) {
            arr.push('<style>' + cssData + '</style>');
        }
        arr.push('</head><body ' + (bodyClass ? 'class="' + bodyClass + '"' : '') + '></body></html>');
        return arr.join('\n');
    }
    function _elementVal(knode, val) {
        if (knode.hasVal()) {
            if (val === undefined) {
                var html = knode.val();
                html = html.replace(/(<(?:p|p\s[^>]*)>) *(<\/p>)/gi, '');
                return html;
            }
            return knode.val(val);
        }
        return knode.html(val);
    }
    function KEdit(options) {
        this.init(options);
    }
    _extend(KEdit, KWidget, {
        init: function (options) {
            var self = this;
            KEdit.parent.init.call(self, options);
            self.srcElement = K(options.srcElement);
            self.div.addClass('ke-edit');
            self.designMode = _undef(options.designMode, true);
            self.beforeGetHtml = options.beforeGetHtml;
            self.beforeSetHtml = options.beforeSetHtml;
            self.afterSetHtml = options.afterSetHtml;
            var themesPath = _undef(options.themesPath, ''), bodyClass = options.bodyClass, cssPath = options.cssPath, cssData = options.cssData, isDocumentDomain = location.protocol != 'res:' && location.host.replace(/:\d+/, '') !== document.domain, srcScript = 'document.open();' + (isDocumentDomain ? 'document.domain="' + document.domain + '";' : '') + 'document.close();', iframeSrc = _IE ? ' src="javascript:void(function(){' + encodeURIComponent(srcScript) + '}())"' : '';
            self.iframe = K('<iframe class="ke-edit-iframe" hidefocus="true" frameborder="0"' + iframeSrc + '></iframe>').css('width', '100%');
            self.textarea = K('<textarea class="ke-edit-textarea" hidefocus="true"></textarea>').css('width', '100%');
            self.tabIndex = isNaN(parseInt(options.tabIndex, 10)) ? self.srcElement.attr('tabindex') : parseInt(options.tabIndex, 10);
            self.iframe.attr('tabindex', self.tabIndex);
            self.textarea.attr('tabindex', self.tabIndex);
            if (self.width) {
                self.setWidth(self.width);
            }
            if (self.height) {
                self.setHeight(self.height);
            }
            if (self.designMode) {
                self.textarea.hide();
            } else {
                self.iframe.hide();
            }
            function ready() {
                var doc = _iframeDoc(self.iframe);
                doc.open();
                if (isDocumentDomain) {
                    doc.domain = document.domain;
                }
                doc.write(_getInitHtml(themesPath, bodyClass, cssPath, cssData));
                doc.close();
                self.win = self.iframe[0].contentWindow;
                self.doc = doc;
                var cmd = _cmd(doc);
                self.afterChange(function (e) {
                    cmd.selection();
                });
                if (_WEBKIT) {
                    K(doc).click(function (e) {
                        if (K(e.target).name === 'img') {
                            cmd.selection(true);
                            cmd.range.selectNode(e.target);
                            cmd.select();
                        }
                    });
                }
                if (_IE) {
                    self._mousedownHandler = function () {
                        var newRange = cmd.range.cloneRange();
                        newRange.shrink();
                        if (newRange.isControl()) {
                            self.blur();
                        }
                    };
                    K(document).mousedown(self._mousedownHandler);
                    K(doc).keydown(function (e) {
                        if (e.which == 8) {
                            cmd.selection();
                            var rng = cmd.range;
                            if (rng.isControl()) {
                                rng.collapse(true);
                                K(rng.startContainer.childNodes[rng.startOffset]).remove();
                                e.preventDefault();
                            }
                        }
                    });
                }
                self.cmd = cmd;
                self.html(_elementVal(self.srcElement));
                if (_IE) {
                    doc.body.disabled = true;
                    doc.body.contentEditable = true;
                    doc.body.removeAttribute('disabled');
                } else {
                    doc.designMode = 'on';
                }
                if (options.afterCreate) {
                    options.afterCreate.call(self);
                }
            }
            if (isDocumentDomain) {
                self.iframe.bind('load', function (e) {
                    self.iframe.unbind('load');
                    if (_IE) {
                        ready();
                    } else {
                        setTimeout(ready, 0);
                    }
                });
            }
            self.div.append(self.iframe);
            self.div.append(self.textarea);
            self.srcElement.hide();
            !isDocumentDomain && ready();
        },
        setWidth: function (val) {
            var self = this;
            val = _addUnit(val);
            self.width = val;
            self.div.css('width', val);
            return self;
        },
        setHeight: function (val) {
            var self = this;
            val = _addUnit(val);
            self.height = val;
            self.div.css('height', val);
            self.iframe.css('height', val);
            if (_IE && _V < 8 || _QUIRKS) {
                val = _addUnit(_removeUnit(val) - 2);
            }
            self.textarea.css('height', val);
            return self;
        },
        remove: function () {
            var self = this, doc = self.doc;
            K(doc.body).unbind();
            K(doc).unbind();
            K(self.win).unbind();
            if (self._mousedownHandler) {
                K(document).unbind('mousedown', self._mousedownHandler);
            }
            _elementVal(self.srcElement, self.html());
            self.srcElement.show();
            doc.write('');
            self.iframe.unbind();
            self.textarea.unbind();
            KEdit.parent.remove.call(self);
        },
        html: function (val, isFull) {
            var self = this, doc = self.doc;
            if (self.designMode) {
                var body = doc.body;
                if (val === undefined) {
                    if (isFull) {
                        val = '<!doctype html><html>' + body.parentNode.innerHTML + '</html>';
                    } else {
                        val = body.innerHTML;
                    }
                    if (self.beforeGetHtml) {
                        val = self.beforeGetHtml(val);
                    }
                    if (_GECKO && val == '<br />') {
                        val = '';
                    }
                    return val;
                }
                if (self.beforeSetHtml) {
                    val = self.beforeSetHtml(val);
                }
                if (_IE && _V >= 9) {
                    val = val.replace(/(<.*?checked=")checked(".*>)/gi, '$1$2');
                }
                K(body).html(val);
                if (self.afterSetHtml) {
                    self.afterSetHtml();
                }
                return self;
            }
            if (val === undefined) {
                return self.textarea.val();
            }
            self.textarea.val(val);
            return self;
        },
        design: function (bool) {
            var self = this, val;
            if (bool === undefined ? !self.designMode : bool) {
                if (!self.designMode) {
                    val = self.html();
                    self.designMode = true;
                    self.html(val);
                    self.textarea.hide();
                    self.iframe.show();
                }
            } else {
                if (self.designMode) {
                    val = self.html();
                    self.designMode = false;
                    self.html(val);
                    self.iframe.hide();
                    self.textarea.show();
                }
            }
            return self.focus();
        },
        focus: function () {
            var self = this;
            self.designMode ? self.win.focus() : self.textarea[0].focus();
            return self;
        },
        blur: function () {
            var self = this;
            if (_IE) {
                var input = K('<input type="text" style="float:left;width:0;height:0;padding:0;margin:0;border:0;" value="" />', self.div);
                self.div.append(input);
                input[0].focus();
                input.remove();
            } else {
                self.designMode ? self.win.blur() : self.textarea[0].blur();
            }
            return self;
        },
        afterChange: function (fn) {
            var self = this, doc = self.doc, body = doc.body;
            K(doc).keyup(function (e) {
                if (!e.ctrlKey && !e.altKey && _CHANGE_KEY_MAP[e.which]) {
                    fn(e);
                }
            });
            K(doc).mouseup(fn).contextmenu(fn);
            K(self.win).blur(fn);
            function timeoutHandler(e) {
                setTimeout(function () {
                    fn(e);
                }, 1);
            }
            K(body).bind('paste', timeoutHandler);
            K(body).bind('cut', timeoutHandler);
            return self;
        }
    });
    function _edit(options) {
        return new KEdit(options);
    }
    K.EditClass = KEdit;
    K.edit = _edit;
    K.iframeDoc = _iframeDoc;
    function _selectToolbar(name, fn) {
        var self = this, knode = self.get(name);
        if (knode) {
            if (knode.hasClass('ke-disabled')) {
                return;
            }
            fn(knode);
        }
    }
    function KToolbar(options) {
        this.init(options);
    }
    _extend(KToolbar, KWidget, {
        init: function (options) {
            var self = this;
            KToolbar.parent.init.call(self, options);
            self.disableMode = _undef(options.disableMode, false);
            self.noDisableItemMap = _toMap(_undef(options.noDisableItems, []));
            self._itemMap = {};
            self.div.addClass('ke-toolbar').bind('contextmenu,mousedown,mousemove', function (e) {
                e.preventDefault();
            }).attr('unselectable', 'on');
            function find(target) {
                var knode = K(target);
                if (knode.hasClass('ke-outline')) {
                    return knode;
                }
                if (knode.hasClass('ke-toolbar-icon')) {
                    return knode.parent();
                }
            }
            function hover(e, method) {
                var knode = find(e.target);
                if (knode) {
                    if (knode.hasClass('ke-disabled')) {
                        return;
                    }
                    if (knode.hasClass('ke-selected')) {
                        return;
                    }
                    knode[method]('ke-on');
                }
            }
            self.div.mouseover(function (e) {
                hover(e, 'addClass');
            }).mouseout(function (e) {
                hover(e, 'removeClass');
            }).click(function (e) {
                var knode = find(e.target);
                if (knode) {
                    if (knode.hasClass('ke-disabled')) {
                        return;
                    }
                    self.options.click.call(this, e, knode.attr('data-name'));
                }
            });
        },
        get: function (name) {
            if (this._itemMap[name]) {
                return this._itemMap[name];
            }
            return this._itemMap[name] = K('span.ke-icon-' + name, this.div).parent();
        },
        select: function (name) {
            _selectToolbar.call(this, name, function (knode) {
                knode.addClass('ke-selected');
            });
            return self;
        },
        unselect: function (name) {
            _selectToolbar.call(this, name, function (knode) {
                knode.removeClass('ke-selected').removeClass('ke-on');
            });
            return self;
        },
        enable: function (name) {
            var self = this, knode = name.get ? name : self.get(name);
            if (knode) {
                knode.removeClass('ke-disabled');
                knode.opacity(1);
            }
            return self;
        },
        disable: function (name) {
            var self = this, knode = name.get ? name : self.get(name);
            if (knode) {
                knode.removeClass('ke-selected').addClass('ke-disabled');
                knode.opacity(0.5);
            }
            return self;
        },
        disableAll: function (bool, noDisableItems) {
            var self = this, map = self.noDisableItemMap, item;
            if (noDisableItems) {
                map = _toMap(noDisableItems);
            }
            if (bool === undefined ? !self.disableMode : bool) {
                K('span.ke-outline', self.div).each(function () {
                    var knode = K(this), name = knode[0].getAttribute('data-name', 2);
                    if (!map[name]) {
                        self.disable(knode);
                    }
                });
                self.disableMode = true;
            } else {
                K('span.ke-outline', self.div).each(function () {
                    var knode = K(this), name = knode[0].getAttribute('data-name', 2);
                    if (!map[name]) {
                        self.enable(knode);
                    }
                });
                self.disableMode = false;
            }
            return self;
        }
    });
    function _toolbar(options) {
        return new KToolbar(options);
    }
    K.ToolbarClass = KToolbar;
    K.toolbar = _toolbar;
    function KMenu(options) {
        this.init(options);
    }
    _extend(KMenu, KWidget, {
        init: function (options) {
            var self = this;
            options.z = options.z || 811213;
            KMenu.parent.init.call(self, options);
            self.centerLineMode = _undef(options.centerLineMode, true);
            self.div.addClass('ke-menu').bind('click,mousedown', function (e) {
                e.stopPropagation();
            }).attr('unselectable', 'on');
        },
        addItem: function (item) {
            var self = this;
            if (item.title === '-') {
                self.div.append(K('<div class="ke-menu-separator"></div>'));
                return;
            }
            var itemDiv = K('<div class="ke-menu-item" unselectable="on"></div>'), leftDiv = K('<div class="ke-inline-block ke-menu-item-left"></div>'), rightDiv = K('<div class="ke-inline-block ke-menu-item-right"></div>'), height = _addUnit(item.height), iconClass = _undef(item.iconClass, '');
            self.div.append(itemDiv);
            if (height) {
                itemDiv.css('height', height);
                rightDiv.css('line-height', height);
            }
            var centerDiv;
            if (self.centerLineMode) {
                centerDiv = K('<div class="ke-inline-block ke-menu-item-center"></div>');
                if (height) {
                    centerDiv.css('height', height);
                }
            }
            itemDiv.mouseover(function (e) {
                K(this).addClass('ke-menu-item-on');
                if (centerDiv) {
                    centerDiv.addClass('ke-menu-item-center-on');
                }
            }).mouseout(function (e) {
                K(this).removeClass('ke-menu-item-on');
                if (centerDiv) {
                    centerDiv.removeClass('ke-menu-item-center-on');
                }
            }).click(function (e) {
                item.click.call(K(this));
                e.stopPropagation();
            }).append(leftDiv);
            if (centerDiv) {
                itemDiv.append(centerDiv);
            }
            itemDiv.append(rightDiv);
            if (item.checked) {
                iconClass = 'ke-icon-checked';
            }
            if (iconClass !== '') {
                leftDiv.html('<span class="ke-inline-block ke-toolbar-icon ke-toolbar-icon-url ' + iconClass + '"></span>');
            }
            rightDiv.html(item.title);
            return self;
        },
        remove: function () {
            var self = this;
            if (self.options.beforeRemove) {
                self.options.beforeRemove.call(self);
            }
            K('.ke-menu-item', self.div[0]).unbind();
            KMenu.parent.remove.call(self);
            return self;
        }
    });
    function _menu(options) {
        return new KMenu(options);
    }
    K.MenuClass = KMenu;
    K.menu = _menu;
    function KColorPicker(options) {
        this.init(options);
    }
    _extend(KColorPicker, KWidget, {
        init: function (options) {
            var self = this;
            options.z = options.z || 811213;
            KColorPicker.parent.init.call(self, options);
            var colors = options.colors || [
                    [
                        '#E53333',
                        '#E56600',
                        '#FF9900',
                        '#64451D',
                        '#DFC5A4',
                        '#FFE500'
                    ],
                    [
                        '#009900',
                        '#006600',
                        '#99BB00',
                        '#B8D100',
                        '#60D978',
                        '#00D5FF'
                    ],
                    [
                        '#337FE5',
                        '#003399',
                        '#4C33E5',
                        '#9933E5',
                        '#CC33E5',
                        '#EE33EE'
                    ],
                    [
                        '#FFFFFF',
                        '#CCCCCC',
                        '#999999',
                        '#666666',
                        '#333333',
                        '#000000'
                    ]
                ];
            self.selectedColor = (options.selectedColor || '').toLowerCase();
            self._cells = [];
            self.div.addClass('ke-colorpicker').bind('click,mousedown', function (e) {
                e.stopPropagation();
            }).attr('unselectable', 'on');
            var table = self.doc.createElement('table');
            self.div.append(table);
            table.className = 'ke-colorpicker-table';
            table.cellPadding = 0;
            table.cellSpacing = 0;
            table.border = 0;
            var row = table.insertRow(0), cell = row.insertCell(0);
            cell.colSpan = colors[0].length;
            self._addAttr(cell, '', 'ke-colorpicker-cell-top');
            for (var i = 0; i < colors.length; i++) {
                row = table.insertRow(i + 1);
                for (var j = 0; j < colors[i].length; j++) {
                    cell = row.insertCell(j);
                    self._addAttr(cell, colors[i][j], 'ke-colorpicker-cell');
                }
            }
        },
        _addAttr: function (cell, color, cls) {
            var self = this;
            cell = K(cell).addClass(cls);
            if (self.selectedColor === color.toLowerCase()) {
                cell.addClass('ke-colorpicker-cell-selected');
            }
            cell.attr('title', color || self.options.noColor);
            cell.mouseover(function (e) {
                K(this).addClass('ke-colorpicker-cell-on');
            });
            cell.mouseout(function (e) {
                K(this).removeClass('ke-colorpicker-cell-on');
            });
            cell.click(function (e) {
                e.stop();
                self.options.click.call(K(this), color);
            });
            if (color) {
                cell.append(K('<div class="ke-colorpicker-cell-color" unselectable="on"></div>').css('background-color', color));
            } else {
                cell.html(self.options.noColor);
            }
            K(cell).attr('unselectable', 'on');
            self._cells.push(cell);
        },
        remove: function () {
            var self = this;
            _each(self._cells, function () {
                this.unbind();
            });
            KColorPicker.parent.remove.call(self);
            return self;
        }
    });
    function _colorpicker(options) {
        return new KColorPicker(options);
    }
    K.ColorPickerClass = KColorPicker;
    K.colorpicker = _colorpicker;
    function KUploadButton(options) {
        this.init(options);
    }
    _extend(KUploadButton, {
        init: function (options) {
            var self = this, button = K(options.button), fieldName = options.fieldName || 'file', url = options.url || '', title = button.val(), extraParams = options.extraParams || {}, cls = button[0].className || '', target = options.target || 'kindeditor_upload_iframe_' + new Date().getTime();
            options.afterError = options.afterError || function (str) {
                alert(str);
            };
            var hiddenElements = [];
            for (var k in extraParams) {
                hiddenElements.push('<input type="hidden" name="' + k + '" value="' + extraParams[k] + '" />');
            }
            var html = [
                    '<div class="ke-inline-block ' + cls + '">',
                    options.target ? '' : '<iframe name="' + target + '" style="display:none;"></iframe>',
                    options.form ? '<div class="ke-upload-area">' : '<form class="ke-upload-area ke-form" method="post" enctype="multipart/form-data" target="' + target + '" action="' + url + '">',
                    '<span class="ke-button-common">',
                    hiddenElements.join(''),
                    '<input type="button" class="ke-button-common ke-button" value="' + title + '" />',
                    '</span>',
                    '<input type="file" class="ke-upload-file" name="' + fieldName + '" tabindex="-1" />',
                    options.form ? '</div>' : '</form>',
                    '</div>'
                ].join('');
            var div = K(html, button.doc);
            button.hide();
            button.before(div);
            self.div = div;
            self.button = button;
            self.iframe = options.target ? K('iframe[name="' + target + '"]') : K('iframe', div);
            self.form = options.form ? K(options.form) : K('form', div);
            self.fileBox = K('.ke-upload-file', div);
            var width = options.width || K('.ke-button-common', div).width();
            K('.ke-upload-area', div).width(width);
            self.options = options;
        },
        submit: function () {
            var self = this, iframe = self.iframe;
            iframe.bind('load', function () {
                iframe.unbind();
                var tempForm = document.createElement('form');
                self.fileBox.before(tempForm);
                K(tempForm).append(self.fileBox);
                tempForm.reset();
                K(tempForm).remove(true);
                var doc = K.iframeDoc(iframe), pre = doc.getElementsByTagName('pre')[0], str = '', data;
                if (pre) {
                    str = pre.innerHTML;
                } else {
                    str = doc.body.innerHTML;
                }
                str = _unescape(str);
                iframe[0].src = 'javascript:false';
                try {
                    data = K.json(str);
                } catch (e) {
                    self.options.afterError.call(self, '<!doctype html><html>' + doc.body.parentNode.innerHTML + '</html>');
                }
                if (data) {
                    self.options.afterUpload.call(self, data);
                }
            });
            self.form[0].submit();
            return self;
        },
        remove: function () {
            var self = this;
            if (self.fileBox) {
                self.fileBox.unbind();
            }
            self.iframe.remove();
            self.div.remove();
            self.button.show();
            return self;
        }
    });
    function _uploadbutton(options) {
        return new KUploadButton(options);
    }
    K.UploadButtonClass = KUploadButton;
    K.uploadbutton = _uploadbutton;
    function _createButton(arg) {
        arg = arg || {};
        var name = arg.name || '', span = K('<span class="ke-button-common ke-button-outer" title="' + name + '"></span>'), btn = K('<input class="ke-button-common ke-button" type="button" value="' + name + '" />');
        if (arg.click) {
            btn.click(arg.click);
        }
        span.append(btn);
        return span;
    }
    function KDialog(options) {
        this.init(options);
    }
    _extend(KDialog, KWidget, {
        init: function (options) {
            var self = this;
            var shadowMode = _undef(options.shadowMode, true);
            options.z = options.z || 811213;
            options.shadowMode = false;
            options.autoScroll = _undef(options.autoScroll, true);
            KDialog.parent.init.call(self, options);
            var title = options.title, body = K(options.body, self.doc), previewBtn = options.previewBtn, yesBtn = options.yesBtn, noBtn = options.noBtn, closeBtn = options.closeBtn, showMask = _undef(options.showMask, true);
            self.div.addClass('ke-dialog').bind('click,mousedown', function (e) {
                e.stopPropagation();
            });
            var contentDiv = K('<div class="ke-dialog-content"></div>').appendTo(self.div);
            if (_IE && _V < 7) {
                self.iframeMask = K('<iframe src="about:blank" class="ke-dialog-shadow"></iframe>').appendTo(self.div);
            } else if (shadowMode) {
                K('<div class="ke-dialog-shadow"></div>').appendTo(self.div);
            }
            var headerDiv = K('<div class="ke-dialog-header"></div>');
            contentDiv.append(headerDiv);
            headerDiv.html(title);
            self.closeIcon = K('<span class="ke-dialog-icon-close" title="' + closeBtn.name + '"></span>').click(closeBtn.click);
            headerDiv.append(self.closeIcon);
            self.draggable({
                clickEl: headerDiv,
                beforeDrag: options.beforeDrag
            });
            var bodyDiv = K('<div class="ke-dialog-body"></div>');
            contentDiv.append(bodyDiv);
            bodyDiv.append(body);
            var footerDiv = K('<div class="ke-dialog-footer"></div>');
            if (previewBtn || yesBtn || noBtn) {
                contentDiv.append(footerDiv);
            }
            _each([
                {
                    btn: previewBtn,
                    name: 'preview'
                },
                {
                    btn: yesBtn,
                    name: 'yes'
                },
                {
                    btn: noBtn,
                    name: 'no'
                }
            ], function () {
                if (this.btn) {
                    var button = _createButton(this.btn);
                    button.addClass('ke-dialog-' + this.name);
                    footerDiv.append(button);
                }
            });
            if (self.height) {
                bodyDiv.height(_removeUnit(self.height) - headerDiv.height() - footerDiv.height());
            }
            self.div.width(self.div.width());
            self.div.height(self.div.height());
            self.mask = null;
            if (showMask) {
                var docEl = _docElement(self.doc), docWidth = Math.max(docEl.scrollWidth, docEl.clientWidth), docHeight = Math.max(docEl.scrollHeight, docEl.clientHeight);
                self.mask = _widget({
                    x: 0,
                    y: 0,
                    z: self.z - 1,
                    cls: 'ke-dialog-mask',
                    width: docWidth,
                    height: docHeight
                });
            }
            self.autoPos(self.div.width(), self.div.height());
            self.footerDiv = footerDiv;
            self.bodyDiv = bodyDiv;
            self.headerDiv = headerDiv;
            self.isLoading = false;
        },
        setMaskIndex: function (z) {
            var self = this;
            self.mask.div.css('z-index', z);
        },
        showLoading: function (msg) {
            msg = _undef(msg, '');
            var self = this, body = self.bodyDiv;
            self.loading = K('<div class="ke-dialog-loading"><div class="ke-inline-block ke-dialog-loading-content" style="margin-top:' + Math.round(body.height() / 3) + 'px;">' + msg + '</div></div>').width(body.width()).height(body.height()).css('top', self.headerDiv.height() + 'px');
            body.css('visibility', 'hidden').after(self.loading);
            self.isLoading = true;
            return self;
        },
        hideLoading: function () {
            this.loading && this.loading.remove();
            this.bodyDiv.css('visibility', 'visible');
            this.isLoading = false;
            return this;
        },
        remove: function () {
            var self = this;
            if (self.options.beforeRemove) {
                self.options.beforeRemove.call(self);
            }
            self.mask && self.mask.remove();
            self.iframeMask && self.iframeMask.remove();
            self.closeIcon.unbind();
            K('input', self.div).unbind();
            K('button', self.div).unbind();
            self.footerDiv.unbind();
            self.bodyDiv.unbind();
            self.headerDiv.unbind();
            K('iframe', self.div).each(function () {
                K(this).remove();
            });
            KDialog.parent.remove.call(self);
            return self;
        }
    });
    function _dialog(options) {
        return new KDialog(options);
    }
    K.DialogClass = KDialog;
    K.dialog = _dialog;
    function _tabs(options) {
        var self = _widget(options), remove = self.remove, afterSelect = options.afterSelect, div = self.div, liList = [];
        div.addClass('ke-tabs').bind('contextmenu,mousedown,mousemove', function (e) {
            e.preventDefault();
        });
        var ul = K('<ul class="ke-tabs-ul ke-clearfix"></ul>');
        div.append(ul);
        self.add = function (tab) {
            var li = K('<li class="ke-tabs-li">' + tab.title + '</li>');
            li.data('tab', tab);
            liList.push(li);
            ul.append(li);
        };
        self.selectedIndex = 0;
        self.select = function (index) {
            self.selectedIndex = index;
            _each(liList, function (i, li) {
                li.unbind();
                if (i === index) {
                    li.addClass('ke-tabs-li-selected');
                    K(li.data('tab').panel).show('');
                } else {
                    li.removeClass('ke-tabs-li-selected').removeClass('ke-tabs-li-on').mouseover(function () {
                        K(this).addClass('ke-tabs-li-on');
                    }).mouseout(function () {
                        K(this).removeClass('ke-tabs-li-on');
                    }).click(function () {
                        self.select(i);
                    });
                    K(li.data('tab').panel).hide();
                }
            });
            if (afterSelect) {
                afterSelect.call(self, index);
            }
        };
        self.remove = function () {
            _each(liList, function () {
                this.remove();
            });
            ul.remove();
            remove.call(self);
        };
        return self;
    }
    K.tabs = _tabs;
    function _loadScript(url, fn) {
        var head = document.getElementsByTagName('head')[0] || (_QUIRKS ? document.body : document.documentElement), script = document.createElement('script');
        head.appendChild(script);
        script.src = url;
        script.charset = 'utf-8';
        script.onload = script.onreadystatechange = function () {
            if (!this.readyState || this.readyState === 'loaded') {
                if (fn) {
                    fn();
                }
                script.onload = script.onreadystatechange = null;
                head.removeChild(script);
            }
        };
    }
    function _chopQuery(url) {
        var index = url.indexOf('?');
        return index > 0 ? url.substr(0, index) : url;
    }
    function _loadStyle(url) {
        var head = document.getElementsByTagName('head')[0] || (_QUIRKS ? document.body : document.documentElement), link = document.createElement('link'), absoluteUrl = _chopQuery(_formatUrl(url, 'absolute'));
        var links = K('link[rel="stylesheet"]', head);
        for (var i = 0, len = links.length; i < len; i++) {
            if (_chopQuery(_formatUrl(links[i].href, 'absolute')) === absoluteUrl) {
                return;
            }
        }
        head.appendChild(link);
        link.href = url;
        link.rel = 'stylesheet';
    }
    function _ajax(url, fn, method, param, dataType) {
        method = method || 'GET';
        dataType = dataType || 'json';
        var xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
        xhr.open(method, url, true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                if (fn) {
                    var data = _trim(xhr.responseText);
                    if (dataType == 'json') {
                        data = _json(data);
                    }
                    fn(data);
                }
            }
        };
        if (method == 'POST') {
            var params = [];
            _each(param, function (key, val) {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
            });
            try {
                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            } catch (e) {
            }
            xhr.send(params.join('&'));
        } else {
            xhr.send(null);
        }
    }
    K.loadScript = _loadScript;
    K.loadStyle = _loadStyle;
    K.ajax = _ajax;
    var _plugins = {};
    function _plugin(name, fn) {
        if (name === undefined) {
            return _plugins;
        }
        if (!fn) {
            return _plugins[name];
        }
        _plugins[name] = fn;
    }
    var _language = {};
    function _parseLangKey(key) {
        var match, ns = 'core';
        if (match = /^(\w+)\.(\w+)$/.exec(key)) {
            ns = match[1];
            key = match[2];
        }
        return {
            ns: ns,
            key: key
        };
    }
    function _lang(mixed, langType) {
        langType = langType === undefined ? K.options.langType : langType;
        if (typeof mixed === 'string') {
            if (!_language[langType]) {
                return 'no language';
            }
            var pos = mixed.length - 1;
            if (mixed.substr(pos) === '.') {
                return _language[langType][mixed.substr(0, pos)];
            }
            var obj = _parseLangKey(mixed);
            return _language[langType][obj.ns][obj.key];
        }
        _each(mixed, function (key, val) {
            var obj = _parseLangKey(key);
            if (!_language[langType]) {
                _language[langType] = {};
            }
            if (!_language[langType][obj.ns]) {
                _language[langType][obj.ns] = {};
            }
            _language[langType][obj.ns][obj.key] = val;
        });
    }
    function _getImageFromRange(range, fn) {
        if (range.collapsed) {
            return;
        }
        range = range.cloneRange().up();
        var sc = range.startContainer, so = range.startOffset;
        if (!_WEBKIT && !range.isControl()) {
            return;
        }
        var img = K(sc.childNodes[so]);
        if (!img || img.name != 'img') {
            return;
        }
        if (fn(img)) {
            return img;
        }
    }
    function _bindContextmenuEvent() {
        var self = this, doc = self.edit.doc;
        K(doc).contextmenu(function (e) {
            if (self.menu) {
                self.hideMenu();
            }
            if (!self.useContextmenu) {
                e.preventDefault();
                return;
            }
            if (self._contextmenus.length === 0) {
                return;
            }
            var maxWidth = 0, items = [];
            _each(self._contextmenus, function () {
                if (this.title == '-') {
                    items.push(this);
                    return;
                }
                if (this.cond && this.cond()) {
                    items.push(this);
                    if (this.width && this.width > maxWidth) {
                        maxWidth = this.width;
                    }
                }
            });
            while (items.length > 0 && items[0].title == '-') {
                items.shift();
            }
            while (items.length > 0 && items[items.length - 1].title == '-') {
                items.pop();
            }
            var prevItem = null;
            _each(items, function (i) {
                if (this.title == '-' && prevItem.title == '-') {
                    delete items[i];
                }
                prevItem = this;
            });
            if (items.length > 0) {
                e.preventDefault();
                var pos = K(self.edit.iframe).pos(), menu = _menu({
                        x: pos.x + e.clientX,
                        y: pos.y + e.clientY,
                        width: maxWidth,
                        css: { visibility: 'hidden' },
                        shadowMode: self.shadowMode
                    });
                _each(items, function () {
                    if (this.title) {
                        menu.addItem(this);
                    }
                });
                var docEl = _docElement(menu.doc), menuHeight = menu.div.height();
                if (e.clientY + menuHeight >= docEl.clientHeight - 100) {
                    menu.pos(menu.x, _removeUnit(menu.y) - menuHeight);
                }
                menu.div.css('visibility', 'visible');
                self.menu = menu;
            }
        });
    }
    function _bindNewlineEvent() {
        var self = this, doc = self.edit.doc, newlineTag = self.newlineTag;
        if (_IE && newlineTag !== 'br') {
            return;
        }
        if (_GECKO && _V < 3 && newlineTag !== 'p') {
            return;
        }
        if (_OPERA && _V < 9) {
            return;
        }
        var brSkipTagMap = _toMap('h1,h2,h3,h4,h5,h6,pre,li'), pSkipTagMap = _toMap('p,h1,h2,h3,h4,h5,h6,pre,li,blockquote');
        function getAncestorTagName(range) {
            var ancestor = K(range.commonAncestor());
            while (ancestor) {
                if (ancestor.type == 1 && !ancestor.isStyle()) {
                    break;
                }
                ancestor = ancestor.parent();
            }
            return ancestor.name;
        }
        K(doc).keydown(function (e) {
            if (e.which != 13 || e.shiftKey || e.ctrlKey || e.altKey) {
                return;
            }
            self.cmd.selection();
            var tagName = getAncestorTagName(self.cmd.range);
            if (tagName == 'marquee' || tagName == 'select') {
                return;
            }
            if (newlineTag === 'br' && !brSkipTagMap[tagName]) {
                e.preventDefault();
                self.insertHtml('<br />' + (_IE && _V < 9 ? '' : '\u200B'));
                return;
            }
            if (!pSkipTagMap[tagName]) {
                _nativeCommand(doc, 'formatblock', '<p>');
            }
        });
        K(doc).keyup(function (e) {
            if (e.which != 13 || e.shiftKey || e.ctrlKey || e.altKey) {
                return;
            }
            if (newlineTag == 'br') {
                return;
            }
            if (_GECKO) {
                var root = self.cmd.commonAncestor('p');
                var a = self.cmd.commonAncestor('a');
                if (a && a.text() == '') {
                    a.remove(true);
                    self.cmd.range.selectNodeContents(root[0]).collapse(true);
                    self.cmd.select();
                }
                return;
            }
            self.cmd.selection();
            var tagName = getAncestorTagName(self.cmd.range);
            if (tagName == 'marquee' || tagName == 'select') {
                return;
            }
            if (!pSkipTagMap[tagName]) {
                _nativeCommand(doc, 'formatblock', '<p>');
            }
            var div = self.cmd.commonAncestor('div');
            if (div) {
                var p = K('<p></p>'), child = div[0].firstChild;
                while (child) {
                    var next = child.nextSibling;
                    p.append(child);
                    child = next;
                }
                div.before(p);
                div.remove();
                self.cmd.range.selectNodeContents(p[0]);
                self.cmd.select();
            }
        });
    }
    function _bindTabEvent() {
        var self = this, doc = self.edit.doc;
        K(doc).keydown(function (e) {
            if (e.which == 9) {
                e.preventDefault();
                if (self.afterTab) {
                    self.afterTab.call(self, e);
                    return;
                }
                var cmd = self.cmd, range = cmd.range;
                range.shrink();
                if (range.collapsed && range.startContainer.nodeType == 1) {
                    range.insertNode(K('@&nbsp;', doc)[0]);
                    cmd.select();
                }
                self.insertHtml('&nbsp;&nbsp;&nbsp;&nbsp;');
            }
        });
    }
    function _bindFocusEvent() {
        var self = this;
        K(self.edit.textarea[0], self.edit.win).focus(function (e) {
            if (self.afterFocus) {
                self.afterFocus.call(self, e);
            }
        }).blur(function (e) {
            if (self.afterBlur) {
                self.afterBlur.call(self, e);
            }
        });
    }
    function _removeBookmarkTag(html) {
        return _trim(html.replace(/<span [^>]*id="?__kindeditor_bookmark_\w+_\d+__"?[^>]*><\/span>/gi, ''));
    }
    function _removeTempTag(html) {
        return html.replace(/<div[^>]+class="?__kindeditor_paste__"?[^>]*>[\s\S]*?<\/div>/gi, '');
    }
    function _addBookmarkToStack(stack, bookmark) {
        if (stack.length === 0) {
            stack.push(bookmark);
            return;
        }
        var prev = stack[stack.length - 1];
        if (_removeBookmarkTag(bookmark.html) !== _removeBookmarkTag(prev.html)) {
            stack.push(bookmark);
        }
    }
    function _undoToRedo(fromStack, toStack) {
        var self = this, edit = self.edit, body = edit.doc.body, range, bookmark;
        if (fromStack.length === 0) {
            return self;
        }
        if (edit.designMode) {
            range = self.cmd.range;
            bookmark = range.createBookmark(true);
            bookmark.html = body.innerHTML;
        } else {
            bookmark = { html: body.innerHTML };
        }
        _addBookmarkToStack(toStack, bookmark);
        var prev = fromStack.pop();
        if (_removeBookmarkTag(bookmark.html) === _removeBookmarkTag(prev.html) && fromStack.length > 0) {
            prev = fromStack.pop();
        }
        if (edit.designMode) {
            edit.html(prev.html);
            if (prev.start) {
                range.moveToBookmark(prev);
                self.select();
            }
        } else {
            K(body).html(_removeBookmarkTag(prev.html));
        }
        return self;
    }
    function KEditor(options) {
        var self = this;
        self.options = {};
        function setOption(key, val) {
            if (KEditor.prototype[key] === undefined) {
                self[key] = val;
            }
            self.options[key] = val;
        }
        _each(options, function (key, val) {
            setOption(key, options[key]);
        });
        _each(K.options, function (key, val) {
            if (self[key] === undefined) {
                setOption(key, val);
            }
        });
        var se = K(self.srcElement || '<textarea/>');
        if (!self.width) {
            self.width = se[0].style.width || se.width();
        }
        if (!self.height) {
            self.height = se[0].style.height || se.height();
        }
        setOption('width', _undef(self.width, self.minWidth));
        setOption('height', _undef(self.height, self.minHeight));
        setOption('width', _addUnit(self.width));
        setOption('height', _addUnit(self.height));
        if (_MOBILE && (!_IOS || _V < 534)) {
            self.designMode = false;
        }
        self.srcElement = se;
        self.initContent = '';
        self.plugin = {};
        self.isCreated = false;
        self._handlers = {};
        self._contextmenus = [];
        self._undoStack = [];
        self._redoStack = [];
        self._firstAddBookmark = true;
        self.menu = self.contextmenu = null;
        self.dialogs = [];
    }
    KEditor.prototype = {
        lang: function (mixed) {
            return _lang(mixed, this.langType);
        },
        loadPlugin: function (name, fn) {
            var self = this;
            if (_plugins[name]) {
                if (!_isFunction(_plugins[name])) {
                    setTimeout(function () {
                        self.loadPlugin(name, fn);
                    }, 100);
                    return self;
                }
                _plugins[name].call(self, KindEditor);
                if (fn) {
                    fn.call(self);
                }
                return self;
            }
            _plugins[name] = 'loading';
            _loadScript(self.pluginsPath + name + '/' + name + '.js?ver=' + encodeURIComponent(K.DEBUG ? _TIME : _VERSION), function () {
                setTimeout(function () {
                    if (_plugins[name]) {
                        self.loadPlugin(name, fn);
                    }
                }, 0);
            });
            return self;
        },
        handler: function (key, fn) {
            var self = this;
            if (!self._handlers[key]) {
                self._handlers[key] = [];
            }
            if (_isFunction(fn)) {
                self._handlers[key].push(fn);
                return self;
            }
            _each(self._handlers[key], function () {
                fn = this.call(self, fn);
            });
            return fn;
        },
        clickToolbar: function (name, fn) {
            var self = this, key = 'clickToolbar' + name;
            if (fn === undefined) {
                if (self._handlers[key]) {
                    return self.handler(key);
                }
                self.loadPlugin(name, function () {
                    self.handler(key);
                });
                return self;
            }
            return self.handler(key, fn);
        },
        updateState: function () {
            var self = this;
            _each(('justifyleft,justifycenter,justifyright,justifyfull,insertorderedlist,insertunorderedlist,' + 'subscript,superscript,bold,italic,underline,strikethrough').split(','), function (i, name) {
                self.cmd.state(name) ? self.toolbar.select(name) : self.toolbar.unselect(name);
            });
            return self;
        },
        addContextmenu: function (item) {
            this._contextmenus.push(item);
            return this;
        },
        afterCreate: function (fn) {
            return this.handler('afterCreate', fn);
        },
        beforeRemove: function (fn) {
            return this.handler('beforeRemove', fn);
        },
        beforeGetHtml: function (fn) {
            return this.handler('beforeGetHtml', fn);
        },
        beforeSetHtml: function (fn) {
            return this.handler('beforeSetHtml', fn);
        },
        afterSetHtml: function (fn) {
            return this.handler('afterSetHtml', fn);
        },
        create: function () {
            var self = this, fullscreenMode = self.fullscreenMode;
            if (self.isCreated) {
                return self;
            }
            if (self.srcElement.data('kindeditor')) {
                return self;
            }
            self.srcElement.data('kindeditor', 'true');
            if (fullscreenMode) {
                _docElement().style.overflow = 'hidden';
            } else {
                _docElement().style.overflow = '';
            }
            var width = fullscreenMode ? _docElement().clientWidth + 'px' : self.width, height = fullscreenMode ? _docElement().clientHeight + 'px' : self.height;
            if (_IE && _V < 8 || _QUIRKS) {
                height = _addUnit(_removeUnit(height) + 2);
            }
            var container = self.container = K(self.layout);
            if (fullscreenMode) {
                K(document.body).append(container);
            } else {
                self.srcElement.before(container);
            }
            var toolbarDiv = K('.toolbar', container), editDiv = K('.edit', container), statusbar = self.statusbar = K('.statusbar', container);
            container.removeClass('container').addClass('ke-container ke-container-' + self.themeType).css('width', width);
            if (fullscreenMode) {
                container.css({
                    position: 'absolute',
                    left: 0,
                    top: 0,
                    'z-index': 811211
                });
                if (!_GECKO) {
                    self._scrollPos = _getScrollPos();
                }
                window.scrollTo(0, 0);
                K(document.body).css({
                    'height': '1px',
                    'overflow': 'hidden'
                });
                K(document.body.parentNode).css('overflow', 'hidden');
                self._fullscreenExecuted = true;
            } else {
                if (self._fullscreenExecuted) {
                    K(document.body).css({
                        'height': '',
                        'overflow': ''
                    });
                    K(document.body.parentNode).css('overflow', '');
                }
                if (self._scrollPos) {
                    window.scrollTo(self._scrollPos.x, self._scrollPos.y);
                }
            }
            var htmlList = [];
            K.each(self.items, function (i, name) {
                if (name == '|') {
                    htmlList.push('<span class="ke-inline-block ke-separator"></span>');
                } else if (name == '/') {
                    htmlList.push('<div class="ke-hr"></div>');
                } else {
                    htmlList.push('<span class="ke-outline" data-name="' + name + '" title="' + self.lang(name) + '" unselectable="on">');
                    htmlList.push('<span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-' + name + '" unselectable="on"></span></span>');
                }
            });
            var toolbar = self.toolbar = _toolbar({
                    src: toolbarDiv,
                    html: htmlList.join(''),
                    noDisableItems: self.noDisableItems,
                    click: function (e, name) {
                        e.stop();
                        if (self.menu) {
                            var menuName = self.menu.name;
                            self.hideMenu();
                            if (menuName === name) {
                                return;
                            }
                        }
                        self.clickToolbar(name);
                    }
                });
            var editHeight = _removeUnit(height) - toolbar.div.height();
            var edit = self.edit = _edit({
                    height: editHeight > 0 && _removeUnit(height) > self.minHeight ? editHeight : self.minHeight,
                    src: editDiv,
                    srcElement: self.srcElement,
                    designMode: self.designMode,
                    themesPath: self.themesPath,
                    bodyClass: self.bodyClass,
                    cssPath: self.cssPath,
                    cssData: self.cssData,
                    beforeGetHtml: function (html) {
                        html = self.beforeGetHtml(html);
                        html = _removeBookmarkTag(_removeTempTag(html));
                        return _formatHtml(html, self.filterMode ? self.htmlTags : null, self.urlType, self.wellFormatMode, self.indentChar);
                    },
                    beforeSetHtml: function (html) {
                        html = _formatHtml(html, self.filterMode ? self.htmlTags : null, '', false);
                        return self.beforeSetHtml(html);
                    },
                    afterSetHtml: function () {
                        self.edit = edit = this;
                        self.afterSetHtml();
                    },
                    afterCreate: function () {
                        self.edit = edit = this;
                        self.cmd = edit.cmd;
                        self._docMousedownFn = function (e) {
                            if (self.menu) {
                                self.hideMenu();
                            }
                        };
                        K(edit.doc, document).mousedown(self._docMousedownFn);
                        _bindContextmenuEvent.call(self);
                        _bindNewlineEvent.call(self);
                        _bindTabEvent.call(self);
                        _bindFocusEvent.call(self);
                        edit.afterChange(function (e) {
                            if (!edit.designMode) {
                                return;
                            }
                            self.updateState();
                            self.addBookmark();
                            if (self.options.afterChange) {
                                self.options.afterChange.call(self);
                            }
                        });
                        edit.textarea.keyup(function (e) {
                            if (!e.ctrlKey && !e.altKey && _INPUT_KEY_MAP[e.which]) {
                                if (self.options.afterChange) {
                                    self.options.afterChange.call(self);
                                }
                            }
                        });
                        if (self.readonlyMode) {
                            self.readonly();
                        }
                        self.isCreated = true;
                        if (self.initContent === '') {
                            self.initContent = self.html();
                        }
                        if (self._undoStack.length > 0) {
                            var prev = self._undoStack.pop();
                            if (prev.start) {
                                self.html(prev.html);
                                edit.cmd.range.moveToBookmark(prev);
                                self.select();
                            }
                        }
                        self.afterCreate();
                        if (self.options.afterCreate) {
                            self.options.afterCreate.call(self);
                        }
                    }
                });
            statusbar.removeClass('statusbar').addClass('ke-statusbar').append('<span class="ke-inline-block ke-statusbar-center-icon"></span>').append('<span class="ke-inline-block ke-statusbar-right-icon"></span>');
            if (self._fullscreenResizeHandler) {
                K(window).unbind('resize', self._fullscreenResizeHandler);
                self._fullscreenResizeHandler = null;
            }
            function initResize() {
                if (statusbar.height() === 0) {
                    setTimeout(initResize, 100);
                    return;
                }
                self.resize(width, height, false);
            }
            initResize();
            if (fullscreenMode) {
                self._fullscreenResizeHandler = function (e) {
                    if (self.isCreated) {
                        self.resize(_docElement().clientWidth, _docElement().clientHeight, false);
                    }
                };
                K(window).bind('resize', self._fullscreenResizeHandler);
                toolbar.select('fullscreen');
                statusbar.first().css('visibility', 'hidden');
                statusbar.last().css('visibility', 'hidden');
            } else {
                if (_GECKO) {
                    K(window).bind('scroll', function (e) {
                        self._scrollPos = _getScrollPos();
                    });
                }
                if (self.resizeType > 0) {
                    _drag({
                        moveEl: container,
                        clickEl: statusbar,
                        moveFn: function (x, y, width, height, diffX, diffY) {
                            height += diffY;
                            self.resize(null, height);
                        }
                    });
                } else {
                    statusbar.first().css('visibility', 'hidden');
                }
                if (self.resizeType === 2) {
                    _drag({
                        moveEl: container,
                        clickEl: statusbar.last(),
                        moveFn: function (x, y, width, height, diffX, diffY) {
                            width += diffX;
                            height += diffY;
                            self.resize(width, height);
                        }
                    });
                } else {
                    statusbar.last().css('visibility', 'hidden');
                }
            }
            return self;
        },
        remove: function () {
            var self = this;
            if (!self.isCreated) {
                return self;
            }
            self.beforeRemove();
            self.srcElement.data('kindeditor', '');
            if (self.menu) {
                self.hideMenu();
            }
            _each(self.dialogs, function () {
                self.hideDialog();
            });
            K(document).unbind('mousedown', self._docMousedownFn);
            self.toolbar.remove();
            self.edit.remove();
            self.statusbar.last().unbind();
            self.statusbar.unbind();
            self.container.remove();
            self.container = self.toolbar = self.edit = self.menu = null;
            self.dialogs = [];
            self.isCreated = false;
            return self;
        },
        resize: function (width, height, updateProp) {
            var self = this;
            updateProp = _undef(updateProp, true);
            if (width) {
                if (!/%/.test(width)) {
                    width = _removeUnit(width);
                    width = width < self.minWidth ? self.minWidth : width;
                }
                self.container.css('width', _addUnit(width));
                if (updateProp) {
                    self.width = _addUnit(width);
                }
            }
            if (height) {
                height = _removeUnit(height);
                editHeight = _removeUnit(height) - self.toolbar.div.height() - self.statusbar.height();
                editHeight = editHeight < self.minHeight ? self.minHeight : editHeight;
                self.edit.setHeight(editHeight);
                if (updateProp) {
                    self.height = _addUnit(height);
                }
            }
            return self;
        },
        select: function () {
            this.isCreated && this.cmd.select();
            return this;
        },
        html: function (val) {
            var self = this;
            if (val === undefined) {
                return self.isCreated ? self.edit.html() : _elementVal(self.srcElement);
            }
            self.isCreated ? self.edit.html(val) : _elementVal(self.srcElement, val);
            if (self.isCreated) {
                self.cmd.selection();
            }
            return self;
        },
        fullHtml: function () {
            return this.isCreated ? this.edit.html(undefined, true) : '';
        },
        text: function (val) {
            var self = this;
            if (val === undefined) {
                return _trim(self.html().replace(/<(?!img|embed).*?>/gi, '').replace(/&nbsp;/gi, ' '));
            } else {
                return self.html(_escape(val));
            }
        },
        isEmpty: function () {
            return _trim(this.text().replace(/\r\n|\n|\r/, '')) === '';
        },
        isDirty: function () {
            return _trim(this.initContent.replace(/\r\n|\n|\r|t/g, '')) !== _trim(this.html().replace(/\r\n|\n|\r|t/g, ''));
        },
        selectedHtml: function () {
            var val = this.isCreated ? this.cmd.range.html() : '';
            val = _removeBookmarkTag(_removeTempTag(val));
            return val;
        },
        count: function (mode) {
            var self = this;
            mode = (mode || 'html').toLowerCase();
            if (mode === 'html') {
                return self.html().length;
            }
            if (mode === 'text') {
                return self.text().replace(/<(?:img|embed).*?>/gi, 'K').replace(/\r\n|\n|\r/g, '').length;
            }
            return 0;
        },
        exec: function (key) {
            key = key.toLowerCase();
            var self = this, cmd = self.cmd, changeFlag = _inArray(key, 'selectall,copy,paste,print'.split(',')) < 0;
            if (changeFlag) {
                self.addBookmark(false);
            }
            cmd[key].apply(cmd, _toArray(arguments, 1));
            if (changeFlag) {
                self.updateState();
                self.addBookmark(false);
                if (self.options.afterChange) {
                    self.options.afterChange.call(self);
                }
            }
            return self;
        },
        insertHtml: function (val, quickMode) {
            if (!this.isCreated) {
                return this;
            }
            val = this.beforeSetHtml(val);
            this.exec('inserthtml', val, quickMode);
            return this;
        },
        appendHtml: function (val) {
            this.html(this.html() + val);
            if (this.isCreated) {
                var cmd = this.cmd;
                cmd.range.selectNodeContents(cmd.doc.body).collapse(false);
                cmd.select();
            }
            return this;
        },
        sync: function () {
            _elementVal(this.srcElement, this.html());
            return this;
        },
        focus: function () {
            this.isCreated ? this.edit.focus() : this.srcElement[0].focus();
            return this;
        },
        blur: function () {
            this.isCreated ? this.edit.blur() : this.srcElement[0].blur();
            return this;
        },
        addBookmark: function (checkSize) {
            checkSize = _undef(checkSize, true);
            var self = this, edit = self.edit, body = edit.doc.body, html = _removeTempTag(body.innerHTML), bookmark;
            if (checkSize && self._undoStack.length > 0) {
                var prev = self._undoStack[self._undoStack.length - 1];
                if (Math.abs(html.length - _removeBookmarkTag(prev.html).length) < self.minChangeSize) {
                    return self;
                }
            }
            if (edit.designMode && !self._firstAddBookmark) {
                var range = self.cmd.range;
                bookmark = range.createBookmark(true);
                bookmark.html = _removeTempTag(body.innerHTML);
                range.moveToBookmark(bookmark);
            } else {
                bookmark = { html: html };
            }
            self._firstAddBookmark = false;
            _addBookmarkToStack(self._undoStack, bookmark);
            return self;
        },
        undo: function () {
            return _undoToRedo.call(this, this._undoStack, this._redoStack);
        },
        redo: function () {
            return _undoToRedo.call(this, this._redoStack, this._undoStack);
        },
        fullscreen: function (bool) {
            this.fullscreenMode = bool === undefined ? !this.fullscreenMode : bool;
            this.addBookmark(false);
            return this.remove().create();
        },
        readonly: function (isReadonly) {
            isReadonly = _undef(isReadonly, true);
            var self = this, edit = self.edit, doc = edit.doc;
            if (self.designMode) {
                self.toolbar.disableAll(isReadonly, []);
            } else {
                _each(self.noDisableItems, function () {
                    self.toolbar[isReadonly ? 'disable' : 'enable'](this);
                });
            }
            if (_IE) {
                doc.body.contentEditable = !isReadonly;
            } else {
                doc.designMode = isReadonly ? 'off' : 'on';
            }
            edit.textarea[0].disabled = isReadonly;
        },
        createMenu: function (options) {
            var self = this, name = options.name, knode = self.toolbar.get(name), pos = knode.pos();
            options.x = pos.x;
            options.y = pos.y + knode.height();
            options.z = self.options.zIndex;
            options.shadowMode = _undef(options.shadowMode, self.shadowMode);
            if (options.selectedColor !== undefined) {
                options.cls = 'ke-colorpicker-' + self.themeType;
                options.noColor = self.lang('noColor');
                self.menu = _colorpicker(options);
            } else {
                options.cls = 'ke-menu-' + self.themeType;
                options.centerLineMode = false;
                self.menu = _menu(options);
            }
            return self.menu;
        },
        hideMenu: function () {
            this.menu.remove();
            this.menu = null;
            return this;
        },
        hideContextmenu: function () {
            this.contextmenu.remove();
            this.contextmenu = null;
            return this;
        },
        createDialog: function (options) {
            var self = this, name = options.name;
            options.z = self.options.zIndex;
            options.shadowMode = _undef(options.shadowMode, self.shadowMode);
            options.closeBtn = _undef(options.closeBtn, {
                name: self.lang('close'),
                click: function (e) {
                    self.hideDialog();
                    if (_IE && self.cmd) {
                        self.cmd.select();
                    }
                }
            });
            options.noBtn = _undef(options.noBtn, {
                name: self.lang(options.yesBtn ? 'no' : 'close'),
                click: function (e) {
                    self.hideDialog();
                    if (_IE && self.cmd) {
                        self.cmd.select();
                    }
                }
            });
            if (self.dialogAlignType != 'page') {
                options.alignEl = self.container;
            }
            options.cls = 'ke-dialog-' + self.themeType;
            if (self.dialogs.length > 0) {
                var firstDialog = self.dialogs[0], parentDialog = self.dialogs[self.dialogs.length - 1];
                firstDialog.setMaskIndex(parentDialog.z + 2);
                options.z = parentDialog.z + 3;
                options.showMask = false;
            }
            var dialog = _dialog(options);
            self.dialogs.push(dialog);
            return dialog;
        },
        hideDialog: function () {
            var self = this;
            if (self.dialogs.length > 0) {
                self.dialogs.pop().remove();
            }
            if (self.dialogs.length > 0) {
                var firstDialog = self.dialogs[0], parentDialog = self.dialogs[self.dialogs.length - 1];
                firstDialog.setMaskIndex(parentDialog.z - 1);
            }
            return self;
        },
        errorDialog: function (html) {
            var self = this;
            var dialog = self.createDialog({
                    width: 750,
                    title: self.lang('uploadError'),
                    body: '<div style="padding:10px 20px;"><iframe frameborder="0" style="width:708px;height:400px;"></iframe></div>'
                });
            var iframe = K('iframe', dialog.div), doc = K.iframeDoc(iframe);
            doc.open();
            doc.write(html);
            doc.close();
            K(doc.body).css('background-color', '#FFF');
            iframe[0].contentWindow.focus();
            return self;
        }
    };
    function _editor(options) {
        return new KEditor(options);
    }
    _instances = [];
    function _create(expr, options) {
        options = options || {};
        options.basePath = _undef(options.basePath, K.basePath);
        options.themesPath = _undef(options.themesPath, options.basePath + 'themes/');
        options.langPath = _undef(options.langPath, options.basePath + 'lang/');
        options.pluginsPath = _undef(options.pluginsPath, options.basePath + 'plugins/');
        if (_undef(options.loadStyleMode, K.options.loadStyleMode)) {
            var themeType = _undef(options.themeType, K.options.themeType);
            _loadStyle(options.themesPath + 'default/default.css');
            _loadStyle(options.themesPath + themeType + '/' + themeType + '.css');
        }
        function create(editor) {
            _each(_plugins, function (name, fn) {
                if (_isFunction(fn)) {
                    fn.call(editor, KindEditor);
                }
            });
            return editor.create();
        }
        var knode = K(expr);
        if (!knode || knode.length === 0) {
            return;
        }
        if (knode.length > 1) {
            knode.each(function () {
                _create(this, options);
            });
            return _instances[0];
        }
        options.srcElement = knode[0];
        var editor = new KEditor(options);
        _instances.push(editor);
        if (_language[editor.langType]) {
            return create(editor);
        }
        _loadScript(editor.langPath + editor.langType + '.js?ver=' + encodeURIComponent(K.DEBUG ? _TIME : _VERSION), function () {
            create(editor);
        });
        return editor;
    }
    function _eachEditor(expr, fn) {
        K(expr).each(function (i, el) {
            K.each(_instances, function (j, editor) {
                if (editor && editor.srcElement[0] == el) {
                    fn.call(editor, j);
                    return false;
                }
            });
        });
    }
    K.remove = function (expr) {
        _eachEditor(expr, function (i) {
            this.remove();
            _instances.splice(i, 1);
        });
    };
    K.sync = function (expr) {
        _eachEditor(expr, function () {
            this.sync();
        });
    };
    K.html = function (expr, val) {
        _eachEditor(expr, function () {
            this.html(val);
        });
    };
    K.insertHtml = function (expr, val) {
        _eachEditor(expr, function () {
            this.insertHtml(val);
        });
    };
    K.appendHtml = function (expr, val) {
        _eachEditor(expr, function () {
            this.appendHtml(val);
        });
    };
    if (_IE && _V < 7) {
        _nativeCommand(document, 'BackgroundImageCache', true);
    }
    K.EditorClass = KEditor;
    K.editor = _editor;
    K.create = _create;
    K.instances = _instances;
    K.plugin = _plugin;
    K.lang = _lang;
    _plugin('core', function (K) {
        var self = this, shortcutKeys = {
                undo: 'Z',
                redo: 'Y',
                bold: 'B',
                italic: 'I',
                underline: 'U',
                print: 'P',
                selectall: 'A'
            };
        self.afterSetHtml(function () {
            if (self.options.afterChange) {
                self.options.afterChange.call(self);
            }
        });
        self.afterCreate(function () {
            if (self.syncType != 'form') {
                return;
            }
            var el = K(self.srcElement), hasForm = false;
            while (el = el.parent()) {
                if (el.name == 'form') {
                    hasForm = true;
                    break;
                }
            }
            if (hasForm) {
                el.bind('submit', function (e) {
                    self.sync();
                    K(window).bind('unload', function () {
                        self.edit.textarea.remove();
                    });
                });
                var resetBtn = K('[type="reset"]', el);
                resetBtn.click(function () {
                    self.html(self.initContent);
                    self.cmd.selection();
                });
                self.beforeRemove(function () {
                    el.unbind();
                    resetBtn.unbind();
                });
            }
        });
        self.clickToolbar('source', function () {
            if (self.edit.designMode) {
                self.toolbar.disableAll(true);
                self.edit.design(false);
                self.toolbar.select('source');
            } else {
                self.toolbar.disableAll(false);
                self.edit.design(true);
                self.toolbar.unselect('source');
                if (_GECKO) {
                    setTimeout(function () {
                        self.cmd.selection();
                    }, 0);
                } else {
                    self.cmd.selection();
                }
            }
            self.designMode = self.edit.designMode;
        });
        self.afterCreate(function () {
            if (!self.designMode) {
                self.toolbar.disableAll(true).select('source');
            }
        });
        self.clickToolbar('fullscreen', function () {
            self.fullscreen();
        });
        if (self.fullscreenShortcut) {
            var loaded = false;
            self.afterCreate(function () {
                K(self.edit.doc, self.edit.textarea).keyup(function (e) {
                    if (e.which == 27) {
                        setTimeout(function () {
                            self.fullscreen();
                        }, 0);
                    }
                });
                if (loaded) {
                    if (_IE && !self.designMode) {
                        return;
                    }
                    self.focus();
                }
                if (!loaded) {
                    loaded = true;
                }
            });
        }
        _each('undo,redo'.split(','), function (i, name) {
            if (shortcutKeys[name]) {
                self.afterCreate(function () {
                    _ctrl(this.edit.doc, shortcutKeys[name], function () {
                        self.clickToolbar(name);
                    });
                });
            }
            self.clickToolbar(name, function () {
                self[name]();
            });
        });
        self.clickToolbar('formatblock', function () {
            var blocks = self.lang('formatblock.formatBlock'), heights = {
                    h1: 28,
                    h2: 24,
                    h3: 18,
                    H4: 14,
                    p: 12
                }, curVal = self.cmd.val('formatblock'), menu = self.createMenu({
                    name: 'formatblock',
                    width: self.langType == 'en' ? 200 : 150
                });
            _each(blocks, function (key, val) {
                var style = 'font-size:' + heights[key] + 'px;';
                if (key.charAt(0) === 'h') {
                    style += 'font-weight:bold;';
                }
                menu.addItem({
                    title: '<span style="' + style + '" unselectable="on">' + val + '</span>',
                    height: heights[key] + 12,
                    checked: curVal === key || curVal === val,
                    click: function () {
                        self.select().exec('formatblock', '<' + key + '>').hideMenu();
                    }
                });
            });
        });
        self.clickToolbar('fontname', function () {
            var curVal = self.cmd.val('fontname'), menu = self.createMenu({
                    name: 'fontname',
                    width: 150
                });
            _each(self.lang('fontname.fontName'), function (key, val) {
                menu.addItem({
                    title: '<span style="font-family: ' + key + ';" unselectable="on">' + val + '</span>',
                    checked: curVal === key.toLowerCase() || curVal === val.toLowerCase(),
                    click: function () {
                        self.exec('fontname', key).hideMenu();
                    }
                });
            });
        });
        self.clickToolbar('fontsize', function () {
            var curVal = self.cmd.val('fontsize'), menu = self.createMenu({
                    name: 'fontsize',
                    width: 150
                });
            _each(self.fontSizeTable, function (i, val) {
                menu.addItem({
                    title: '<span style="font-size:' + val + ';" unselectable="on">' + val + '</span>',
                    height: _removeUnit(val) + 12,
                    checked: curVal === val,
                    click: function () {
                        self.exec('fontsize', val).hideMenu();
                    }
                });
            });
        });
        _each('forecolor,hilitecolor'.split(','), function (i, name) {
            self.clickToolbar(name, function () {
                self.createMenu({
                    name: name,
                    selectedColor: self.cmd.val(name) || 'default',
                    colors: self.colorTable,
                    click: function (color) {
                        self.exec(name, color).hideMenu();
                    }
                });
            });
        });
        _each('cut,copy,paste'.split(','), function (i, name) {
            self.clickToolbar(name, function () {
                self.focus();
                try {
                    self.exec(name, null);
                } catch (e) {
                    alert(self.lang(name + 'Error'));
                }
            });
        });
        self.clickToolbar('about', function () {
            var html = '<div style="margin:20px;">' + '<div>KindEditor ' + _VERSION + '</div>' + '<div>Copyright &copy; <a href="http://www.kindsoft.net/" target="_blank">kindsoft.net</a> All rights reserved.</div>' + '</div>';
            self.createDialog({
                name: 'about',
                width: 350,
                title: self.lang('about'),
                body: html
            });
        });
        self.plugin.getSelectedLink = function () {
            return self.cmd.commonAncestor('a');
        };
        self.plugin.getSelectedImage = function () {
            return _getImageFromRange(self.edit.cmd.range, function (img) {
                return !/^ke-\w+$/i.test(img[0].className);
            });
        };
        self.plugin.getSelectedFlash = function () {
            return _getImageFromRange(self.edit.cmd.range, function (img) {
                return img[0].className == 'ke-flash';
            });
        };
        self.plugin.getSelectedMedia = function () {
            return _getImageFromRange(self.edit.cmd.range, function (img) {
                return img[0].className == 'ke-media' || img[0].className == 'ke-rm';
            });
        };
        self.plugin.getSelectedAnchor = function () {
            return _getImageFromRange(self.edit.cmd.range, function (img) {
                return img[0].className == 'ke-anchor';
            });
        };
        _each('link,image,flash,media,anchor'.split(','), function (i, name) {
            var uName = name.charAt(0).toUpperCase() + name.substr(1);
            _each('edit,delete'.split(','), function (j, val) {
                self.addContextmenu({
                    title: self.lang(val + uName),
                    click: function () {
                        self.loadPlugin(name, function () {
                            self.plugin[name][val]();
                            self.hideMenu();
                        });
                    },
                    cond: self.plugin['getSelected' + uName],
                    width: 150,
                    iconClass: val == 'edit' ? 'ke-icon-' + name : undefined
                });
            });
            self.addContextmenu({ title: '-' });
        });
        self.plugin.getSelectedTable = function () {
            return self.cmd.commonAncestor('table');
        };
        self.plugin.getSelectedRow = function () {
            return self.cmd.commonAncestor('tr');
        };
        self.plugin.getSelectedCell = function () {
            return self.cmd.commonAncestor('td');
        };
        _each(('prop,cellprop,colinsertleft,colinsertright,rowinsertabove,rowinsertbelow,rowmerge,colmerge,' + 'rowsplit,colsplit,coldelete,rowdelete,insert,delete').split(','), function (i, val) {
            var cond = _inArray(val, [
                    'prop',
                    'delete'
                ]) < 0 ? self.plugin.getSelectedCell : self.plugin.getSelectedTable;
            self.addContextmenu({
                title: self.lang('table' + val),
                click: function () {
                    self.loadPlugin('table', function () {
                        self.plugin.table[val]();
                        self.hideMenu();
                    });
                },
                cond: cond,
                width: 170,
                iconClass: 'ke-icon-table' + val
            });
        });
        self.addContextmenu({ title: '-' });
        _each(('selectall,justifyleft,justifycenter,justifyright,justifyfull,insertorderedlist,' + 'insertunorderedlist,indent,outdent,subscript,superscript,hr,print,' + 'bold,italic,underline,strikethrough,removeformat,unlink').split(','), function (i, name) {
            if (shortcutKeys[name]) {
                self.afterCreate(function () {
                    _ctrl(this.edit.doc, shortcutKeys[name], function () {
                        self.cmd.selection();
                        self.clickToolbar(name);
                    });
                });
            }
            self.clickToolbar(name, function () {
                self.focus().exec(name, null);
            });
        });
        self.afterCreate(function () {
            var doc = self.edit.doc, cmd, bookmark, div, cls = '__kindeditor_paste__', pasting = false;
            function movePastedData() {
                cmd.range.moveToBookmark(bookmark);
                cmd.select();
                if (_WEBKIT) {
                    K('div.' + cls, div).each(function () {
                        K(this).after('<br />').remove(true);
                    });
                    K('span.Apple-style-span', div).remove(true);
                    K('span.Apple-tab-span', div).remove(true);
                    K('span[style]', div).each(function () {
                        if (K(this).css('white-space') == 'nowrap') {
                            K(this).remove(true);
                        }
                    });
                    K('meta', div).remove();
                }
                var html = div[0].innerHTML;
                div.remove();
                if (html === '') {
                    return;
                }
                if (_WEBKIT) {
                    html = html.replace(/(<br>)\1/gi, '$1');
                }
                if (self.pasteType === 2) {
                    html = html.replace(/(<(?:p|p\s[^>]*)>) *(<\/p>)/gi, '');
                    if (/schemas-microsoft-com|worddocument|mso-\w+/i.test(html)) {
                        html = _clearMsWord(html, self.filterMode ? self.htmlTags : K.options.htmlTags);
                    } else {
                        html = _formatHtml(html, self.filterMode ? self.htmlTags : null);
                        html = self.beforeSetHtml(html);
                    }
                }
                if (self.pasteType === 1) {
                    html = html.replace(/&nbsp;/gi, ' ');
                    html = html.replace(/\n\s*\n/g, '\n');
                    html = html.replace(/<br[^>]*>/gi, '\n');
                    html = html.replace(/<\/p><p[^>]*>/gi, '\n');
                    html = html.replace(/<[^>]+>/g, '');
                    html = html.replace(/ {2}/g, ' &nbsp;');
                    if (self.newlineTag == 'p') {
                        if (/\n/.test(html)) {
                            html = html.replace(/^/, '<p>').replace(/$/, '<br /></p>').replace(/\n/g, '<br /></p><p>');
                        }
                    } else {
                        html = html.replace(/\n/g, '<br />$&');
                    }
                }
                self.insertHtml(html, true);
            }
            K(doc.body).bind('paste', function (e) {
                if (self.pasteType === 0) {
                    e.stop();
                    return;
                }
                if (pasting) {
                    return;
                }
                pasting = true;
                K('div.' + cls, doc).remove();
                cmd = self.cmd.selection();
                bookmark = cmd.range.createBookmark();
                div = K('<div class="' + cls + '"></div>', doc).css({
                    position: 'absolute',
                    width: '1px',
                    height: '1px',
                    overflow: 'hidden',
                    left: '-1981px',
                    top: K(bookmark.start).pos().y + 'px',
                    'white-space': 'nowrap'
                });
                K(doc.body).append(div);
                if (_IE) {
                    var rng = cmd.range.get(true);
                    rng.moveToElementText(div[0]);
                    rng.select();
                    rng.execCommand('paste');
                    e.preventDefault();
                } else {
                    cmd.range.selectNodeContents(div[0]);
                    cmd.select();
                }
                setTimeout(function () {
                    movePastedData();
                    pasting = false;
                }, 0);
            });
        });
        self.beforeGetHtml(function (html) {
            if (_IE && _V <= 8) {
                html = html.replace(/<div\s+[^>]*data-ke-input-tag="([^"]*)"[^>]*>([\s\S]*?)<\/div>/gi, function (full, tag) {
                    return unescape(tag);
                });
                html = html.replace(/(<input)((?:\s+[^>]*)?>)/gi, function ($0, $1, $2) {
                    if (!/\s+type="[^"]+"/i.test($0)) {
                        return $1 + ' type="text"' + $2;
                    }
                    return $0;
                });
            }
            return html.replace(/(<(?:noscript|noscript\s[^>]*)>)([\s\S]*?)(<\/noscript>)/gi, function ($0, $1, $2, $3) {
                return $1 + _unescape($2).replace(/\s+/g, ' ') + $3;
            }).replace(/<img[^>]*class="?ke-(flash|rm|media)"?[^>]*>/gi, function (full) {
                var imgAttrs = _getAttrList(full);
                var styles = _getCssList(imgAttrs.style || '');
                var attrs = _mediaAttrs(imgAttrs['data-ke-tag']);
                var width = _undef(styles.width, '');
                var height = _undef(styles.height, '');
                if (/px/i.test(width)) {
                    width = _removeUnit(width);
                }
                if (/px/i.test(height)) {
                    height = _removeUnit(height);
                }
                attrs.width = _undef(imgAttrs.width, width);
                attrs.height = _undef(imgAttrs.height, height);
                return _mediaEmbed(attrs);
            }).replace(/<img[^>]*class="?ke-anchor"?[^>]*>/gi, function (full) {
                var imgAttrs = _getAttrList(full);
                return '<a name="' + unescape(imgAttrs['data-ke-name']) + '"></a>';
            }).replace(/<div\s+[^>]*data-ke-script-attr="([^"]*)"[^>]*>([\s\S]*?)<\/div>/gi, function (full, attr, code) {
                return '<script' + unescape(attr) + '>' + unescape(code) + '</script>';
            }).replace(/<div\s+[^>]*data-ke-noscript-attr="([^"]*)"[^>]*>([\s\S]*?)<\/div>/gi, function (full, attr, code) {
                return '<noscript' + unescape(attr) + '>' + unescape(code) + '</noscript>';
            }).replace(/(<[^>]*)data-ke-src="([^"]*)"([^>]*>)/gi, function (full, start, src, end) {
                full = full.replace(/(\s+(?:href|src)=")[^"]*(")/i, function ($0, $1, $2) {
                    return $1 + _unescape(src) + $2;
                });
                full = full.replace(/\s+data-ke-src="[^"]*"/i, '');
                return full;
            }).replace(/(<[^>]+\s)data-ke-(on\w+="[^"]*"[^>]*>)/gi, function (full, start, end) {
                return start + end;
            });
        });
        self.beforeSetHtml(function (html) {
            if (_IE && _V <= 8) {
                html = html.replace(/<input[^>]*>|<(select|button)[^>]*>[\s\S]*?<\/\1>/gi, function (full) {
                    var attrs = _getAttrList(full);
                    var styles = _getCssList(attrs.style || '');
                    if (styles.display == 'none') {
                        return '<div class="ke-display-none" data-ke-input-tag="' + escape(full) + '"></div>';
                    }
                    return full;
                });
            }
            return html.replace(/<embed[^>]*type="([^"]+)"[^>]*>(?:<\/embed>)?/gi, function (full) {
                var attrs = _getAttrList(full);
                attrs.src = _undef(attrs.src, '');
                attrs.width = _undef(attrs.width, 0);
                attrs.height = _undef(attrs.height, 0);
                return _mediaImg(self.themesPath + 'common/blank.gif', attrs);
            }).replace(/<a[^>]*name="([^"]+)"[^>]*>(?:<\/a>)?/gi, function (full) {
                var attrs = _getAttrList(full);
                if (attrs.href !== undefined) {
                    return full;
                }
                return '<img class="ke-anchor" src="' + self.themesPath + 'common/anchor.gif" data-ke-name="' + escape(attrs.name) + '" />';
            }).replace(/<script([^>]*)>([\s\S]*?)<\/script>/gi, function (full, attr, code) {
                return '<div class="ke-script" data-ke-script-attr="' + escape(attr) + '">' + escape(code) + '</div>';
            }).replace(/<noscript([^>]*)>([\s\S]*?)<\/noscript>/gi, function (full, attr, code) {
                return '<div class="ke-noscript" data-ke-noscript-attr="' + escape(attr) + '">' + escape(code) + '</div>';
            }).replace(/(<[^>]*)(href|src)="([^"]*)"([^>]*>)/gi, function (full, start, key, src, end) {
                if (full.match(/\sdata-ke-src="[^"]*"/i)) {
                    return full;
                }
                full = start + key + '="' + src + '"' + ' data-ke-src="' + _escape(src) + '"' + end;
                return full;
            }).replace(/(<[^>]+\s)(on\w+="[^"]*"[^>]*>)/gi, function (full, start, end) {
                return start + 'data-ke-' + end;
            }).replace(/<table[^>]*\s+border="0"[^>]*>/gi, function (full) {
                if (full.indexOf('ke-zeroborder') >= 0) {
                    return full;
                }
                return _addClassToTag(full, 'ke-zeroborder');
            });
        });
    });
    return K;
}
)();
},{}],30:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
tpl = innerRequire("../draggable/avalon.draggable");

module.exports = (
function () {
    var widgetName = 'layout';
    var ewcNoTopBorder = '(northRegion.inLayoutFlow&&!northRegion.resizable)',
        // 判断East, West, Centre区域是否有上边框的条件语句
        ewcNoBottomBorder = '(southRegion.inLayoutFlow&&!southRegion.resizable)',
        // 判断East, West, Centre区域是否有下边框的条件语句
        centreNoLeftBorder = '(westRegion.inLayoutFlow && !westRegion.resizable)', centreNoRightBorder = '(eastRegion.inLayoutFlow && !eastRegion.resizable)', northResizerHeight = '(northRegion.inLayoutFlow && northRegion.resizable ? resizerSize : 0)',
        // North区域高度的计算表达式
        southResizerHeight = '(southRegion.inLayoutFlow && southRegion.resizable ? resizerSize : 0)',
        // South区域高度的计算表达式
        westResizerWidth = '(westRegion.inLayoutFlow && westRegion.resizable ? resizerSize : 0)',
        // West区域宽度的计算表达式
        eastResizerWidth = '(eastRegion.inLayoutFlow && eastRegion.resizable ? resizerSize : 0)',
        // East区域宽度的计算表达式
        ewcResizerHeight = [
            '(layoutHeight - northRegion.realSize - southRegion.realSize)',
            northResizerHeight,
            southResizerHeight
        ].join('-'),
        // East, West, Centre三个区域的包含border-width的高度的表达式。最终应用到区域上时需要减除各个区域的border-with
        ewcRegionHeigth = [
            ewcResizerHeight,
            [
                '(',
                ewcNoTopBorder,
                '?0:regionBorderWidth)'
            ].join(''),
            [
                '(',
                ewcNoBottomBorder,
                '?0:regionBorderWidth)'
            ].join('')
        ].join('-'), ewcRegionTop = [
            'layoutTop+northRegion.realSize+',
            northResizerHeight
        ].join(''),
        // East, West, Centre三个区域Top的表达式。
        docks = {
            'north': {
                attrBindings: {
                    'ms-css-width': 'layoutWidth - (isSubLayout?0:regionBorderWidth*2)',
                    'ms-css-height': 'northRegion.realSize - (isSubLayout?regionBorderWidth:regionBorderWidth*2)',
                    'ms-css-top': 'layoutTop',
                    'ms-css-left': 'layoutLeft',
                    'ms-css-border-style': 'isSubLayout?\'none none solid none\':\'solid\'',
                    'ms-css-border-width': 'regionBorderWidth'
                },
                resizerConfig: {
                    'data-draggable-axis': 'y',
                    'ms-css-width': 'layoutWidth',
                    'ms-css-height': 'resizerSize',
                    'ms-css-top': 'layoutTop+northRegion.realSize',
                    'ms-css-left': 'layoutLeft'
                },
                resizerManageProperty: {
                    plusLocation: true,
                    eventDataDirection: 'Y',
                    getContainment: function (vmodel) {
                        var $offset = vmodel.$element.offset();
                        return [
                            0,
                            $offset.top + vmodel.regionBorderWidth * 2,
                            0,
                            $offset.top + vmodel.layoutHeight - vmodel.southRegion.realSize - vmodel.resizerSize * 2 - vmodel.regionBorderWidth * 2
                        ];
                    }
                }
            },
            'south': {
                attrBindings: {
                    'ms-css-width': 'layoutWidth - (isSubLayout?0:regionBorderWidth*2)',
                    'ms-css-height': 'southRegion.realSize - (isSubLayout?regionBorderWidth:regionBorderWidth*2)',
                    'ms-css-top': 'layoutTop+layoutHeight-southRegion.realSize',
                    'ms-css-left': 'layoutLeft',
                    'ms-css-border-style': 'isSubLayout?\'solid none none none\':\'solid\'',
                    'ms-css-border-width': 'regionBorderWidth'
                },
                resizerConfig: {
                    'data-draggable-axis': 'y',
                    'ms-css-width': 'layoutWidth',
                    'ms-css-height': 'resizerSize',
                    'ms-css-top': 'layoutTop+layoutHeight-southRegion.realSize-resizerSize',
                    'ms-css-left': 'layoutLeft'
                },
                resizerManageProperty: {
                    plusLocation: false,
                    eventDataDirection: 'Y',
                    getContainment: function (vmodel) {
                        var $offset = vmodel.$element.offset();
                        return [
                            0,
                            $offset.top + vmodel.northRegion.realSize + vmodel.regionBorderWidth * 2 + vmodel.resizerSize,
                            0,
                            $offset.top + vmodel.layoutHeight - vmodel.resizerSize
                        ];
                    }
                }
            },
            'east': {
                attrBindings: {
                    'ms-css-width': 'eastRegion.realSize-(isSubLayout?regionBorderWidth:regionBorderWidth*2)',
                    'ms-css-height': ewcRegionHeigth,
                    'ms-css-top': ewcRegionTop,
                    'ms-css-left': 'layoutLeft + layoutWidth - eastRegion.realSize',
                    'ms-css-border-top-style': [
                        ewcNoTopBorder,
                        '?\'none\':\'solid\''
                    ].join(''),
                    'ms-css-border-bottom-style': [
                        ewcNoBottomBorder,
                        '?\'none\':\'solid\''
                    ].join(''),
                    'ms-css-border-left-style': '\'solid\'',
                    'ms-css-border-right-style': 'isSubLayout?\'none\':\'solid\'',
                    'ms-css-border-width': 'regionBorderWidth'
                },
                resizerConfig: {
                    'data-draggable-axis': 'x',
                    'ms-css-width': 'resizerSize',
                    'ms-css-top': ewcRegionTop,
                    'ms-css-left': 'layoutLeft+layoutWidth-eastRegion.realSize-resizerSize',
                    'ms-css-height': ewcResizerHeight
                },
                resizerManageProperty: {
                    plusLocation: false,
                    eventDataDirection: 'X',
                    getContainment: function (vmodel) {
                        var $offset = vmodel.$element.offset();
                        return [
                            $offset.left + vmodel.westRegion.realSize + vmodel.regionBorderWidth * 2 + vmodel.resizerSize,
                            0,
                            $offset.left + vmodel.layoutWidth - vmodel.resizerSize - vmodel.regionBorderWidth * 2,
                            0
                        ];
                    }
                }
            },
            'west': {
                attrBindings: {
                    'ms-css-width': 'westRegion.realSize - (isSubLayout?regionBorderWidth:regionBorderWidth*2)',
                    'ms-css-height': ewcRegionHeigth,
                    'ms-css-top': ewcRegionTop,
                    'ms-css-left': 'layoutLeft',
                    'ms-css-border-top-style': [
                        ewcNoTopBorder,
                        '?\'none\':\'solid\''
                    ].join(''),
                    'ms-css-border-bottom-style': [
                        ewcNoBottomBorder,
                        '?\'none\':\'solid\''
                    ].join(''),
                    'ms-css-border-left-style': 'isSubLayout?\'none\':\'solid\'',
                    'ms-css-border-right-style': '\'solid\'',
                    'ms-css-border-width': 'regionBorderWidth'
                },
                resizerConfig: {
                    'data-draggable-axis': 'x',
                    'ms-css-width': 'resizerSize',
                    'ms-css-height': ewcResizerHeight,
                    'ms-css-top': ewcRegionTop,
                    'ms-css-left': 'layoutLeft+westRegion.realSize'
                },
                resizerManageProperty: {
                    plusLocation: true,
                    eventDataDirection: 'X',
                    getContainment: function (vmodel) {
                        var $offset = vmodel.$element.offset();
                        return [
                            $offset.left + vmodel.regionBorderWidth + vmodel.regionBorderWidth * 2,
                            0,
                            $offset.left + vmodel.layoutWidth - vmodel.eastRegion.realSize - vmodel.regionBorderWidth * 2 - vmodel.resizerSize * 2,
                            0
                        ];
                    }
                }
            },
            'centre': {
                attrBindings: {
                    'ms-css-width': [
                        'layoutWidth-eastRegion.realSize-westRegion.realSize',
                        westResizerWidth,
                        eastResizerWidth,
                        [
                            '(',
                            centreNoLeftBorder,
                            '?0:regionBorderWidth)'
                        ].join(''),
                        [
                            '(',
                            centreNoRightBorder,
                            '?0:regionBorderWidth)'
                        ].join('')
                    ].join('-'),
                    'ms-css-height': ewcRegionHeigth,
                    'ms-css-top': ewcRegionTop,
                    'ms-css-left': 'layoutLeft+westRegion.realSize+' + westResizerWidth,
                    'ms-css-border-top-style': [
                        ewcNoTopBorder,
                        '?\'none\':\'solid\''
                    ].join(''),
                    'ms-css-border-bottom-style': [
                        ewcNoBottomBorder,
                        '?\'none\':\'solid\''
                    ].join(''),
                    'ms-css-border-left-style': centreNoLeftBorder + '?\'none\':\'solid\'',
                    'ms-css-border-right-style': centreNoRightBorder + '?\'none\':\'solid\'',
                    'ms-css-border-width': 'regionBorderWidth'
                }
            }
        };
    var widget = avalon.ui[widgetName] = function (element, data, vmodels) {
            var options = data[widgetName + 'Options'], $element = avalon(element);
            var domCreator = document.createElement('div');
            var vmodel = avalon.define(data[widgetName + 'Id'], function (vm) {
                    vm.$dockedAreas = {};
                    // 存放5个区域的$(element)的字典
                    vm.$resizers = {};
                    // 存放4个resizer的字典
                    vm.$nestedLayouts = [];
                    avalon.mix(true, vm, {
                        centreRegion: {
                            inLayoutFlow: true,
                            isNested: false
                        },
                        westRegion: {
                            resizable: false,
                            size: 0,
                            regionClass: '',
                            inLayoutFlow: false,
                            isNested: false,
                            realSize: 0
                        },
                        eastRegion: {
                            resizable: false,
                            size: 0,
                            regionClass: '',
                            inLayoutFlow: false,
                            isNested: false,
                            realSize: 0
                        },
                        southRegion: {
                            resizable: false,
                            size: 0,
                            regionClass: '',
                            inLayoutFlow: false,
                            isNested: false,
                            realSize: 0
                        },
                        northRegion: {
                            resizable: false,
                            size: 0,
                            regionClass: '',
                            inLayoutFlow: false,
                            isNested: false,
                            realSize: 0
                        }
                    }, options);
                    vm.$init = function () {
                        if (vmodel.parentLayoutId != '' && !!avalon.vmodels[vmodel.parentLayoutId]) {
                            avalon.vmodels[vmodel.parentLayoutId].$registNestedLayout(vmodel);
                        }
                        if (vmodel.stretchMax) {
                            vmodel.layoutWidth = avalon(element.parentNode).width();
                            vmodel.layoutHeight = avalon(element.parentNode).height();
                        }
                        $element.addClass('oni-layout');
                        $element.attr('ms-css-width', 'layoutWidth');
                        $element.attr('ms-css-height', 'layoutHeight');
                        // 
                        var childNodesDictionary = {};
                        // 临时存放Region DOM的字典
                        for (var i = 0; i < element.children.length; i++) {
                            var $node = avalon(element.children[i]), dockTo = $node.attr('ms-layout-dock');
                            if (docks.hasOwnProperty(dockTo)) {
                                $node.element.removeAttribute('ms-layout-dock');
                                childNodesDictionary[dockTo] = $node;
                            }
                        }
                        [
                            'northRegion',
                            'westRegion',
                            'eastRegion',
                            'southRegion',
                            'centreRegion'
                        ].forEach(function (region) {
                            var resizable = false, size;
                            // Size是必须定义的属性，否则不计算入layout
                            if (options.hasOwnProperty(region) && options[region].hasOwnProperty('size')) {
                                vm[region].inLayoutFlow = true;
                            }
                            if (vm[region].inLayoutFlow) {
                                resizable = vm[region].resizable;
                                size = vm[region].size;
                                var regionName = region.replace('Region', '');
                                // 从childNodesDictionary中寻找region的DOM节点。如果没有，创建一个新DIV。
                                if (!childNodesDictionary[regionName]) {
                                    domCreator.innerHTML = '<div></div>';
                                    var regionNode = domCreator.childNodes[0];
                                    element.appendChild(regionNode);
                                    vm.$dockedAreas[regionName] = avalon(regionNode);
                                    domCreator.innerHTML = '';
                                } else {
                                    vm.$dockedAreas[regionName] = childNodesDictionary[regionName];
                                }
                                vm.updateRealSize(vm, vm[region], region);
                                vm.$dockedAreas[regionName].addClass(vm[region].regionClass);
                                // if (regionName != "centre") {
                                //     $element.addClass(regionName + "-region-" + (resizable? "resizable" : "unresizable"));
                                // }
                                vm.$bindRegionNode(regionName, vm.$dockedAreas[regionName].element, resizable);
                            }
                        });
                        childNodesDictionary = null;
                        vmodels = [vm].concat(vmodels);
                        avalon.scan(element, vmodels);
                        if (typeof vmodel.onInit === 'function') {
                            vmodel.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.draggable = {
                        startFn: function (e, data) {
                            for (var side in vmodel.$resizers) {
                                if (vmodel.$resizers.hasOwnProperty(side) && vmodel.$resizers[side].element == data.element) {
                                    data.containment = docks[side].resizerManageProperty.getContainment(vmodel);
                                    break;
                                }
                            }
                        },
                        stopFn: function (e, data) {
                            for (var side in vmodel.$resizers) {
                                if (vmodel.$resizers.hasOwnProperty(side) && vmodel.$resizers[side].element == data.element) {
                                    var plusLocation = docks[side].resizerManageProperty.plusLocation, eventDataDirection = docks[side].resizerManageProperty.eventDataDirection, callback = vmodel[side + 'Region'].afterResize || vmodel.afterResize, beforeSize = vmodel[side + 'Region'].realSize, afterSize = beforeSize + (data['page' + eventDataDirection] - data['startPage' + eventDataDirection]) * (plusLocation ? 1 : -1);
                                    if (beforeSize != afterSize) {
                                        vmodel[side + 'Region'].size = vmodel[side + 'Region'].realSize = afterSize;
                                        if (typeof callback == 'function') {
                                            callback.call(element, side, beforeSize, afterSize);
                                        }
                                    }
                                    break;
                                }
                            }
                            vmodel.$updateNestedLayouts();
                        }
                    };
                    vm.$remove = function () {
                        if (vmodel.parentLayoutId != '' && !!avalon.vmodels[vmodel.parentLayoutId]) {
                            avalon.vmodels[vmodel.parentLayoutId].$unregistNestedLayout(vmodel);
                        }
                        vmodel.$nestedLayouts = null;
                        vmodel.$element = $element = null;
                        element.innerHTML = element.textContent = '';
                        vmodel.$dockedAreas = null;
                        vmodel.$resizers = null;
                        domCreator = null;
                    };
                    vm.$updateNestedLayouts = function () {
                        vmodel.$nestedLayouts.forEach(function (nestedVM) {
                            nestedVM.updateLayoutSize(nestedVM);
                        });
                    };
                    // 绑定区域DOM元素的宽高等css属性；如果该区域的尺寸可变，创建一个Draggable Div来接收Drag事件
                    vm.$bindRegionNode = function (region, domNode, resizable) {
                        var $node = avalon(domNode);
                        if (docks.hasOwnProperty(region)) {
                            $node.addClass('oni-layout-' + region + '-region oni-layout-region');
                            vmodel.$dockedAreas[region] = $node;
                            for (var n in docks[region].attrBindings) {
                                $node.attr(n, docks[region].attrBindings[n]);
                            }
                            // 检测是否有Nested的Layout，如果有，需要为Nested的Layout指定父级Layout的Id和Region
                            for (var i = 0; i < domNode.children.length; i++) {
                                var childNode = domNode.children[i], childWidgetName = childNode.getAttribute('ms-widget');
                                childWidgetName = typeof childWidgetName == 'string' ? childWidgetName.split(',')[0] : '';
                                if (childWidgetName == 'layout') {
                                    avalon(childNode).attr('data-layout-parent-layout-id', vmodel.$id);
                                    avalon(childNode).attr('data-layout-parent-layout-region', region);
                                }
                            }
                        }
                        // 创建Resizer并增加Top, Left, Width, Height的绑定
                        if (region != 'centre' && resizable) {
                            var draggableConfig = docks[region].resizerConfig, resizer = null, $resizer = null;
                            domCreator.innerHTML = '<div ms-draggable ms-controller="' + vmodel.$id + '" data-draggable-ghosting="true" data-draggable-start="startFn" data-draggable-stop="stopFn"></div>';
                            resizer = domCreator.childNodes[0];
                            $resizer = avalon(resizer);
                            $resizer.addClass('oni-layout-' + region + '-resizer oni-layout-resizer');
                            for (var n in draggableConfig) {
                                if (draggableConfig.hasOwnProperty(n)) {
                                    $resizer.attr(n, draggableConfig[n]);
                                }
                            }
                            vmodel.$resizers[region] = $resizer;
                            element.appendChild(resizer);
                        }
                    };
                    vm.$registNestedLayout = function (nestedVM) {
                        vm.$dockedAreas[nestedVM.parentLayoutRegion].addClass('oni-layout-nested-region');
                        avalon.Array.ensure(vm.$nestedLayouts, nestedVM);
                        nestedVM.isSubLayout = true;
                        vm[nestedVM.parentLayoutRegion + 'Region'].isNested = true;
                    };
                    vm.$unregistNestedLayout = function (nestedVM) {
                        vm.$dockedAreas[nestedVM.parentLayoutRegion].removeClass('oni-layout-nested-region');
                        avalon.Array.remove(vm.$nestedLayouts, nestedVM);
                        nestedVM.isSubLayout = false;
                        vm[nestedVM.parentLayoutRegion + 'Region'].isNested = false;
                    };
                    vm.$element = $element;
                    vm.isSubLayout = false;
                    // var borderGetFn = function () { return this.regionBorderWidth; };
                    // var emptySetFn = function() { return; };
                    // vm.northRegionTopBorderWidth = vm.northRegionBottomBorderWidth = {
                    //     get: function () {
                    //         if (vmodel.parentLayoutId!="" && !!avalon.p[vmodel.parentLayoutId]) {
                    //             var parentLayoutVM = avalon.vmodels[vmodel.parentLayoutId];
                    //             if (parentLayoutVM.northRegion.resizable && parentLayoutVM.regionBorderWidth > 0) {
                    //                 return 0;
                    //             } else {
                    //                 return this.regionBorderWidth;
                    //             }
                    //         } else {
                    //             return this.regionBorderWidth;
                    //         }
                    //     },
                    //     set: emptySetFn
                    // };
                    // vm.parentLayoutId = undefined;
                    // vm.parentLayoutRegion = undefined; // 如果当前VM是某个Layout的SubLayout，这个变量表示当前VM在父级Layout中所在区域。
                    vm.$isLayoutVM = true;
                    vm.$skipArray = [
                        'draggable',
                        'parentLayoutId',
                        'parentLayoutRegion'
                    ];
                });
            return vmodel;
        };
    widget.defaults = {
        layoutTop: 0,
        layoutLeft: 0,
        parentLayoutRegion: '',
        parentLayoutId: '',
        stretchMax: true,
        //@config Layout的元素是否填充满父级DOM。此参数为true时，layoutWidth和layoutHeight不参与计算
        layoutWidth: 0,
        //@config Layout组件的整体宽度。stretchMax为true时，此参数不参与计算
        layoutHeight: 0,
        //@config Layout组件的整体高度。stretchMax为true时，此参数不参与计算
        regionBorderWidth: 1,
        //@config 区域的边框的宽度
        resizerSize: 5,
        //@config 区域的拖放元素的尺
        eastRegion: {},
        //@config {Object} 东区配置对象。参看region对象
        southRegion: {},
        //@config {Object} 南区配置对象。参看region对象
        westRegion: {},
        //@config {Object} 西区配置对象。参看region对象
        northRegion: {},
        //@config {Object} 北区配置对象。参看region对象
        centreRegion: {},
        //@config {Object} 中区配置对象。参看region对象
        /**
             * @config {Function} 删除一个Region并将DOM移出文档
             * @param opts {Object} vmodel
             * @param region {Object} east, south, west或者north。centre区域不可移除。
             */
        removeRegion: function (opts, region) {
            if (region != 'centre' && docks.hasOwnProperty(region) && !!opts.$dockedAreas[region]) {
                var callback = opts[region + 'Region'].afterRemove || opts.afterRemove, element = opts.$element.element;
                element.removeChild(opts.$dockedAreas[region].element);
                if (opts[region + 'Region'].resizable) {
                    element.removeChild(opts.$resizers[region].element);
                    delete opts.$resizers[region];
                }
                delete opts.$dockedAreas[region];
                opts[region + 'Region'].size = 0;
                opts[region + 'Region'].realSize = 0;
                opts[region + 'Region'].inLayoutFlow = false;
                opts[region + 'Region'].resizable = false;
                if (typeof callback == 'function') {
                    callback.call(element, region);
                }
            }
            opts.$updateNestedLayouts();
        },
        /**
             * @config {Function} 新增一个不存在的区域
             * @param opts {Object} vmodel
             * @param region {Object} east, south, west或者north。
             * @param cfg {Object} 区域配置对象。参看region配置
             */
        addRegion: function (opts, region, cfg) {
            // 检查Region名称和是否已经有同名Region。名称必须是south, east, north或者west. 
            if (!docks.hasOwnProperty(region) || !!opts.$dockedAreas[region])
                return;
            var callback = opts.afterAdd, element = opts.$element.element;
            if (region != 'centre' && cfg.hasOwnProperty('size')) {
                // 更新VM中的尺寸和Resizable属性
                opts[region + 'Region'].size = cfg.size;
                opts[region + 'Region'].inLayoutFlow = true;
                opts[region + 'Region'].resizable = cfg.resizable;
                opts.updateRealSize(opts, opts[region + 'Region'], region + 'Region');
                // 创建Region的DOM元素并插入文档 
                var node = document.createElement('div');
                avalon(node).addClass(cfg.regionClass);
                element.appendChild(node);
                opts.$bindRegionNode(region, node, cfg.resizable);
            }
            avalon.scan(element, opts);
            opts.$updateNestedLayouts();
            if (typeof callback == 'function') {
                callback.call(element, region, node, cfg);
            }
        },
        /**
             * @config {Function} 拖动拖放器后区域大小改变的回调函数。单独的区域配置中若有相同的回调函数，则该区域被拖动后主配置的回调不会触发
             * @param region {Object} east, south, west或者north。
             * @param beforeSize {Number} 拖放前的尺寸
             * @param afterSize {Number} 拖放后的尺寸
             */
        afterResize: function (region, beforeSize, afterSize) {
        },
        /**
             * @config {Function} 移除一个区域后的回调函数。单独的区域配置中若有相同的回调函数，则该区域被移除后主配置的回调不会触发
             * @param region {Object} east, south, west或者north。
             */
        afterRemove: function (region) {
        },
        /**
             * @config {Function} 新增一个区域后的回调函数。
             * @param region {Object} east, south, west或者north。
             * @param dom {Object} 新增区域的DOM节点
             * @param cfg {Object} region配置对象。参看region配置
             */
        afterAdd: function (region, dom, cfg) {
        },
        /**
             * @config {Function} 当更改Layout尺寸后，需要调用此函数重新计算布局大小。
             * @param opts {Object} vmodel
             */
        updateLayoutSize: function (opts) {
            var element = opts.$element.element;
            if (opts.stretchMax) {
                opts.layoutWidth = avalon(element.parentNode).width();
                opts.layoutHeight = avalon(element.parentNode).height();
            }
            [
                'northRegion',
                'westRegion',
                'eastRegion',
                'southRegion'
            ].forEach(function (region) {
                var resizable = false, size = opts[region].size;
                if (!opts[region].inLayoutFlow)
                    return;
                opts.updateRealSize(opts, opts[region], region);
            });
            opts.$updateNestedLayouts();
        },
        /**
             * @config {Function} 检测Layout是否包含一个区域。
             * @param opts {Object} vmodel
             * @param region {Object} east, south, west, north或者centre。
             */
        hasRegion: function (opts, region) {
            var region = region + 'Region';
            return opts.hasOwnProperty(region) && opts[region].inLayoutFlow;
        },
        /**
             * @config {Function} 获取一个区域的真实尺寸。
             * @param opts {Object} vmodel
             * @param region {Object} east, south, west或者north。
             */
        getRegionRealSize: function (opts, region) {
            var region = region + 'Region', regionSize = 0;
            if (opts.hasOwnProperty(region) && opts[region].inLayoutFlow && region != 'centreRegion') {
                regionSize = opts[region].realSize;
            }
            return regionSize;
        },
        updateRealSize: function (opts, regionConfig, region) {
            if (region == 'centreRegion')
                return;
            var size = regionConfig.size, layoutSize = region == 'westRegion' || region == 'eastRegion' ? opts.layoutWidth : opts.layoutHeight;
            if (typeof size == 'string' && /^(100|[1-9]?\d(\.\d+?)?)%$/.test(size)) {
                regionConfig.realSize = layoutSize * parseFloat(size) / 100;
            } else {
                regionConfig.realSize = regionConfig.size;
            }
        }    //
    };
    return avalon;
}
)();
},{"../draggable/avalon.draggable":20,"avalon":2}],31:[function(innerRequire,module,exports){
innerRequire("avalon");

module.exports = (
function () {
    //获取当前JS绝对路径
    var path, t = document.getElementsByTagName('SCRIPT');
    for (var i in t) {
        if (t[i].outerHTML && t[i].outerHTML.indexOf('avalon.lazyload.js') !== -1) {
            var wholePath = t[i].src;
            path = wholePath.substring(0, wholePath.lastIndexOf('/'));
        }
    }
    var requestAnimationFrame = function () {
            //requestAnimationFrame 兼容
            return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
                window.setTimeout(callback, 25);
            };
        }();
    var Tween = {
            //线性以及二次方的缓动
            linear: function (t, b, c, d) {
                return c * t / d + b;
            },
            easeIn: function (t, b, c, d) {
                return c * (t /= d) * t + b;
            },
            easeOut: function (t, b, c, d) {
                return -c * (t /= d) * (t - 2) + b;
            },
            easeInOut: function (t, b, c, d) {
                if ((t /= d / 2) < 1)
                    return c / 2 * t * t + b;
                return -c / 2 * (--t * (t - 2) - 1) + b;
            }
        };
    var lazyElementArr = [],
        //预加载元素数组
        options;
    var lazyload = avalon.bindingHandlers.lazyload = function (data, vmodels) {
            //获取lazyload元素
            var args = data.value.match(avalon.rword) || [
                    '$',
                    'lazyload'
                ];
            var ID = args[0].trim(), opts = args[1], model, vmOptions;
            if (ID && ID != '$') {
                model = avalon.vmodels[ID];
                //如果指定了此VM的ID
                if (!model) {
                    return;
                }
            }
            if (!model) {
                //如果使用$或绑定值为空，那么就默认取最近一个VM，没有拉倒
                model = vmodels.length ? vmodels[0] : null;
            }
            if (model && typeof model[opts] === 'object') {
                //如果指定了配置对象，并且有VM
                vmOptions = model[opts];
                if (vmOptions.$model) {
                    vmOptions = vmOptions.$model;
                }
            }
            var element = data.element;
            element.removeAttribute('ms-lazyload');
            options = avalon.mix({}, lazyload.defaults, vmOptions || {}, avalon.getWidgetData(element, 'lazyload'));
            //加载占位图片为1像素透明图
            if (element.tagName === 'IMG') {
                element.src = path + '/images/placeholder.png';
            }
            //设置preLoadSrc
            var preLoadSrc = element.getAttribute('data-lazyload-preloadsrc') === null ? options.preLoadSrc : element.getAttribute('data-lazyload-preloadsrc');
            //loading占位
            if (options.preLoadType === 'image') {
                element.originalCssBackground = avalon.css(element, 'background-image');
                //记录原背景CSS
                element.style.background = 'url(' + preLoadSrc + ') no-repeat center center';
                //设置load旋转图为背景
                _renderImg(element, preLoadSrc, false, false);
                lazyElementArr.push(element);
            } else if (options.preLoadType === 'text') {
                //设置placeholderText插入图片DOM前面
                var placeholderText = document.createElement('span');
                placeholderText.innerHTML = preLoadSrc;
                element.parentNode.insertBefore(placeholderText, element);
                //placeholderText尺寸为图片尺寸
                placeholderText.style.cssText = 'display:inline-block;*display:inline;*zoom:1;' + 'width:' + element.width + 'px;';
                avalon.css(placeholderText, 'width', element.width <= 1 ? 'auto' : element.width + 'px;');
                avalon.css(placeholderText, 'height', element.height <= 1 ? 'auto' : element.height + 'px;');
                //图片设为0像素
                element.originalSize = {
                    'width': element.width <= 1 ? -1 : element.width,
                    'height': element.height <= 1 ? -1 : element.height
                };
                avalon.css(element, 'width', '0px');
                avalon.css(element, 'height', '0px');
                //placeholderText代替原有img DOM进入lazyElementArr
                placeholderText.imgEle = element;
                lazyElementArr.push(placeholderText);
            }
        };
    //init
    avalon.bind(window, 'load', function () {
        _delayload(options);
    });
    setInterval(function () {
        _delayload(options);
    }, 100);
    var _renderImg = function (ele, src, isloadingOriginal, needResize, tempImgItem) {
        var placeholderImg = new Image(), effect = ele.getAttribute('data-lazyload-itemeffect') !== null ? ele.getAttribute('data-lazyload-itemeffect') : options.effect;
        if (ele.tagName !== 'IMG' && isloadingOriginal) {
            var domContent = src;
            src = path + '/images/placeholder.png';
        }
        placeholderImg.onload = function () {
            options.width = ele.getAttribute('data-lazyload-width') || options.width;
            options.height = ele.getAttribute('data-lazyload-height') || options.height;
            if (options.width !== '' || options.height !== '') {
                if (options.width !== '') {
                    avalon.css(ele, 'width', options.width);
                    ele.preLoadSetSize = true;
                }
                if (options.height !== '') {
                    avalon.css(ele, 'height', options.height);
                    ele.preLoadSetSize = true;
                }
                //置空控制重复设置
                options.width = '';
                options.height = '';
            }    //CSS设置了DOM宽高时采用originalSize,否则采用src的宽高
            else if (ele.width <= 1 || ele.height <= 1 || typeof ele.width === 'undefined' || typeof ele.height === 'undefined' || needResize) {
                if (ele.tagName !== 'IMG' && needResize) {
                    avalon.css(ele, 'width', 'auto');
                    avalon.css(ele, 'height', 'auto');
                } else {
                    if (options.preLoadType === 'text') {
                        avalon.css(ele, 'width', ele.originalSize.width === -1 ? placeholderImg.width : ele.originalSize.width);
                        avalon.css(ele, 'height', ele.originalSize.height === -1 ? placeholderImg.height : ele.originalSize.height);
                    } else {
                        avalon.css(ele, 'width', placeholderImg.width);
                        avalon.css(ele, 'height', placeholderImg.height);
                    }
                }
                if (needResize) {
                    //根据originalSrc重新设定尺寸结束以后删除preLoadSetSize属性
                    try {
                        //ie不支持
                        delete ele.preLoadSetSize;
                    } catch (e) {
                    }
                } else {
                    //ele尺寸未设置，需要根据originalSrc重新设定尺寸
                    ele.preLoadSetSize = true;
                }
            }
            //加载原图 / DOM
            if (isloadingOriginal) {
                if (ele.tagName === 'IMG') {
                    ele.src = src    //大小确定后加载原图
;
                } else {
                    //DOM
                    ele.innerHTML = domContent;
                    var findController = ele;
                    do {
                        findController = findController.parentNode;
                    } while (findController.getAttribute('avalonctrl') === null);
                    findController.setAttribute('ms-controller', findController.getAttribute('avalonctrl'));
                    findController.removeAttribute('avalonctrl');
                    avalon.scan(findController);
                }
            }
            //Effect 模式
            if ((effect === 'fadeIn' || effect === 'slideY' || effect === 'slideX') && isloadingOriginal) {
                _EffectStart(ele, effect);
            }
            //移除placeholderText
            if (options.preLoadType === 'text') {
                if (tempImgItem.parentNode !== null) {
                    tempImgItem.parentNode.removeChild(tempImgItem);
                }
            }
        };
        placeholderImg.src = src;
    };
    var _delayload = function (options) {
        for (var i = 0, len = lazyElementArr.length; i < len; i++) {
            var imgItem = options.preLoadType === 'text' ? lazyElementArr[i].imgEle : lazyElementArr[i], eleTop = imgItem.offsetTop, eleHeight = imgItem.offsetHeight, winTop = document.compatMode === 'BackCompat' ? document.body.scrollTop : document.documentElement.scrollTop, winHeight = document.compatMode === 'BackCompat' ? document.body.clientHeight : document.documentElement.clientHeight;
            if (winTop === 0) {
                //修正chrome下取不到的問題
                winTop = document.body.scrollTop;
            }
            //加载正确的图片(originalSrc),条件是屏幕范围内并且要防止重复设置
            if (eleTop < winTop + winHeight && eleTop + eleHeight > winTop && !imgItem.lazyloaded) {
                //延迟加载
                setTimeout(function (i, imgItem, originalSrc) {
                    return function () {
                        if (options.preLoadType === 'image') {
                            _renderImg(imgItem, originalSrc, true, imgItem.preLoadSetSize);
                        } else {
                            _renderImg(imgItem, originalSrc, true, imgItem.preLoadSetSize, lazyElementArr[i]);
                        }
                        //加载完成
                        imgItem.lazyloaded = true;
                        imgItem.removeAttribute('data-lazyload-original');
                        avalon.css(imgItem, 'background-image', imgItem.originalCssBackground);
                        try {
                            //ie不支持
                            delete imgItem.originalCssBackground;
                        } catch (e) {
                        }
                    };
                }(i, imgItem, imgItem.getAttribute('data-lazyload-original')), imgItem.getAttribute('data-lazyload-itemdelay') || options.delay);
            }
        }
    };
    var _EffectStart = function (ele, effect) {
        if (ele.animated) {
            return;
        }
        var currentTime = 0, distance = ele.getAttribute('data-lazyload-distance') || options.slideDistance, startpos = effect === 'fadeIn' ? 0 : -distance, duringDistance = effect === 'fadeIn' ? 1 : distance, duringTime = 20, cssName;
        if (effect === 'fadeIn') {
            cssName = 'opacity';
        } else {
            cssName = effect === 'slideY' ? 'margin-top' : 'margin-left';
        }
        var _EffectGo = function () {
            cssValue = Tween[options.easing](currentTime, startpos, duringDistance, duringTime);
            //移动
            if (currentTime < duringTime) {
                avalon.css(ele, cssName, cssValue);
                currentTime += 1;
                requestAnimationFrame(_EffectGo);
            }
        };
        ele.animated = true;
        _EffectGo();
    };
    lazyload.defaults = {
        width: '',
        //@config 懒加载占位宽度，可通过设置元素的data-lazyload-width修改
        height: '',
        //@config 懒加载占位高度，可通过设置元素的data-lazyload-height修改
        contentType: 'image',
        //@config 懒加载内容类型："image"-图片 / "DOM"-文档片段
        preLoadType: 'image',
        //@config 预加载类型："image"-采用加载中图片 / "text"-采用加载中文字
        preLoadSrc: path + '/images/loading1.gif',
        //@config  预加载图片路径（文字内容）：preLoadType为"image"时为图片路径；preLoadType为"text"时为文字内容。也可以设置元素的data-lazyload-preloadsrc，替代默认值
        delay: 500,
        //@config  延迟加载时间（毫秒）。也可以设置元素的data-lazyload-itemdelay，替代默认值
        effect: 'none',
        //@config  预加载效果 "none"-无效果 / "fadeIn"-渐入效果 / "slideX"-由左向右滑动 / "slideY"-由上向下滑动，建议在图片加载中使用。也可以设置元素的data-lazyload-itemeffect，替代默认值
        easing: 'easeInOut',
        //  动画效果的缓动函数
        slideDistance: 300,
        //@config effect-slide模式的滑动长度。也可以设置元素的data-lazyload-distance，替代默认值
        $author: 'heiwu805@hotmail.com'
    };
    avalon.lazyload = lazyload;
    return avalon;
}
)();
},{"avalon":2}],32:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var DOC = document;
    var root = DOC.documentElement;
    var IEEventMap = {
            'change': 'click',
            'focus': 'focusin',
            'blur': 'focusout'
        };
    function getVal(elem) {
        var type = elem.type;
        if (type === 'select-multiple') {
            if (elem.selectedIndex > -1) {
                var ret = [];
                for (var i = 0, el; el = elem.options[i++];) {
                    ret.push(el.selected);
                }
                return ret.join('-');
            } else {
                return '';
            }
        } else if (elem.nodeName.toLowerCase() === 'select') {
            return elem.selectedIndex;
        }
        return elem.value;
    }
    function testChange(e) {
        var callbacks = liveMap['fixChangechange'];
        var target = e.target;
        for (var i = callbacks.length, obj; obj = callbacks[--i];) {
            var elem = obj.elem;
            if (root.contains(elem)) {
                if (elem === target) {
                    var curVal = getVal(elem);
                    if (obj.__change__ !== curVal) {
                        e.type = 'change';
                        obj.fn.call(elem, e);
                        obj.__change__ = curVal;
                    }
                }
            } else {
                dequeue(callbacks, obj, i);
            }
        }
    }
    function dequeue(callbacks, obj, i) {
        var parent = obj.elem.parentNode;
        if (!parent || parent.nodeType == 11) {
            callbacks.splice(i, 1);
        }
    }
    var liveMap = avalon.bindingHandlers.live = function (data, vmodels) {
            var type = data.param;
            var elem = data.element;
            data.type = 'on';
            var live = 'noFix';
            if (!DOC.createEvent) {
                if (/focus|blur/.test(type)) {
                    live = 'fixFocus'    //旧式IE下使用focusin与focusout来模拟focus、blur，使用click来模拟复选框，单选框的change事件
;
                } else if (type == 'change') {
                    var elemType = elem.type;
                    if (elemType == 'radio' || elemType === 'checkbox') {
                        live = 'fixFocus';
                        if (!('_just_changed' in elem)) {
                            //确保只绑定一次
                            elem._just_changed = false;
                            elem.attachEvent('onpropertychange', function (e) {
                                if (e.propertyName == 'checked') {
                                    elem._just_changed = true;
                                }
                            });
                        }
                    } else {
                        live = 'fixChange';
                    }
                } else if (/submit|reset|select/.test(type)) {
                    live = false    //对于一些模拟成本太大的事件直接使用普通的事件绑定
;
                }
            }
            if (live) {
                if (!liveMap[live + type]) {
                    liveMap[live + type] = [];
                    if (live === 'noFix') {
                        avalon.bind(DOC, type, function (e) {
                            //W3C
                            var callbacks = liveMap[live + type];
                            var target = e.target;
                            for (var i = callbacks.length, obj; obj = callbacks[--i];) {
                                if (root.contains(obj.elem)) {
                                    if (obj.elem === target || obj.elem.contains(target)) {
                                        obj.fn.call(obj.elem, e);
                                    }
                                } else {
                                    dequeue(callbacks, obj, i);
                                }
                            }
                        }, true);
                    }
                    if (live === 'fixFocus') {
                        //旧式浏览器的focus，blur，单选框与复选枉的change
                        avalon.bind(DOC, IEEventMap[type], function (e) {
                            var callbacks = liveMap[live + type];
                            var target = e.target;
                            for (var i = callbacks.length, obj; obj = callbacks[--i];) {
                                var elem = obj.elem;
                                if (root.contains(elem)) {
                                    if (elem === target || elem.contains(target)) {
                                        if (type === 'change') {
                                            if (elem._just_changed === true) {
                                                e.type = 'change';
                                                obj.fn.call(elem, e);
                                                elem._just_changed = false;
                                            }
                                        } else {
                                            e.type = type;
                                            obj.fn.call(elem, e);
                                        }
                                    }
                                } else {
                                    dequeue(callbacks, obj, i);
                                }
                            }
                        });
                    }
                    if (live === 'fixChange') {
                        avalon.bind(DOC, 'beforeactivate', testChange);
                        avalon.bind(DOC, 'beforedeactivate', testChange);
                    }
                }
                data.specialBind = function (elem, fn) {
                    var obj = {
                            elem: elem,
                            fn: fn
                        };
                    if (/focus|blur/.test(type)) {
                        elem.tabIndex = elem.tabIndex || -1;
                    }
                    if (live === 'fixChange') {
                        obj.__change__ = getVal(elem);
                    }
                    var callbacks = liveMap[live + type];
                    callbacks.unshift(obj);
                    data.specialUnbind = function () {
                        avalon.Array.remove(callbacks, obj);
                        delete data.specialBind;
                        delete data.specialUnbind;
                    };
                };
            }
            avalon.bindingHandlers.on(data, vmodels);
        };
}
)();
},{"avalon":2}],33:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-helper-reset oni-helper-clearfix oni-widget\">\n     <div class=\"oni-helper-reset oni-helper-clearfix oni-widget oni-loading-modal\" \n          ms-class-100=\"oni-helper-max-index:toggle\" \n          ms-if=\"modal\" \n          ms-attr-id=\"'modal'+$loadingID\" \n          style=\"z-index:999;\" \n          ms-css-opacity=\"modalOpacity\" \n          ms-css-background-color=\"modalBackground\" \n          ms-visible=\"toggle\">\n          <iframe allowTransparency=\"true\" frameborder=\"none\" src=\"javascript:''\"></iframe>\n          </div>\n     <div class=\"oni-helper-reset oni-helper-clearfix oni-widget oni-widget-content oni-loading\" \n          ms-class-100=\"oni-helper-max-index:toggle\" \n          ms-visible=\"toggle\" \n          ms-css-width=\"width\" \n          ms-css-height=\"height\" \n          ms-css-margin-left=\"-width/2+'px'\" \n          ms-css-margin-top=\"-height/2+'px'\" \n          ms-attr-id=\"'oni-loading-'+$loadingID\"><div \n          ms-css-width=\"width\" \n          ms-css-height=\"height\">{{MS_WIDGET_HTML}}</div></div>\n</div>",
ballTemplate = "{{MS_WIDGET_BALL}}\n<v:oval ms-repeat-item=\"data\" style=\"position:absolute;\" \n  ms-attr-strokecolor=\"color\" \n  ms-attr-fillcolor=\"color\" \n  ms-css-left=\"item.x + 'px'\" \n  ms-css-top=\"item.y + 'px'\" \n  ms-css-width=\"item.r * 2 + 'px'\" \n  ms-css-height=\"item.r * 2 + 'px'\">\n</v:oval>\n{{MS_WIDGET_DIVIDER}}\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">\n  <circle  \n          ms-attr-r=\"data[$index].r\" \n          ms-attr-cx=\"data[$index].x+data[$index].r\" \n          ms-attr-cy=\"data[$index].y+data[$index].r\" \n          ms-repeat=\"data\" \n          ms-attr-fill=\"color\">\n      <animate attributeName=\"opacity\" from=\"1\" to=\".1\" repeatCount=\"indefinite\" \n               ms-if=\"type=='ball'\" \n               ms-attr-dur=\"svgDur\" \n               ms-attr-begin=\"data[$index].begin\"/>\n      <animate attributeName=\"r\" repeatCount=\"indefinite\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\" calcMode=\"spline\" \n               ms-attr-values=\"'0;'+data[$index].r+';0;0'\"\n               ms-attr-dur=\"svgDur\" \n               ms-if=\"type=='spinning-bubbles'\" \n               ms-attr-begin=\"data[$index].begin\"/>\n      <animate attributeName=\"r\" repeatCount=\"indefinite\" keytimes=\"0;0.2;0.7;1\" keySplines=\"0.2 0.2 0.4 0.8;0.2 0.6 0.4 0.8;0.2 0.6 0.4 0.8\" calcMode=\"spline\" \n        ms-if=\"type=='bubbles'\"\n        ms-attr-begin=\"data[$index].begin\"  \n        ms-attr-dur=\"svgDur\" \n        ms-attr-values=\"'0;'+data[$index].r+';0;0'\" />\n  </circle>\n</svg>\n{{MS_WIDGET_TYPE}}\n{{MS_WIDGET_SPIN}}\n<v:oval stroked=\"true\" filled=\"F\" \n        ms-attr-strokecolor=\"color\" \n        ms-css-height=\"width+'px'\" \n        ms-css-width=\"width+'px'\" \n        ms-css-opacity=\"opacity\" \n        ms-attr-strokeweight=\"width / 2 - widthInner / 2+'px'\" \n        ms-repeat=\"data\" \n  style=\"position:absolute;z-index:2;left:0;top:0;\"></v:oval>\n<v:arc stroked=\"true\" filled=\"F\" \n    ms-attr-strokecolor=\"color\" \n    ms-attr-strokeweight=\"width / 2 - widthInner / 2+'px'\" \n    style=\"position:absolute;z-index:3;text-indent:-1000px;overflow:hidden;left:0;top:0;\" \n    ms-attr-startangle=\"startangle\" \n    ms-attr-endangle=\"endangle\" \n    ms-css-height=\"width+'px'\" \n    ms-css-width=\"width+'px'\" \n    ms-repeat=\"data\">\n  </v:arc>\n{{MS_WIDGET_DIVIDER}}\n<svg width=\"100%\" height=\"100%\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path \n    ms-attr-d=\"arc\" \n    ms-attr-stroke=\"color\" \n    ms-attr-stroke-width=\"radius\" \n    ms-attr-transform=\"'rotate(0 ' + spinPoint +')'\"\n    stroke-linejoin=\"round\" fill=\"none\">\n      <animateTransform attributeName=\"transform\" repeatCount=\"indefinite\" attributeType=\"XML\" type=\"rotate\" begin=\"0s\" \n        ms-attr-from=\"0 + ' ' + spinPoint\" \n        ms-attr-to=\"360 + ' ' + spinPoint\" \n        ms-attr-dur=\"svgDur\" />\n    </path>\n  <path stroke-linejoin=\"round\" \n    ms-attr-d=\"circle\" \n    ms-attr-stroke-width=\"radius\" \n    ms-attr-stroke=\"color\" \n    ms-css-opacity=\"opacity\" \n    fill=\"none\"></path>\n  </svg>\n{{MS_WIDGET_TYPE}}\n{{MS_WIDGET_SPINNING_SPIN}}\n<v:arc stroked=\"true\" filled=\"F\" \n    ms-attr-strokecolor=\"color\" \n    ms-attr-strokeweight=\"radius+'px'\" \n    style=\"position:absolute;z-index:3;text-indent:-1000px;overflow:hidden;left:0;top:0;\" \n    ms-attr-startangle=\"item.startangle\" \n    ms-attr-endangle=\"item.endangle\" \n    ms-css-opacity=\"opacities[$index]\" \n    ms-css-height=\"width+'px'\" \n    ms-css-width=\"width+'px'\" \n    ms-repeat-item=\"data\">\n  </v:arc>\n{{MS_WIDGET_DIVIDER}}\n<svg width=\"100%\" height=\"100%\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path \n    ms-attr-d=\"arc\" \n    ms-attr-stroke=\"color\" \n    ms-attr-stroke-width=\"radius\" \n    ms-attr-transform=\"item.rotate\" \n    ms-repeat-item=\"data\" \n    ms-css-opacity=\"opacities[$index]\" \n    stroke-linejoin=\"round\" fill=\"none\">\n      <animate ms-if=\"0\" attributeName=\"opacity\" from=\"1\" to=\".2\" repeatCount=\"indefinite\" \n               ms-attr-dur=\"svgDur\" \n               ms-attr-begin=\"item.begin\"/>\n    </path>\n  </svg>\n{{MS_WIDGET_TYPE}}\n{{MS_WIDGET_SPOKES}}\n<v:rect style=\"position:absolute;\"  \n        ms-attr-fillcolor=\"color\" \n        ms-attr-strokecolor=\"color\"  \n        ms-css-left=\"item.spokesLeft+'px'\" \n        ms-css-top=\"item.spokesTop+'px'\"\n        ms-css-width=\"spokesWidth+'px'\" \n        ms-css-height=\"spokesHeight+'px'\" \n        ms-css-rotation=\"item.spokesRotation\" \n        ms-repeat-item=\"data\">\n        <v:fill \n                ms-attr-color=\"color\"></v:fill>\n  </v:rect>\n{{MS_WIDGET_DIVIDER}}\n<svg width=\"100%\" height=\"100%\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path opacity=\".1\" ms-attr-d=\"svgPath\" \n      ms-attr-transform=\"data[$index].rotate\" \n        ms-repeat=\"data\" \n    ms-attr-fill=\"color\">\n    <animate attributeName=\"opacity\" from=\"1\" to=\".1\" repeatCount=\"indefinite\" \n             ms-attr-dur=\"svgDur\" \n             ms-attr-begin=\"data[$index].begin\"/></path>\n  </svg>\n{{MS_WIDGET_TYPE}}\n{{MS_WIDGET_IMG}}\n<img width=\"100%\" height=\"100%\" ms-attr-src=\"src\">";

module.exports = (
function () {
    var widgetCount = 0, isIE = navigator.userAgent.match(/msie/gi) || 'ActiveXObject' in window, _key = 99999 - Math.random() * 10000 >> 0, templateCache = {}, parts = ballTemplate.split('{{MS_WIDGET_TYPE}}'), _config = {};
    // 通过addtype注册新的效果
    // config里面是每个type特有的配置或者方法，mix到vm里
    // drawser方法在注入html之前执行，主要用于生成绘图需要的数据
    // effect方法用于setinterval动画效果
    function addType(type, config, drawer, effect) {
        config['drawer'] = drawer;
        config['effect'] = effect;
        _config[type] = config;
    }
    function g(id) {
        return document.getElementById(id);
    }
    avalon.each(parts, function (i, item) {
        var type, item = item.trim().replace(/^\{\{MS_WIDGET_[^\}]+\}\}/g, function (mat) {
                type = mat.replace(/\{\{MS_WIDGET_|\}\}/g, '').replace(/_/g, '-').toLowerCase();
                return '';
            });
        if (type) {
            type = type;
            item = item.split('{{MS_WIDGET_DIVIDER}}');
            templateCache[type] = {
                'svg': item[1] || item[0],
                'vml': item[0]
            };
        }
    });
    // svg绘制圆弧
    function circleValueList(r, bw, ct) {
        var arr = [], count = ct || 36, r = r - bw, arc, x, y, res;
        for (var i = 0; i <= count; i++) {
            arc = Math.PI / 2 - Math.PI * 2 / count * i;
            x = Math.cos(arc) * r + r * 1 + bw * 1;
            y = (1 - Math.sin(arc).toFixed(4)) * r + bw * 1;
            res = (i ? ' L' : 'M') + x + ' ' + y + (i == 100 ? 'Z' : '');
            arr.push(res);
        }
        return arr;
    }
    // 注册ball，小球排列成一个圆
    addType('ball', {
        'width': 32,
        'widthInner': 28,
        count: 10,
        //@config type=ball，loading效果组成的小图形个数
        interval: 120,
        //@config type=ball，毫秒数，动画效果帧间隔
        circleMargin: 1,
        //@config type=ticks，小球之间的间距，单位是一倍小球半径
        'svgDur': '1s'
    }, function (vmodel) {
        var type = vmodel.type, count = vmodel.count, width = vmodel.width, radiusOut = width / 2, interval = vmodel.interval, radiusInner = (width - vmodel.widthInner) / 2;
        if (type === 'ball')
            vmodel.svgDur = interval * count / 1000 + 's';
        return function (loop) {
            var angel = Math.PI * (0.5 - 2 * loop / count);
            vmodel.data.push({
                'x': (radiusOut - radiusInner) * (Math.cos(angel) + 1),
                'y': (radiusInner - radiusOut) * (Math.sin(angel) - 1),
                'r': radiusInner,
                'begin': [
                    interval * loop / 1000,
                    's'
                ].join('')
            });
            vmodel.opacities.push((loop / count).toFixed(2));
        };
    }, function (vmodel, ele, tagList, callback) {
        // only for ie
        if (!isIE && vmodel.type !== 'ticks' && vmodel.type != 'spinning-spin')
            return;
        var tagList = Array.isArray(tagList) ? tagList : [
                'circle',
                'oval'
            ], tag = vmodel.svgSupport ? tagList[0] : tagList[1], ele = ele.getElementsByTagName(tag), len = ele.length, index = len, eles = [], flag;
        avalon.each(ele, function (i, item) {
            eles.push(avalon(item));
            // fix ie 7-8 render bug...
            if (i === len - 1 && !vmodel.svgSupport) {
                item.style.display = 'none';
                item.style.display = 'block';
            }
        });
        if (vmodel.type === 'ticks') {
            index = 0;
            return function () {
                for (var i = 0; i < len; i++) {
                    var op = i > index ? vmodel.opacities[1] : vmodel.opacities[0];
                    if (eles[i]) {
                        eles[i].css('visibility', op >= 1 ? 'visible' : 'hidden');
                    }
                }
                index++;
                if (index >= len) {
                    index = -1;
                }
            };
        }
        // share for type=ball and type=spokes
        return function () {
            // 顺时针
            index--;
            if (index < 0) {
                index = len - 1;
            }
            for (var i = 0; i < len; i++) {
                if (callback) {
                    callback(eles[i], i, index);
                } else {
                    var op = vmodel.opacities[(i + index) % len] * 100 / 100;
                    eles[i] && eles[i].css('opacity', op);
                }
            }
        };
    });
    // 注册ticks，小球排列成一行
    addType('ticks', avalon.mix({}, _config['ball'], {
        count: 3,
        //@config type=ticks，小球个数
        height: 20,
        //@config type=ticks，高度
        interval: 360    //@config type=ticks，毫秒数，动画效果帧间隔
    }), function (vmodel) {
        var count = vmodel.count, rate = 2 + vmodel.circleMargin, radiusInner = (vmodel.width - vmodel.widthInner) / 2, marginLeft = (vmodel.width - radiusInner * (3 * count - 1)) / 2;
        return function (loop) {
            vmodel.data.push({
                'x': marginLeft + loop * rate * radiusInner,
                'y': vmodel.height / 2 - radiusInner,
                'r': radiusInner,
                'begin': [
                    vmodel.interval * loop / 1000,
                    's'
                ].join('')
            });
            vmodel.opacities.push(loop ? 0 : 1);
        };
    }, _config['ball'].effect);
    templateCache['ticks'] = templateCache['ball'];
    // 注册spin，圆环转圈
    addType('spin', {
        width: 32,
        widthInner: 26,
        angel: 90,
        //@config type=spin，转动的弧形的角度，单位是1度
        arc: '',
        circle: '',
        radius: '',
        opacity: 0.2,
        //@config type=spin，背景圆弧的透明度
        startangle: 0,
        //@config type=spin，圆弧开始的角度，单位1度
        endangle: 0,
        interval: 36,
        //@config type=spin，毫秒数，动画效果帧间隔
        $circleData: '',
        $partsData: '',
        spinPoint: '23 23',
        svgDur: '1s',
        data: [1]
    }, function (vmodel) {
        vmodel.radius = vmodel.width / 2 - vmodel.widthInner / 2;
        if (vmodel.svgSupport) {
            vmodel.svgDur = vmodel.interval * 36 / 1000 + 's';
            vmodel.spinPoint = [
                vmodel.width / 2,
                vmodel.width / 2
            ].join(' ');
            var circle = vmodel.$circleData = circleValueList(vmodel.width / 2, vmodel.width / 2 - vmodel.widthInner / 2), parts = vmodel.$partsData = circle.slice(0, Math.floor(vmodel.angel / 360 * (circle.length - 1)));
            vmodel.arc = parts.join('');
            vmodel.circle = circle.join('');
        } else {
            vmodel.startangle = 0;
            vmodel.endangle = vmodel.angel;
        }
    }, function (vmodel, ele) {
        // only for ie
        if (!isIE)
            return;
        var angel = stepper = vmodel.angel;
        if (vmodel.svgSupport) {
            var len = vmodel.$circleData.length, ele = avalon(ele.getElementsByTagName('path')[0]);
            angel = stepper = Math.floor(vmodel.angel / 360 * len);
            return function () {
                // 生成圆弧的点阵是36个点，因此步长用1就足够了
                stepper += 1;
                if (stepper >= len)
                    stepper = 0;
                // 改用rotate属性
                ele.attr('transform', 'rotate(' + stepper * 10 + ' ' + vmodel.spinPoint + ')');
            };
        }
        return function () {
            stepper += 10;
            var startangle = stepper - angel;
            if (stepper > 360) {
                stepper = stepper - 360;
                startangle = startangle - 360;
            }
            vmodel.startangle = startangle;
            vmodel.endangle = stepper;
        };
    });
    // 注册小长方形圆形排列效果
    addType('spokes', {
        count: 8,
        //@config type=spokes，长方形个数
        width: 32,
        //@config type=spokes，效果宽度,
        spokesWidth: 4,
        //@config type=spokes，小长方形宽度
        spokesHeight: 8,
        //@config type=spokes，小长方形高度
        interval: 125,
        //@config type=spokes，效果动画间隔毫秒数
        svgPath: 'M14 0 H18 V8 H14 z',
        svgDur: '1s'
    }, function (vmodel) {
        var count = vmodel.count, w = vmodel.width, sw = vmodel.spokesWidth, sh = vmodel.spokesHeight, index = 0, interval = vmodel.interval;
        if (vmodel.svgSupport) {
            vmodel.svgPath = [
                'M',
                (w - sw) / 2,
                ' 0 H',
                (w + sw) / 2,
                ' V',
                sh,
                ' H',
                (w - sw) / 2,
                ' z'
            ].join('');
            vmodel.svgDur = interval * count / 1000 + 's';
            var step = 360 / count;
            return function (loop) {
                vmodel.data.push({
                    'begin': [
                        interval * loop / 1000,
                        's'
                    ].join(''),
                    'rotate': [
                        'rotate(',
                        loop * step,
                        ' ',
                        [
                            w / 2,
                            w / 2
                        ].join(' ') + ')'
                    ].join('')
                });
                vmodel.opacities.push((loop / count).toFixed(2));
            };
        }
        var step = Math.PI * 2 / count, angel, halfSw = sw / 2;
        return function (loop) {
            angel = Math.PI / 2 - step * loop;
            var vsin = Math.sin(angel), vcos = Math.cos(angel), op = (loop / count).toFixed(2);
            vmodel.data.push({
                'spokesRotation': 360 * loop / count,
                'spokesOpacity': op * 50,
                'spokesLeft': (w / 2 - sw) * (1 + vcos),
                'spokesTop': (w / 2 - sw) * (1 - vsin)
            });
            vmodel.opacities.push(op);
        };
    }, function (vmodel, ele) {
        return _config['ball'].effect(vmodel, ele, [
            'path',
            'rect'
        ]);
    });
    // 注册小球排列成一个圆，半径变化
    addType('spinning-bubbles', avalon.mix({}, _config['ball'], {
        width: 64,
        //@config type=spinning-bubbles 宽度，小球的个数继承自type=ball
        widthInner: 54,
        //@config type=spinning-bubbles 内宽
        $zooms: []
    }), function (vmodel) {
        var drawer = _config['ball'].drawer(vmodel), count = vmodel.count;
        if (count >= 7) {
            vmodel.$zooms = [
                0.2,
                0.4,
                0.8,
                1,
                0.8,
                0.4,
                0.2
            ];
        } else if (count >= 5) {
            vmodel.$zooms = [
                0.2,
                0.8,
                1,
                0.8,
                0.2
            ];
        } else {
            vmodel.$zooms = [
                1,
                0.1,
                0.1,
                0.1
            ];
        }
        while (vmodel.$zooms.length < vmodel.count) {
            vmodel.$zooms.push(0.1);
        }
        return function (loop) {
            drawer(loop);
        };
    }, function (vmodel, ele) {
        var r = (vmodel.width - vmodel.widthInner) / 2, count = vmodel.count;
        if (vmodel.svgSupport)
            return _config['ball'].effect(vmodel, ele, [
                'circle',
                'oval'
            ], function (ele, loop, step) {
                ele.attr('r', r * vmodel.$zooms[(loop + step) % count]);
            });
        return _config['ball'].effect(vmodel, ele, [
            'circle',
            'oval'
        ], function (ele, loop, step) {
            ele.css('zoom', vmodel.$zooms[(loop + step) % vmodel.count]);
        });
    });
    // 注册bubbles, 高级浏览器
    addType('bubbles', avalon.mix({}, _config['spinning-bubbles'], {
        height: 30,
        //@config type=bubbles 高度，宽度继承type=spinning-bubbles
        widthInner: 50,
        //@config type=bubbles 内宽
        count: 3,
        //@config type=bubbles 球的个数
        interval: 360,
        //@config type=bubbles 动画ms数
        'circleMargin': 0.5    //@config type=bubbles bubbles效果下个小球的间距
    }), function (vmodel) {
        _config['spinning-bubbles'].drawer(vmodel);
        return _config['ticks'].drawer(vmodel);
    }, _config['spinning-bubbles'].effect);
    // 注册spinning-spin
    addType('spinning-spin', avalon.mix({}, _config['spin'], {
        opacities: [],
        data: [],
        radius: 1,
        interval: _config['ball'].interval,
        //@config type=spinning-spin 帧间隔，继承ball
        count: 8,
        //@config type=spinning-spin 小圆弧个数，一般请保证 360 / 8 % padding = 0
        width: 46,
        //@config type=spinning-spin 圆外直径
        widthInner: 38,
        //@config type=spinning-spin 圆内直径
        padding: 5    //@config type=spinning-spin 小圆弧间间隔的角度数
    }), function (vmodel) {
        var ct = 360 / vmodel.padding * 3, r = vmodel.width / 2, dt = circleValueList(r, r - vmodel.widthInner / 2, ct), count = vmodel.count, interval = vmodel.interval, step = 360 / count;
        vmodel.radius = vmodel.width / 2 - vmodel.widthInner / 2;
        function writeOp(loop) {
            var cp = (loop / count).toFixed(2);
            cp = cp > 0.6 ? cp : 0.2;
            vmodel.opacities.push(cp);
        }
        if (vmodel.svgSupport) {
            vmodel.svgDur = interval * count / 1000 + 's';
            vmodel.arc = dt.slice(0, Math.floor((1 / count - vmodel.padding / 360) * dt.length)).join('');
            return function (loop) {
                vmodel.data.push({
                    rotate: 'rotate(' + step * loop + ' ' + r + ' ' + r + ')',
                    begin: [
                        interval * loop / 1000,
                        's'
                    ].join('')
                });
                writeOp(loop);
            };
        }
        return function (loop) {
            vmodel.data.push({
                startangle: loop / count * 360,
                endangle: (loop + 1) / count * 360 - 10
            });
            writeOp(loop);
        };
    }, function (vmodel, ele) {
        return _config['ball'].effect(vmodel, ele, [
            'path',
            'arc'
        ]);
    });
    // 注册自定义图片
    addType('img', {
        src: 'https://source.qunarzz.com/piao/images/loading_camel.gif',
        //@config type=img，loading效果的gif图片
        width: 52,
        //@config type=img，loading效果宽度
        height: 39,
        //@config type=img，loading效果高度
        miao: 0
    }, void 0, void 0);
    var svgSupport = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;
    var widget = avalon.ui.loading = function (element, data, vmodels) {
            var options = data.loadingOptions;
            //方便用户对原始模板进行修改,提高定制性
            options.template = options.getTemplate(template, options);
            if (!_config[options.type]) {
                options.type = 'ball';
            }
            // 读入各种效果的配置
            avalon.each(_config[options.type], function (i, item) {
                if (options[i] === void 0)
                    options[i] = item;
            });
            var vmodel = avalon.define(data.loadingId, function (vm) {
                    vm.height = '';
                    vm.width = '';
                    vm.data = [];
                    vm.opacities = [];
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.rootElement = '';
                    vm.svgSupport = svgSupport;
                    vm.$loadingID = widgetCount + '' + _key;
                    vm.$timer = '';
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'opacities',
                        'data',
                        'rootElement'
                    ];
                    var inited;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        var id, container = options.container || vmodel.widgetElement, elementParent = (avalon.type(container) === 'object' && container.nodeType === 1 && document.body.contains(container) ? container : document.getElementById(container)) || document.body, type = vmodel.type,
                            // radiusOut = vmodel.width / 2,
                            html = (templateCache[type] || templateCache['ball'])[vmodel.svgSupport ? 'svg' : 'vml'], index = 0;
                        vmodel.width = vmodel.width == false ? vmodel.height : vmodel.width;
                        vmodel.height = vmodel.height == false ? vmodel.width : vmodel.height;
                        // 计算绘图数据
                        if (vmodel.drawer) {
                            var loop = 0, drawer = vmodel.drawer(vmodel);
                            while (loop < vmodel.count && drawer) {
                                drawer(loop);
                                loop++;
                            }
                        }
                        var frag = avalon.parseHTML(vmodel.template.replace('{{MS_WIDGET_HTML}}', html).replace('{{MS_WIDGET_ID}}', vmodel.$loadingID));
                        newDiv = frag.childNodes[0];
                        elementParent.appendChild(newDiv);
                        vm.rootElement = newDiv;
                        avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                        avalon.scan(elementParent, [vmodel].concat(vmodels));
                        if (typeof options.onInit === 'function') {
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                        vmodel._effect();
                    };
                    vm._effect = function () {
                        if (vmodel.toggle) {
                            var ele = document.getElementById('oni-loading-' + vmodel.$loadingID);
                            if (ele) {
                                var effect = vmodel.effect && vmodel.effect(vmodel, ele);
                                if (effect) {
                                    clearInterval(vmodel.$timer);
                                    vmodel.$timer = setInterval(effect, vmodel.interval);
                                }
                            }
                        }
                    };
                    vm.$remove = function () {
                        clearInterval(vmodel.$timer);
                        element.innerHTML = element.textContent = '';
                    };
                    //@interface showLoading() 显示loading效果
                    vm.showLoading = function () {
                        if (vmodel.toggle)
                            return;
                        vmodel.toggle = true;
                        vmodel._effect();
                    };
                    //@interface hideLoading() 隐藏loading
                    vm.hideLoading = function () {
                        vmodel.toggle = false;
                    };
                    //@interface destroyLoading() 销毁loading
                    vm.destroyLoading = function () {
                        vmodel.toggle = false;
                        vmodel.$remove();
                    };
                    /**
             * @interface 将loading效果插入到指定的容器里
             * @param 目标容器元素，默认是绑定widget的元素
             */
                    vm.appendTo = function (container) {
                        var cnt = container || vm.widgetElement, modal = g('modal' + vm.$id), loading = g('loading' + vm.$id);
                        if (modal)
                            cnt.appendChild(modal);
                        if (loading)
                            cnt.appendChild(loading);
                    };
                });
            vmodel.$watch('toggle', function (n) {
                if (!n) {
                    clearInterval(vmodel.$timer);
                } else {
                    vmodel._effect();
                }
            });
            widgetCount++;
            return vmodel;
        };
    widget.defaults = {
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        color: '#619FE8',
        //@config 效果的颜色
        type: 'ball',
        //@config 类型，默认是ball，球，可取spin,ticks
        toggle: true,
        //@config 是否显示
        modal: true,
        //@config 是否显示遮罩
        modalOpacity: 0.1,
        //@config 遮罩透明度
        modalBackground: '#fff',
        //@config 遮罩背景色
        container: void 0,
        //@config loading效果显示的容器，默认是绑定widget的元素
        getTemplate: function (tmpl, opts, tplName) {
            return tmpl;
        },
        //@config getTemplate(tpl, opts, tplName) 定制修改模板接口
        $author: 'skipper@123'
    };
}
)();
},{"avalon":2}],34:[function(innerRequire,module,exports){
innerRequire("avalon");

module.exports = (
function () {
    avalon.duplexHooks.mask = {
        init: function (_, data) {
            var elem = data.element;
            var maskText = elem.getAttribute('data-duplex-mask');
            if (maskText) {
                var mask = data.msMask = new Mask(elem, maskText);
                data.bound('keydown', function (e) {
                    elem.userTrigger = false;
                    var k = e.which || e.keyCode;
                    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {
                        //Ignore
                        return;
                    }
                    var caret = getCaret(elem);
                    if (k === 39) {
                        //向右
                        var i = mask.caretData.indexOf(null, caret.end);
                        if (i === -1) {
                            i = mask.caretData.indexOf(null);
                        }
                        setTimeout(function () {
                            setCaret(elem, i, i + 1);
                        });
                    } else if (k == 37) {
                        //向左
                        var _ = mask.caretData.slice(0, caret.start);
                        var i = _.lastIndexOf(null);
                        if (i === -1) {
                            i = mask.caretData.indexOf(null);
                        }
                        setTimeout(function () {
                            setCaret(elem, i, i + 1);
                        });
                    } else {
                        elem.userTrigger = true;
                    }
                });
                data.bound('click', function (e) {
                    setTimeout(function () {
                        //搞掉keyup中的  elem.userTrigger = true
                        elem.userTrigger = false;
                    });
                    if (elem.userTrigger === true) {
                        //防止触发了keyup的操作又触发这里的
                        return;
                    }
                    var caret = getCaret(elem);
                    var i = mask.caretData.indexOf(null, caret.end);
                    if (i === -1) {
                        i = mask.caretData.indexOf(null);
                    }
                    setTimeout(function () {
                        setCaret(elem, i, i + 1);
                    });
                });
                function showMask(e) {
                    elem.value = mask.valueMask;
                    elem.userTrigger = true;
                    var index = mask.vmodelData.indexOf(null);
                    //定位于第一个要填空的位置上
                    if (index !== -1) {
                        setCaret(elem, index, index + 1);
                    }
                }
                function hideMask() {
                    var invalid = mask.vmodelData.some(function (el) {
                            return el === null;
                        });
                    if (mask.hideIfInvalid && invalid || mask.hideIfPristine && elem.value === mask.valueMask) {
                        elem.value = elem.oldValue = ''    //注意IE6-8下，this不指向element
;
                    }
                }
                if (mask.showAlways) {
                    showMask();
                } else {
                    if (mask.showIfFocus) {
                        data.bound('focus', showMask);
                        data.bound('blur', hideMask);
                    }
                    if (mask.showIfHover) {
                        data.bound('mouseover', showMask);
                        data.bound('mouseout', hideMask);
                    }
                }
            } else {
                throw '\u8BF7\u6307\u5B9Adata-duplex-mask';
            }
        },
        get: function (val, data) {
            //用户点击时会先触发这里
            var elem = data.element;
            var mask = data.msMask;
            if (elem.userTrigger) {
                mask.getter(val);
                elem.oldValue = val;
                elem.userTrigger = false;
                var index = mask.vmodelData.indexOf(null);
                if (index === -1) {
                    var caret = getCaret(elem);
                    var index = mask.caretData.indexOf(null, caret.end);
                    if (index === -1) {
                        index = mask.caretData.indexOf(null);
                    }
                    setCaret(elem, index, index + 1);
                } else {
                    setTimeout(function () {
                        setCaret(elem, index, index + 1);
                    });
                }
            }
            elem.oldValue = val;
            return mask.vmodelData.join('');
        },
        set: function (val, data) {
            //将vm中数据放到这里进行处理，让用户看到经过格式化的数据
            // 第一次总是得到符合格式的数据
            var elem = data.element;
            var mask = data.msMask;
            if (val !== '') {
                if (!mask.match(val)) {
                    elem.oldValue = mask.fix(val);
                }
                return data.msMask.viewData.join('');
            } else {
                return '';
            }
        }
    };
    function Mask(element, dataMask) {
        var options = avalon.getWidgetData(element, 'duplexMask');
        var t = {};
        try {
            t = new Function('return ' + options.translations)();
        } catch (e) {
        }
        avalon.mix(this, Mask.defaults, options);
        this.translations = avalon.mix({}, Mask.defaults.translations, t);
        this.element = element;
        //@config {Element} 组件实例要作用的input元素
        this.dataMask = dataMask;
        //@config {String} 用户在input/textarea元素上通过data-duplex-mask定义的属性值
        //第一次将dataMask放进去，得到element.value为空时，用于提示的valueMask
        getDatas.call(this);
        this.valueMask = this.viewData.join('')    // valueMask中的元字符被全部替换为对应的占位符后的形态，用户实际上在element.value看到的形态
;
    }
    Mask.defaults = {
        placehoder: '_',
        //@config {Boolean} "_", 将元字符串换为"_"显示到element.value上，如99/99/9999会替换为__/__/____，可以通过data-duplex-mask-placehoder设置
        hideIfInvalid: false,
        //@config {Boolean} false, 如果它不匹配就会在失去焦点时清空value(匹配是指所有占位符都被正确的字符填上)，可以通过data-duplex-mask-hide-if-invalid设置
        hideIfPristine: true,
        //@config {Boolean} true如果它没有改动过就会在失去焦点时清空value，可以通过data-duplex-mask-hide-if-pristine设置
        showIfHover: false,
        //@config {Boolean} false 当鼠标掠过其元素上方就显示它出来，可以通过data-duplex-mask-show-if-hover设置
        showIfFocus: true,
        //@config {Boolean} true 当用户让其元素得到焦点就显示它出来，可以通过data-duplex-mask-show-if-focus设置
        showAlways: false,
        //@config {Boolean} false 总是显示它，可以通过data-duplex-mask-show-always设置
        translations: {
            //@config {Object} 此对象上每个键名都是元字符，都对应一个对象，上面有pattern(正则)，placehoder(占位符，如果你不想用"_")
            '9': { pattern: /\d/ },
            'A': { pattern: /[a-zA-Z]/ },
            '*': { pattern: /[a-zA-Z0-9]/ }
        }
    };
    function getDatas() {
        var array = this.dataMask.split('');
        //用户定义的data-duplex-mask的值
        var n = array.length;
        var translations = this.translations;
        this.viewData = array.concat();
        //占位符
        this.caretData = array.concat();
        //光标
        this.vmodelData = new Array(n);
        // (9999/99/99) 这个是data-duplex-mask的值，其中“9”为“元字符”，“(”与 “/” 为“提示字符”
        // (____/__/__) 这是用占位符处理后的mask值
        for (var i = 0; i < n; i++) {
            var m = array[i];
            if (translations[m]) {
                var translation = translations[m];
                this.viewData[i] = translation.placehoder || this.placehoder;
                this.caretData[i] = null;
                this.vmodelData[i] = null;
            }
        }
    }
    Mask.prototype = {
        match: function (value) {
            if (value.length === this.valueMask.length) {
                var array = value.split('');
                var translations = this.translations;
                for (var i = 0, n = array.length; i < n; i++) {
                    var m = array[i];
                    if (translations[m]) {
                        var translation = translations[m];
                        var pattern = translation.pattern;
                        var placehoder = translation.placehoder || this.placehoder;
                        if (m === placehoder) {
                            continue;
                        }
                        if (!pattern.test(m)) {
                            return false;
                        }
                    } else {
                        if (m !== this.valueMask.charAt(i)) {
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return false;
            }
        },
        fix: function (value) {
            //如果不符合格式，则补上提示符与占位符
            var array = this.dataMask.split('');
            var valueArray = value.split('');
            var translations = this.translations;
            for (var i = 0, n = array.length; i < n; i++) {
                var m = array[i];
                if (translations[m]) {
                    var translation = translations[m];
                    var pattern = translation.pattern;
                    if (pattern.test(valueArray[0])) {
                        array[i] = valueArray.shift();
                    } else {
                        array[i] = translation.placehoder || this.placehoder;
                    }
                }
            }
            this.viewData = array;
            return array.join('');
        },
        getter: function (value) {
            var maskArray = this.dataMask.split('');
            //用户定义的data-duplex-mask的值
            var valueArray = value.split('');
            var translations = this.translations;
            var viewData = [];
            var vmodelData = [];
            // (9999/99/99) 这个是data-duplex-mask的值，其中“9”为“元字符”，“(”与 “/” 为“提示字符”
            // (____/__/__) 这是用占位符处理后的mask值
            while (maskArray.length) {
                var m = maskArray.shift();
                var el = valueArray.shift();
                //123456
                if (translations[m]) {
                    //如果碰到元字符
                    var translation = translations[m];
                    var pattern = translation.pattern;
                    if (el && el.match(pattern)) {
                        //如果匹配
                        vmodelData.push(el);
                        viewData.push(el);
                    } else {
                        vmodelData.push(null);
                        viewData.push(translation.placehoder || this.placehoder);
                    }
                } else {
                    //如果是提示字符 
                    viewData.push(el);
                    vmodelData.push(void 0);
                }
            }
            this.viewData = viewData;
            this.vmodelData = vmodelData;
        }
    };
    function getCaret(el) {
        var start = 0, end = 0;
        if (typeof el.selectionStart === 'number' && typeof el.selectionEnd === 'number') {
            start = el.selectionStart;
            end = el.selectionEnd;
        } else {
            var range = document.selection.createRange();
            if (range && range.parentElement() === el) {
                var len = el.value.length;
                var normalizedValue = el.value.replace(/\r?\n/g, '\n');
                var textInputRange = el.createTextRange();
                textInputRange.moveToBookmark(range.getBookmark());
                var endRange = el.createTextRange();
                endRange.collapse(false);
                if (textInputRange.compareEndPoints('StartToEnd', endRange) > -1) {
                    start = end = len;
                } else {
                    start = -textInputRange.moveStart('character', -len);
                    start += normalizedValue.slice(0, start).split('\n').length - 1;
                    if (textInputRange.compareEndPoints('EndToEnd', endRange) > -1) {
                        end = len;
                    } else {
                        end = -textInputRange.moveEnd('character', -len);
                        end += normalizedValue.slice(0, end).split('\n').length - 1;
                    }
                }
            }
        }
        return {
            start: start,
            end: end
        };
    }
    //setCaret(ctrl, a, b) 高亮部分停留在第a个字符上，但不包含b
    function setCaret(ctrl, start, end) {
        if (!ctrl.value || ctrl.readOnly)
            return;
        if (!end) {
            end = start;
        }
        if (ctrl.setSelectionRange) {
            ctrl.selectionStart = start;
            ctrl.selectionEnd = end;
            ctrl.focus();
        } else {
            var range = ctrl.createTextRange();
            range.collapse(true);
            range.moveStart('character', start);
            range.moveEnd('character', end - start);
            range.select();
        }
    }
}
)();
},{"avalon":2}],35:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<li class=\"oni-state-default oni-menu-item\" \n    data-repeat-rendered=\"_rescan\" \n    ms-repeat-menu=\"data\"   \n    ms-class-11=\"oni-state-active:!!_canActive(menu, $index)\" \n    ms-class-12=\"oni-state-disabled:menu.disabled\" \n    ms-class-13=\"oni-menu-last:$last\" \n    ms-class-14=\"oni-menu-removable:!!_canRemove(menu)\" \n    ms-class-15=\"oni-menu-item-{{_depth}}\" \n    ms-class-16=\"oni-menu-with-sub oni-menu-with-sub-{{_depth}}:_hasSubMenu(menu)\" \n    ms-hover=\"oni-state-hover\" \n    ms-click-101=\"_ifEventIsMouseEnter($event, $index)\" \n    ms-data-sub=\"_hasSubMenu(menu)\" \n    ms-data-depth=\"_depth\" \n    ms-data-index=\"$index\" \n    ms-{{MS_OPTION_EVENT}}-100=\"activate($event, $index)\" \n    > \n    {{_menuTitle(menu.title, menu, _cutCounter(), cutEnd) | html}}\n    <span ms-if=\"_hasSubMenu(menu)\" class=\"oni-menu-icon\">&gt;</span>\n\t<ul ms-if=\"_hasSubMenu(menu)\" class=\"oni-menu oni-menu-sub oni-helper-clearfix oni-helper-reset\" \n\t\t ms-data-widget-index=\"$index\" \n\t\t ms-class-101=\"oni-menu-depth-{{_depth+1}}\" \n\t\t ms-class-102=\"oni-helper-hidden:!_canActive(menu, $index)\" \n\t\t ms-data-widget=\"'menu'\">\n\t</ul>\n</li>";

module.exports = (
function () {
    var counter = 0;
    function getCnt() {
        return counter++;
    }
    // _depth迭代层数
    function buildData(nodes, obj, _depth) {
        var data = [], node, i = 0, _depth = _depth || 0;
        while (node = nodes[0]) {
            var subMenu = node.getElementsByTagName && (node.getElementsByTagName('ul')[0] || node.getElementsByTagName('ol')[0]), item = {};
            if (subMenu) {
                item.data = buildData(subMenu.children, obj, _depth + 1);
                node.removeChild(subMenu);
            } else {
                item.data = '';
            }
            var html = node.innerHTML, d = avalon(node).data();
            if (html && html.trim() || subMenu) {
                item.title = html || '';
                item.disabled = d && d.disabled;
                item.active = d && d.active || i === obj.active;
                if (item.active)
                    obj.active = i;
                data.push(item);
                i++;
            }
            node.parentNode.removeChild(node);
        }
        return data;
    }
    // 格式化数据
    function formateData(data) {
        avalon.each(data, function (i, item) {
            if (!item || item.$id)
                return;
            var tpl = avalon.mix({
                    disabled: false,
                    title: '',
                    data: '',
                    active: false
                }, item);
            avalon.mix(item, tpl);
            if (Array.isArray(item.data))
                formateData(item.data);
        });
    }
    var widgetInit;
    function bindClick(e) {
        for (var i in widgetInit) {
            widgetInit[i] && widgetInit[i](e);
        }
    }
    function hasSubMenu(node) {
        return node.getElementsByTagName('ol')[0] || node.getElementsByTagName('ul')[0];
    }
    var widget = avalon.ui.menu = function (element, data, vmodels) {
            var options = data.menuOptions;
            options.event = options.event === 'mouseover' ? 'mouseenter' : options.event;
            //方便用户对原始模板进行修改,提高定制性
            options.template = options.getTemplate(template, options).replace(/\{\{MS_OPTION_EVENT\}\}/, options.event).replace(/\{\{\MS_OPTION_CNT}\}/g, counter);
            if (options.data == void 0) {
                options.data = buildData(element.children, options);
            } else {
                formateData(options.data);
            }
            var uid = +new Date();
            var vmodel = avalon.define(data.menuId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.rootElement = element;
                    vm._oldActive = options.active;
                    vm._subMenus = {};
                    // 维护一个子menu列表，用对象，更好读写
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        '_subMenus',
                        '_oldActive',
                        'rootElement'
                    ];
                    var inited, outVmodel = vmodels && vmodels[1], clickKey = 'fromMenu' + uid;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        // 子menu的层次+1
                        if (outVmodel && outVmodel._depth != void 0) {
                            vmodel._depth = outVmodel._depth + 1;
                        }
                        element.innerHTML = vmodel.template;
                        if (vmodel._depth === 1) {
                            element.setAttribute('ms-hover-100', 'oni-helper-max-index');
                            avalon(element).addClass('oni-menu oni-helper-clearfix oni-helper-reset' + (vmodel.dir === 'v' ? ' oni-menu-vertical' : ''));
                        }
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        // mouseleave重置menu
                        vmodel.event === 'mouseenter' && avalon(element).bind('mouseleave', function (e) {
                            vmodel._restMenu(vmodel);
                        });
                        // 点击选中事件的时候，重置menu
                        if (vmodel.event === 'click') {
                            // 绑定一次
                            if (!widgetInit) {
                                widgetInit = {};
                                avalon(document).bind('click', bindClick);
                            }
                            widgetInit[clickKey] = function (e) {
                                vmodel._restMenu(vmodel);
                            };
                        }
                        // 各menu之间点击互不影响
                        vmodel._depth === 1 && avalon(element).bind('click', function (e) {
                            e && e.stopPropagation();
                        });
                    };
                    vm.$remove = function () {
                        delete widgetInit[clickKey];
                        element.innerHTML = element.textContent = '';
                    };
                    vm._canActive = function (menu, index) {
                        return vmodel.active === index && !menu.disabled;
                    };
                    //@interface activate(index)展开菜单索引为index的项目，index置为false,undefined则不会展开任一项目
                    vm.activate = function (e, index) {
                        var _index = index === void 0 ? e : index;
                        if (!vmodel.data[_index] || vmodel.data[_index].disabled === true || vmodel.disabled)
                            return;
                        vmodel._oldActive = vmodel.active;
                        // 切换menu，重置子menu状态
                        if (_index !== vmodel._oldActive) {
                            vmodel.resetSubMenus();
                        }
                        vmodel.active = _index;
                        // 事件触发
                        if (e && index !== void 0 && vmodel.event === 'click') {
                            var activeData = vmodel.getActiveList(), last = activeData[activeData.length - 1], node = hasSubMenu(this);
                            // state 1
                            // 有node
                            if (node) {
                                // state 2
                                // 有子menu的节点第一次被点击展开，阻止默认事件，之后不再阻止
                                if (last && last[1] === eval(this.getAttribute('data-index'))) {
                                    // state 3
                                    // 第一次点击
                                    if (vmodel._oldActive !== vmodel.active) {
                                        e && e.preventDefault();
                                        e && e.stopPropagation();
                                        return;
                                    }
                                }
                            }
                            // state 1 
                            // 非第一次点击，认为是选中这个拥有子menu的item
                            // state 2
                            // 没有子menu的节点被点击，冒泡到上层
                            // state 1
                            // 没有node
                            vmodel._onSelect.call(this, e, activeData);
                        }
                    };
                    // 冒泡到第一级menu进行处理
                    vm._onSelect = function (e, activeData) {
                        if (vmodel._depth === 1) {
                            var tar = e.srcElement || e.target;
                            while (tar && tar.tagName.toLowerCase() !== 'li') {
                                tar = tar.parentNode;
                            }
                            var ele = avalon(tar), d = ele.data(), _hasSubMenu = !!hasSubMenu(tar);
                            realSelect = activeData.slice(0, d.depth);
                            options.onSelect.call(tar, vmodel, realSelect, _hasSubMenu);
                            vmodel._restMenu(vmodel);
                        }
                    };
                    // event 为mouseenter的时候，点击进入这个分支
                    vm._ifEventIsMouseEnter = function (e, index) {
                        if (vmodel.event === 'click' || vmodel._depth !== 1)
                            return;
                        vmodel._onSelect(e, vmodel.getActiveList());
                    };
                    // event 为mouseenter的时候进入这个方法
                    vm._clickActive = function (e, index) {
                        if (vmodel.active !== index)
                            return;
                        // 阻止冒泡
                        // e && e.stopPropagation()
                        var ele = avalon(this), d = ele.data();
                        vmodel._onClickActive.call(this, e, vmodel.active, vmodel.data, d && d.sub);
                    };
                    // get node by data，根据数据反获取节点
                    vm._getNodeByData = function (activeData) {
                        if (activeData.length > 0) {
                            var sub = vmodel._subMenus[activeData[0]];
                            if (sub) {
                                return sub._getNodeByData(activeData.slice(1));
                            } else {
                                var children = vmodel.widgetElement.children, i = 0, counter = 0;
                                while (children[++i]) {
                                    var node = children[i - 1];
                                    if (node.tagName.toLowerCase() === 'li') {
                                        if (counter == vmodel.active)
                                            return node;
                                        counter++;
                                    }
                                }
                            }
                        }
                        return false;
                    };
                    //@interface getActiveList() 获取所有选中的menu list
                    vm.getActiveList = function (arr) {
                        var data = arr || [];
                        if (vmodel.active !== false && vmodel.data[vmodel.active]) {
                            data.push([
                                vmodel.data[vmodel.active].$model,
                                vmodel.active
                            ]);
                            var sub = vmodel._subMenus[vmodel.active];
                            sub && sub.getActiveList(data);
                        }
                        return data;
                    };
                    //@interface setActiveList(activeListArray) 设置级联menu的选项，可以一个数组，也可以使一个数字，或者"2,3,4"这样的字符串
                    vm.setActiveList = function (arr) {
                        if (!arr)
                            return;
                        if (!Array.isArray(arr))
                            var arr = [arr].join('').split(',');
                        if (!arr.length)
                            return;
                        vmodel.activate(eval(arr[0]));
                        if (vmodel.active === false) {
                            vmodel.resetSubMenus();
                            return;
                        }
                        if (!arr.length)
                            return;
                        var sub = vmodel._subMenus[vmodel.active];
                        sub && sub.setActiveList(arr.slice(1))    // if(vmodel._depth === 1) {
                                                           //     vmodel._onSelect({
                                                           //         srcElement: vmodel._getNodeByData(arr)
                                                           //     }, vmodel.getActiveList())
                                                           // }
;
                    };
                    // 是否有子menu
                    vm._hasSubMenu = function (menu) {
                        return !!(menu && menu.data && Array.isArray(menu.data) && menu.data.length);
                    };
                    // 处理级联子menu
                    vm._rescan = function () {
                        vmodel._subMenus = {};
                        var nodes = vmodel.widgetElement.children, counter = 0;
                        for (var i = 0, len = nodes.length; i < len; i++) {
                            var node = nodes[i];
                            if (node.nodeType === 1 && node.tagName.toLowerCase() === 'li') {
                                var menu = node.getElementsByTagName('ul')[0] || node.getElementsByTagName('ol')[0];
                                if (menu) {
                                    var ele = avalon(menu), d = ele.data();
                                    if (d.widget === 'menu') {
                                        var opt = avalon.mix({}, options), name = data.menuId + 'r' + getCnt();
                                        menu.setAttribute('ms-widget', 'menu, $' + uid + i);
                                        var subData = vmodel.data[d.widgetIndex], obj = {};
                                        if (subData) {
                                            obj = avalon.mix(opt, { data: subData.$model.data });
                                        }
                                        obj.index = d.widgetIndex;
                                        var subVmodel = avalon.define(name, function (svm) {
                                                svm.menu = obj;
                                                svm.$skipArray = ['menu'];
                                            });
                                        avalon.scan(menu, [
                                            subVmodel,
                                            vmodel
                                        ].concat(vmodels));
                                        vmodel._subMenus[counter] = avalon.vmodels['$' + uid + i];
                                    }
                                }
                                counter++;
                            }
                        }
                    };
                    // 重置所有子menu
                    vm.resetSubMenus = function () {
                        avalon.each(vmodel._subMenus, function (i, item) {
                            vmodel._restMenu(item);
                            // 迭代
                            item.resetSubMenus();
                        });
                    };
                    vm._restMenu = function (model) {
                        model.menuResetter(model);
                        model._oldActive = model.active;
                    };
                    vm._cutCounter = avalon.noop;
                    vm._canRemove = avalon.noop;
                });
            return vmodel;
        };
    widget.defaults = {
        active: false,
        //@config 将第几个项目设置为选中，级联情形下，会将设置应用给每一级menu，默认是false，一个都不选中，建议不要通过修改这个值来修改menu的选中状态，而是通过setActiveList接口来做
        //data: undefined, //@config menu的数据项，如果没有配置这个项目，则默认扫描元素中的li，以及li中的ul或者ol来创建级联菜单，数据结构形式 <pre>[/n{/ntitle: "html",/n data: [...],/n active: false,/n disabled: false/n}/n]</pre>，子元素如果包含有效的data属性表示拥有子菜单
        event: 'mouseenter',
        //@config  选中事件，默认mouseenter
        disabled: false,
        _depth: 1,
        index: 0,
        dir: 'h',
        //@config 方向，取值v,h，默认h是水平方向， v是竖直方向
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        menuResetter: function (vmodel) {
            vmodel.active = false;
        },
        //@config menuResetter(vmodel) 选中某个menu项之后调用的这个restter，默认是把menu重置为不选中
        getTemplate: function (tmpl, opts, tplName) {
            return tmpl;
        },
        //@config getTemplate(tpl, opts, tplName) 定制修改模板接口
        _menuTitle: function (title, tab, count, end) {
            return title;
        },
        onSelect: avalon.noop,
        //@config onSelect(vmodel, realSelect, _hasSubMenu) this指向选中的menu li元素，realSelect是选中menu项目的数组 <pre>[/n[data, active],/n[data2,active2]/n]</pre>，对应每一级的数据，及每一级的active值，_hasSubMenu表示this元素有无包含子menu
        cutEnd: '',
        $author: 'skipper@123'
    };
}
)();
},{"avalon":2}],36:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
tmpl = "<div class=\"oni-dropdown\"\n     ms-class=\"oni-dropdown-disabled:!enable\"\n     ms-class-1=\"oni-state-focus: focusClass\"\n     ms-css-width=\"{{width}}\"\n     ms-hover=\"oni-state-hover\"\n     ms-keydown=\"_keydown\"\n     tabindex=\"0\">\n    <div class=\"oni-dropdown-source\">\n        <div class=\"oni-dropdown-input\"\n             ms-title=\"title\" ms-css-width=\"titleWidth\" id=\"title-MS_OPTION_ID\">\n            <i class=\"oni-icon\"\n               ms-class=\"{{currentOption.data.iconClass}}\">{{currentOption.data.font|html}}</i>\n        </div>\n        <div class=\"oni-dropdown-icon-wrap\">\n            <i class=\"oni-dropdown-icon oni-icon oni-icon-angle-up\"\n               ms-if=\"toggle\">&#xf028;</i>\n            <i class=\"oni-dropdown-icon oni-icon oni-icon-angle-down\"\n               ms-if=\"!toggle\">&#xf032;</i>\n        </div>\n    </div>\n</div>\nMS_OPTION_TEMPLATE\n<div class=\"oni-dropdown\"\n     ms-class=\"oni-dropdown-menu:!multiple\"\n     ms-css-width=\"{{listWidth}}\"\n     ms-mouseenter=\"_listenter\"\n     ms-mouseleave=\"_listleave\"\n     ms-visible=\"toggle||multiple\">\n    <div class=\"oni-dropdown-menu-inner\"\n         ms-css-width=\"menuWidth\"\n         ms-css-height=\"menuHeight\"\n         ms-widget=\"scrollbar,scrollbar-MS_OPTION_ID\" id=\"menu-MS_OPTION_ID\">\n        <div class=\"oni-scrollbar-scroller\"\n             id=\"list-MS_OPTION_ID\">\n            <div ms-repeat=\"data\"  class=\"oni-dropdown-item\"\n                 data-repeat-rendered=\"updateScrollbar\"\n                 ms-click-12=\"_select($index, $event)\"\n                 ms-title=\"el.title||el.label\"\n                 ms-hover=\"oni-state-hover: el.enable\"\n                 ms-class-1=\"oni-state-disabled:!el.enable\"\n                 ms-class-2=\"oni-state-active:isActive(el) \"\n                 ms-class-4=\"oni-dropdown-group:el.group\"\n                 ms-class-5=\"oni-dropdown-divider:el.group && !$first\"\n                 data-repeat-rendered=\"updateScrollbar\"\n                    >{{el.label|sanitize|html}}</div>\n        </div>\n    </div>\n</div>\n";
innerRequire("../switchdropdown/avalon.switchdropdown");
innerRequire("../avalon.getModel");

module.exports = (
function () {
    //使用switchdropdown做代理，包装option，内部使用dropdown组件实现
    var widget = avalon.ui.miniswitch = function (element, data, vmodels) {
            var options = data.miniswitchOptions;
            var vmodel = avalon.define('miniswitch' + setTimeout('1'), function (vm) {
                    vm.$opts = options;
                    vm.$init = function (continueScan) {
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('\u8BF7\u5C3D\u5FEB\u5347\u5230avalon1.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                });
            avalon(element).attr('ms-widget', [
                'switchdropdown',
                data.miniswitchId,
                '$opts'
            ].join());
            return vmodel;
        };
    widget.version = '1.0';
    widget.defaults = {
        width: 40,
        //@config 自定义宽度
        listWidth: 100,
        //@config 自定义下拉列表的宽度
        height: 60,
        //@config 下拉列表的高度
        enable: true,
        //@config 组件是否可用
        readOnly: false,
        //@config 组件是否只读
        data: [],
        //@config 下拉列表显示的数据模型
        value: '',
        //@config 设置组件的初始值
        /**
         * @config 模板函数,方便用户自定义模板
         * @param str {String} 默认模板
         * @param opts {Object} VM
         * @returns {String} 新模板
         */
        getTemplate: function () {
            return tmpl;
        },
        onInit: avalon.noop
    };
}
)();
},{"../avalon.getModel":6,"../switchdropdown/avalon.switchdropdown":59,"avalon":2}],37:[function(innerRequire,module,exports){
/**
 * @cnName Promise组件
 * @enName mmPromise
 * @introduce
 *    <p>本模块提供的Promise完整实现ECMA262v6 的Promise规范，高级浏览器直接使用原生的Promise，低端浏览器则编码实现相同的功能和接口</p>
 */
 // 该文件仅供生成文档使用，实际使用请引用mmPromise.js
 /**
 @links
 */
},{}],38:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    //chrome36的原生Promise还多了一个defer()静态方法，允许不通过传参就能生成Promise实例，
    //另还多了一个chain(onSuccess, onFail)原型方法，意义不明
    //目前，firefox24, opera19也支持原生Promise(chrome32就支持了，但需要打开开关，自36起直接可用)
    //本模块提供的Promise完整实现ECMA262v6 的Promise规范
    //2015.3.12 支持async属性
    function ok(val) {
        return val;
    }
    function ng(e) {
        throw e;
    }
    function done(onSuccess) {
        //添加成功回调
        return this.then(onSuccess, ng);
    }
    function fail(onFail) {
        //添加出错回调
        return this.then(ok, onFail);
    }
    function defer() {
        var ret = {};
        ret.promise = new this(function (resolve, reject) {
            ret.resolve = resolve;
            ret.reject = reject;
        });
        return ret;
    }
    var msPromise = function (executor) {
        this._callbacks = [];
        var me = this;
        if (typeof this !== 'object')
            throw new TypeError('Promises must be constructed via new');
        if (typeof executor !== 'function')
            throw new TypeError('not a function');
        executor(function (value) {
            _resolve(me, value);
        }, function (reason) {
            _reject(me, reason);
        });
    };
    function fireCallbacks(promise, fn) {
        if (typeof promise.async === 'boolean') {
            var isAsync = promise.async;
        } else {
            isAsync = promise.async = true;
        }
        if (isAsync) {
            window.setTimeout(fn, 0);
        } else {
            fn();
        }
    }
    //返回一个已经处于`resolved`状态的Promise对象
    msPromise.resolve = function (value) {
        return new msPromise(function (resolve) {
            resolve(value);
        });
    };
    //返回一个已经处于`rejected`状态的Promise对象
    msPromise.reject = function (reason) {
        return new msPromise(function (resolve, reject) {
            reject(reason);
        });
    };
    msPromise.prototype = {
        //一个Promise对象一共有3个状态：
        //- `pending`：还处在等待状态，并没有明确最终结果
        //- `resolved`：任务已经完成，处在成功状态
        //- `rejected`：任务已经完成，处在失败状态
        constructor: msPromise,
        _state: 'pending',
        _fired: false,
        //判定是否已经被触发
        _fire: function (onSuccess, onFail) {
            if (this._state === 'rejected') {
                if (typeof onFail === 'function') {
                    onFail(this._value);
                } else {
                    throw this._value;
                }
            } else {
                if (typeof onSuccess === 'function') {
                    onSuccess(this._value);
                }
            }
        },
        _then: function (onSuccess, onFail) {
            if (this._fired) {
                //在已有Promise上添加回调
                var me = this;
                fireCallbacks(me, function () {
                    me._fire(onSuccess, onFail);
                });
            } else {
                this._callbacks.push({
                    onSuccess: onSuccess,
                    onFail: onFail
                });
            }
        },
        then: function (onSuccess, onFail) {
            onSuccess = typeof onSuccess === 'function' ? onSuccess : ok;
            onFail = typeof onFail === 'function' ? onFail : ng;
            var me = this;
            //在新的Promise上添加回调
            var nextPromise = new msPromise(function (resolve, reject) {
                    me._then(function (value) {
                        try {
                            value = onSuccess(value);
                        } catch (e) {
                            // https://promisesaplus.com/#point-55
                            reject(e);
                            return;
                        }
                        resolve(value);
                    }, function (value) {
                        try {
                            value = onFail(value);
                        } catch (e) {
                            reject(e);
                            return;
                        }
                        resolve(value);
                    });
                });
            for (var i in me) {
                if (!personal[i]) {
                    nextPromise[i] = me[i];
                }
            }
            return nextPromise;
        },
        'done': done,
        'catch': fail,
        'fail': fail
    };
    var personal = {
            _state: 1,
            _fired: 1,
            _value: 1,
            _callbacks: 1
        };
    function _resolve(promise, value) {
        //触发成功回调
        if (promise._state !== 'pending')
            return;
        if (value && typeof value.then === 'function') {
            //thenable对象使用then，Promise实例使用_then
            var method = value instanceof msPromise ? '_then' : 'then';
            value[method](function (val) {
                _transmit(promise, val, true);
            }, function (reason) {
                _transmit(promise, reason, false);
            });
        } else {
            _transmit(promise, value, true);
        }
    }
    function _reject(promise, value) {
        //触发失败回调
        if (promise._state !== 'pending')
            return;
        _transmit(promise, value, false);
    }
    //改变Promise的_fired值，并保持用户传参，触发所有回调
    function _transmit(promise, value, isResolved) {
        promise._fired = true;
        promise._value = value;
        promise._state = isResolved ? 'fulfilled' : 'rejected';
        fireCallbacks(promise, function () {
            promise._callbacks.forEach(function (data) {
                promise._fire(data.onSuccess, data.onFail);
            });
        });
    }
    function _some(any, iterable) {
        iterable = Array.isArray(iterable) ? iterable : [];
        var n = 0, result = [], end;
        return new msPromise(function (resolve, reject) {
            // 空数组直接resolve
            if (!iterable.length)
                resolve();
            function loop(a, index) {
                a.then(function (ret) {
                    if (!end) {
                        result[index] = ret;
                        //保证回调的顺序
                        n++;
                        if (any || n >= iterable.length) {
                            resolve(any ? ret : result);
                            end = true;
                        }
                    }
                }, function (e) {
                    end = true;
                    reject(e);
                });
            }
            for (var i = 0, l = iterable.length; i < l; i++) {
                loop(iterable[i], i);
            }
        });
    }
    msPromise.all = function (iterable) {
        return _some(false, iterable);
    };
    msPromise.race = function (iterable) {
        return _some(true, iterable);
    };
    msPromise.defer = defer;
    avalon.Promise = msPromise;
    var nativePromise = window.Promise;
    if (/native code/.test(nativePromise)) {
        nativePromise.prototype.done = done;
        nativePromise.prototype.fail = fail;
        if (!nativePromise.defer) {
            //chrome实现的私有方法
            nativePromise.defer = defer;
        }
    }
    return window.Promise = nativePromise || msPromise;
}
)();
},{"avalon":2}],39:[function(innerRequire,module,exports){
/**
 *
 * @cnName ajax请求
 * @enName mmRequest
 * @introduce
 <p>avalon AJAX组件</p>
 它提供如下方法
<p>avalon.ajax 要求传入一个对象， 对象要有url, type, success, dataType等属性，这与jQuery的设置保持一致
<p>avlaon.get( url [, data ] [, success(data, textStatus, XHR) ] [, dataType ] )
<p>avlaon.post( url [, data ] [, success(data, textStatus, XHR) ] [, dataType ] )
<p>avlaon.upload( url, form [,data] [,success(data, textStatus, XHR)] [, dataType])
<p>avalon.getJSON( url [, data ] [, success( data, textStatus, jqXHR ) ] )
<p>avalon.getScript( url [, success() ] )
<p>avalon.param(obj) 将一个对象转换为字符串


<p>avalon.unparam(str) 将一个字符串转换为对象
```javascript
   var b = avalon.unparam("a=1&b=2")
    console.log(b) ==> {a: "1", b: "2"}
    var b2 = avalon.unparam("a[]=1&a[]=2&a[]=3&d=false")
   console.log(b2) ==> {a: ["1","2","3"], d: false}
```
<p>avalon.serializ(form)  将表单元素变字符串

用法与jQuery的同名方法用法完全一样，将avalon.js, mmRequest.js, mmDeferred.js放到同一目录下，然后
```html

<!DOCTYPE html>
<html>
    <head>
        <title></title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <script src="avalon.js"></script>
        <!--不能直接用script引入mmRequest.js-->
        <script>

            var avalonAjax
            var model = avalon.define("test", function(vm) {
                vm.username = ""
                vm.password = ""
                vm.email = ""
                vm.ajax = function(e) {
                    if (avalonAjax) {
                        avalon.post("/registry", avalon.serialize(this), function(a) {
                            alert(a)
                        }, "text")
                    }
                    e.preventDefault()
                }
            })

            innerRequire(["./mmRequest"], function(avalon) {
                avalonAjax = avalon.ajax
                avalon.log(avalonAjax)
            })

        </script>
    </head>
    <body>
        <h3>测试AJAX</h3>
        <ul>
            <li>avalon.ajax</li>
            <li>avalon.post</li>
            <li>avalon.get</li>
            <li>avalon.upload</li>
        </ul>
        <form action="/registry"  ms-controller="test" ms-on-submit="ajax" >
            <div>帐号:<input name="username" ms-duplex="username"></div>
            <div>密码:<input name="password" ms-duplex="password"></div>
            <div>邮箱:<input name="email" ms-duplex="email"></div>
            <button type="submit">提交</button>
        </form>
    </body>
</html>
```
如果想上传东西,可以使用
```javascript
  avalon.ajax({
    contentType: "multipart/form-data",
    data: formData //这是一个formData 对象,详看这里https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects
    type: "post",//get也可以
    url: url,
    success: callback,
    dataType: dataType //你想返回什么类型的数据给你

 })

  //或者用upload方法
  avalon.upload(url, form, data, callback?, dataType?)
```
 */
},{}],40:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");
innerRequire("../mmPromise/mmPromise");

module.exports = (
function () {
    var global = this || (0, eval)('this');
    var DOC = global.document;
    var encode = encodeURIComponent;
    var decode = decodeURIComponent;
    var rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/;
    var rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm;
    var rnoContent = /^(?:GET|HEAD)$/;
    var rprotocol = /^\/\//;
    var rhash = /#.*$/;
    var rquery = /\?/;
    var rjsonp = /(=)\?(?=&|$)|\?\?/;
    var r20 = /%20/g;
    var originAnchor = document.createElement('a');
    originAnchor.href = location.href;
    //告诉WEB服务器自己接受什么介质类型，*/* 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。
    var accepts = {
            xml: 'application/xml, text/xml',
            html: 'text/html',
            text: 'text/plain',
            json: 'application/json, text/javascript',
            script: 'text/javascript, application/javascript',
            '*': ['*/'] + ['*']    //避免被压缩掉
        };
    function IE() {
        if (window.VBArray) {
            var mode = document.documentMode;
            return mode ? mode : window.XMLHttpRequest ? 7 : 6;
        } else {
            return 0;
        }
    }
    var useOnload = IE() === 0 || IE() > 8;
    function parseJS(code) {
        var indirect = eval;
        code = code.trim();
        if (code) {
            if (code.indexOf('use strict') === 1) {
                var script = document.createElement('script');
                script.text = code;
                head.appendChild(script).parentNode.removeChild(script);
            } else {
                indirect(code);
            }
        }
    }
    if (!String.prototype.startsWith) {
        String.prototype.startsWith = function (searchString, position) {
            position = position || 0;
            return this.lastIndexOf(searchString, position) === position;
        };
    }
    var head = DOC.getElementsByTagName('head')[0];
    //HEAD元素
    var isLocal = false;
    try {
        //在IE下如果重置了document.domain，直接访问window.location会抛错，但用document.URL就ok了
        //http://www.cnblogs.com/WuQiang/archive/2012/09/21/2697474.html
        isLocal = rlocalProtocol.test(location.protocol);
    } catch (e) {
    }
    new function () {
        //http://www.cnblogs.com/rubylouvre/archive/2010/04/20/1716486.html
        var s = [
                'XMLHttpRequest',
                'ActiveXObject(\'MSXML2.XMLHTTP.6.0\')',
                'ActiveXObject(\'MSXML2.XMLHTTP.3.0\')',
                'ActiveXObject(\'MSXML2.XMLHTTP\')',
                'ActiveXObject(\'Microsoft.XMLHTTP\')'
            ];
        s[0] = IE() < 8 && IE() !== 0 && isLocal ? '!' : s[0];
        //IE下只能使用ActiveXObject
        for (var i = 0, axo; axo = s[i++];) {
            try {
                if (eval('new ' + axo)) {
                    avalon.xhr = new Function('return new ' + axo);
                    break;
                }
            } catch (e) {
            }
        }
    }();
    var supportCors = 'withCredentials' in avalon.xhr();
    function parseXML(data, xml, tmp) {
        try {
            var mode = document.documentMode;
            if (window.DOMParser && (!mode || mode > 8)) {
                // Standard
                tmp = new DOMParser();
                xml = tmp.parseFromString(data, 'text/xml');
            } else {
                // IE
                xml = new ActiveXObject('Microsoft.XMLDOM');
                //"Microsoft.XMLDOM"
                xml.async = 'false';
                xml.loadXML(data);
            }
        } catch (e) {
            xml = void 0;
        }
        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length) {
            avalon.error('Invalid XML: ' + data);
        }
        return xml;
    }
    //ajaxExtend是一个非常重要的内部方法，负责将用法参数进行规整化
    //1. data转换为字符串
    //2. type转换为大写
    //3. url正常化，加querystring, 加时间戮
    //4. 判定有没有跨域
    //5. 添加hasContent参数
    var defaults = {
            type: 'GET',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            async: true,
            jsonp: 'callback'
        };
    function ajaxExtend(opts) {
        opts = avalon.mix({}, defaults, opts);
        opts.type = opts.type.toUpperCase();
        var querystring = typeof opts.data === 'string' ? opts.data : avalon.param(opts.data);
        opts.querystring = querystring || '';
        opts.url = opts.url.replace(rhash, '').replace(rprotocol, location.protocol + '//');
        if (typeof opts.crossDomain !== 'boolean') {
            //判定是否跨域
            var urlAnchor = document.createElement('a');
            // Support: IE6-11+
            // IE throws exception if url is malformed, e.g. http://example.com:80x/
            try {
                urlAnchor.href = opts.url;
                // in IE7-, get the absolute path
                var absUrl = !'1'[0] ? urlAnchor.getAttribute('href', 4) : urlAnchor.href;
                urlAnchor.href = absUrl;
                opts.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
            } catch (e) {
                opts.crossDomain = true;
            }
        }
        opts.hasContent = !rnoContent.test(opts.type);
        //是否为post请求
        if (!opts.hasContent) {
            if (querystring) {
                //如果为GET请求,则参数依附于url上
                opts.url += (rquery.test(opts.url) ? '&' : '?') + querystring;
            }
            if (opts.cache === false) {
                //添加时间截
                opts.url += (rquery.test(opts.url) ? '&' : '?') + '_time=' + (new Date() - 0);
            }
        }
        return opts;
    }
    /**
     * 伪XMLHttpRequest类,用于屏蔽浏览器差异性
     * var ajax = new(self.XMLHttpRequest||ActiveXObject)("Microsoft.XMLHTTP")
     * ajax.onreadystatechange = function(){
     *   if (ajax.readyState==4 && ajax.status==200){
     *        alert(ajax.responseText)
     *   }
     * }
     * ajax.open("POST", url, true) 
     * ajax.send("key=val&key1=val2") 
     */
    var XHRMethods = {
            setRequestHeader: function (name, value) {
                this.requestHeaders[name] = value;
                return this;
            },
            getAllResponseHeaders: function () {
                return this.readyState === 4 ? this.responseHeadersString : null;
            },
            getResponseHeader: function (name, match) {
                if (this.readyState === 4) {
                    while (match = rheaders.exec(this.responseHeadersString)) {
                        this.responseHeaders[match[1]] = match[2];
                    }
                    match = this.responseHeaders[name];
                }
                return match === undefined ? null : match;
            },
            overrideMimeType: function (type) {
                this.mimeType = type;
                return this;
            },
            // 中止请求
            abort: function (statusText) {
                statusText = statusText || 'abort';
                if (this.transport) {
                    this.respond(0, statusText);
                }
                return this;
            },
            /**
         * 用于派发success,error,complete等回调
         * http://www.cnblogs.com/rubylouvre/archive/2011/05/18/2049989.html
         * @param {Number} status 状态码
         * @param {String} statusText 对应的扼要描述
         */
            dispatch: function (status, nativeStatusText) {
                var statusText = nativeStatusText;
                // 只能执行一次，防止重复执行
                if (!this.transport) {
                    //2:已执行回调
                    return;
                }
                this.readyState = 4;
                var isSuccess = status >= 200 && status < 300 || status === 304;
                if (isSuccess) {
                    if (status === 204) {
                        statusText = 'nocontent';
                    } else if (status === 304) {
                        statusText = 'notmodified';
                    } else {
                        //如果浏览器能直接返回转换好的数据就最好不过,否则需要手动转换
                        if (typeof this.response === 'undefined') {
                            var dataType = this.options.dataType || this.options.mimeType;
                            if (!dataType && this.responseText || this.responseXML) {
                                //如果没有指定dataType，则根据mimeType或Content-Type进行揣测
                                dataType = this.getResponseHeader('Content-Type') || '';
                                dataType = dataType.match(/json|xml|script|html/) || ['text'];
                                dataType = dataType[0];
                            }
                            var responseText = this.responseText || '', responseXML = this.responseXML || '';
                            try {
                                this.response = avalon.ajaxConverters[dataType].call(this, responseText, responseXML);
                            } catch (e) {
                                isSuccess = false;
                                this.error = e;
                                statusText = 'parsererror';
                            }
                        }
                    }
                }
                this.status = status;
                this.statusText = statusText + '';
                if (this.timeoutID) {
                    clearTimeout(this.timeoutID);
                    delete this.timeoutID;
                }
                this._transport = this.transport;
                // 到这要么成功，调用success, 要么失败，调用 error, 最终都会调用 complete
                if (isSuccess) {
                    this._resolve([
                        this.response,
                        statusText,
                        this
                    ]);
                } else {
                    this._reject([
                        this,
                        statusText,
                        this.error
                    ]);
                }
                delete this.transport;
            }
        };
    //ajax主函数
    avalon.ajax = function (opts, promise) {
        if (!opts || !opts.url) {
            avalon.error('\u53C2\u6570\u5FC5\u987B\u4E3AObject\u5E76\u4E14\u62E5\u6709url\u5C5E\u6027');
        }
        opts = ajaxExtend(opts);
        //处理用户参数，比如生成querystring, type大写化
        //创建一个伪XMLHttpRequest,能处理complete,success,error等多投事件
        var XHRProperties = {
                responseHeadersString: '',
                responseHeaders: {},
                requestHeaders: {},
                querystring: opts.querystring,
                readyState: 0,
                uniqueID: ('' + Math.random()).replace(/0\./, ''),
                status: 0
            };
        var _reject, _resolve;
        var promise = new avalon.Promise(function (resolve, reject) {
                _resolve = resolve;
                _reject = reject;
            });
        promise.options = opts;
        promise._reject = _reject;
        promise._resolve = _resolve;
        var doneList = [], failList = [];
        Array('done', 'fail', 'always').forEach(function (method) {
            promise[method] = function (fn) {
                if (typeof fn === 'function') {
                    if (method !== 'fail')
                        doneList.push(fn);
                    if (method !== 'done')
                        failList.push(fn);
                }
                return this;
            };
        });
        var isSync = opts.async === false;
        if (isSync) {
            avalon.log('warnning:\u4E0Ejquery1.8\u4E00\u6837,async:false\u8FD9\u914D\u7F6E\u5DF2\u7ECF\u88AB\u5E9F\u5F03');
            promise.async = false;
        }
        avalon.mix(promise, XHRProperties, XHRMethods);
        promise.then(function (value) {
            value = Array.isArray(value) ? value : value === void 0 ? [] : [value];
            for (var i = 0, fn; fn = doneList[i++];) {
                fn.apply(promise, value);
            }
            return value;
        }, function (value) {
            value = Array.isArray(value) ? value : value === void 0 ? [] : [value];
            for (var i = 0, fn; fn = failList[i++];) {
                fn.apply(promise, value);
            }
            return value;
        });
        promise.done(opts.success).fail(opts.error).always(opts.complete);
        var dataType = opts.dataType;
        //目标返回数据类型
        var transports = avalon.ajaxTransports;
        if ((opts.crossDomain && !supportCors || rjsonp.test(opts.url)) && dataType === 'json' && opts.type === 'GET') {
            dataType = opts.dataType = 'jsonp';
        }
        var name = opts.form ? 'upload' : dataType;
        var transport = transports[name] || transports.xhr;
        avalon.mix(promise, transport);
        //取得传送器的request, respond, preproccess
        if (promise.preproccess) {
            //这用于jsonp upload传送器
            dataType = promise.preproccess() || dataType;
        }
        //设置首部 1、Content-Type首部
        if (opts.contentType) {
            promise.setRequestHeader('Content-Type', opts.contentType);
        }
        //2.处理Accept首部
        promise.setRequestHeader('Accept', accepts[dataType] ? accepts[dataType] + ', */*; q=0.01' : accepts['*']);
        for (var i in opts.headers) {
            //3. 处理headers里面的首部
            promise.setRequestHeader(i, opts.headers[i]);
        }
        // 4.处理超时
        if (opts.async && opts.timeout > 0) {
            promise.timeoutID = setTimeout(function () {
                promise.abort('timeout');
                promise.dispatch(0, 'timeout');
            }, opts.timeout);
        }
        promise.request();
        return promise;
    };
    'get,post'.replace(avalon.rword, function (method) {
        avalon[method] = function (url, data, callback, type) {
            if (typeof data === 'function') {
                type = type || callback;
                callback = data;
                data = void 0;
            }
            return avalon.ajax({
                type: method,
                url: url,
                data: data,
                success: callback,
                dataType: type
            });
        };
    });
    function ok(val) {
        return val;
    }
    function ng(e) {
        throw e;
    }
    avalon.getScript = function (url, callback) {
        return avalon.get(url, null, callback, 'script');
    };
    avalon.getJSON = function (url, data, callback) {
        return avalon.get(url, data, callback, 'json');
    };
    avalon.upload = function (url, form, data, callback, dataType) {
        if (typeof data === 'function') {
            dataType = callback;
            callback = data;
            data = void 0;
        }
        return avalon.ajax({
            url: url,
            type: 'post',
            dataType: dataType,
            form: form,
            data: data,
            success: callback
        });
    };
    avalon.ajaxConverters = {
        //转换器，返回用户想要做的数据
        text: function (text) {
            // return text || "";
            return text;
        },
        xml: function (text, xml) {
            return xml !== void 0 ? xml : parseXML(text);
        },
        html: function (text) {
            return avalon.parseHTML(text)    //一个文档碎片,方便直接插入DOM树
;
        },
        json: function (text) {
            if (!avalon.parseJSON) {
                avalon.log('avalon.parseJSON\u4E0D\u5B58\u5728,\u8BF7\u5347\u7EA7\u5230\u6700\u65B0\u7248');
            }
            return avalon.parseJSON(text);
        },
        script: function (text) {
            parseJS(text);
            return text;
        },
        jsonp: function () {
            var json, callbackName;
            if (this.jsonpCallback.startsWith('avalon.')) {
                callbackName = this.jsonpCallback.replace(/avalon\./, '');
                json = avalon[callbackName];
                delete avalon[callbackName];
            } else {
                json = window[this.jsonpCallback];
            }
            return json;
        }
    };
    avalon.param = function (a) {
        var prefix, s = [], add = function (key, value) {
                value = value == null ? '' : value;
                s[s.length] = encode(key) + '=' + encode(value);
            };
        if (Array.isArray(a) || !avalon.isPlainObject(a)) {
            avalon.each(a, function (subKey, subVal) {
                add(subKey, subVal);
            });
        } else {
            for (prefix in a) {
                paramInner(prefix, a[prefix], add);
            }
        }
        // Return the resulting serialization
        return s.join('&').replace(r20, '+');
    };
    function paramInner(prefix, obj, add) {
        var name;
        if (Array.isArray(obj)) {
            // Serialize array item.
            avalon.each(obj, function (i, v) {
                paramInner(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, add);
            });
        } else if (avalon.isPlainObject(obj)) {
            // Serialize object item.
            for (name in obj) {
                paramInner(prefix + '[' + name + ']', obj[name], add);
            }
        } else {
            // Serialize scalar item.
            add(prefix, obj);
        }
    }
    //将一个字符串转换为对象
    avalon.unparam = function (input) {
        var items, temp, expBrackets = /\[(.*?)\]/g, expVarname = /(.+?)\[/, result = {};
        if ((temp = avalon.type(input)) != 'string' || temp == 'string' && !temp.length)
            return {};
        if (input.indexOf('?') !== -1) {
            input = input.split('?').pop();
        }
        items = decode(input).split('&');
        if (!(temp = items.length) || temp == 1 && temp === '')
            return result;
        items.forEach(function (item) {
            if (!item.length)
                return;
            temp = item.split('=');
            var key = temp.shift(), value = temp.join('=').replace(/\+/g, ' '), size, link, subitems = [];
            if (!key.length)
                return;
            while (temp = expBrackets.exec(key))
                subitems.push(temp[1]);
            if (!(size = subitems.length)) {
                result[key] = value;
                return;
            }
            size--;
            temp = expVarname.exec(key);
            if (!temp || !(key = temp[1]) || !key.length)
                return;
            if (avalon.type(result[key]) !== 'object')
                result[key] = {};
            link = result[key];
            avalon.each(subitems, function (subindex, subitem) {
                if (!(temp = subitem).length) {
                    temp = 0;
                    avalon.each(link, function (num) {
                        if (!isNaN(num) && num >= 0 && num % 1 === 0 && num >= temp)
                            temp = Number(num) + 1;
                    });
                }
                if (subindex == size) {
                    link[temp] = value;
                } else if (avalon.type(link[temp]) !== 'object') {
                    link = link[temp] = {};
                } else {
                    link = link[temp];
                }
            });
        });
        return result;
    };
    var rinput = /select|input|button|textarea/i;
    var rcheckbox = /radio|checkbox/;
    var rline = /\r?\n/g;
    function trimLine(val) {
        return val.replace(rline, '\r\n');
    }
    //表单元素变字符串, form为一个元素节点
    avalon.serialize = function (form) {
        var json = {};
        // 不直接转换form.elements，防止以下情况：   <form > <input name="elements"/><input name="test"/></form>
        Array.prototype.filter.call(form.getElementsByTagName('*'), function (el) {
            if (rinput.test(el.nodeName) && el.name && !el.disabled) {
                return rcheckbox.test(el.type) ? el.checked : true    //只处理拥有name并且没有disabled的表单元素
;
            }
        }).forEach(function (el) {
            var val = avalon(el).val();
            val = Array.isArray(val) ? val.map(trimLine) : trimLine(val);
            var name = el.name;
            if (name in json) {
                if (Array.isArray(val)) {
                    json[name].push(val);
                } else {
                    json[name] = [
                        json[name],
                        val
                    ];
                }
            } else {
                json[name] = val;
            }
        });
        return avalon.param(json, false)    // 名值键值对序列化,数组元素名字前不加 []
;
    };
    var transports = avalon.ajaxTransports = {
            xhr: {
                //发送请求
                request: function () {
                    var self = this;
                    var opts = this.options;
                    var transport = this.transport = new avalon.xhr();
                    transport.open(opts.type, opts.url, opts.async, opts.username, opts.password);
                    if (this.mimeType && transport.overrideMimeType) {
                        transport.overrideMimeType(this.mimeType);
                    }
                    //IE6下，如果transport中没有withCredentials，直接设置会报错
                    if (opts.crossDomain && 'withCredentials' in transport) {
                        transport.withCredentials = true;
                    }
                    /*
                 * header 中设置 X-Requested-With 用来给后端做标示：
                 * 这是一个 ajax 请求。
                 *
                 * 在 Chrome、Firefox 3.5+ 和 Safari 4+ 下，
                 * 在进行跨域请求时设置自定义 header，会触发 preflighted requests，
                 * 会预先发送 method 为 OPTIONS 的请求。
                 *
                 * 于是，如果跨域，禁用此功能。
                 */
                    if (!opts.crossDomain) {
                        this.requestHeaders['X-Requested-With'] = 'XMLHttpRequest';
                    }
                    for (var i in this.requestHeaders) {
                        transport.setRequestHeader(i, this.requestHeaders[i] + '');
                    }
                    /*
                 * progress
                 */
                    if (opts.progressCallback) {
                        // 判断是否 ie6-9
                        var isOldIE = document.all && !window.atob;
                        if (!isOldIE) {
                            transport.upload.onprogress = opts.progressCallback;
                        }
                    }
                    var dataType = opts.dataType;
                    if ('responseType' in transport && /^(blob|arraybuffer|text)$/.test(dataType)) {
                        transport.responseType = dataType;
                        this.useResponseType = true;
                    }
                    //必须要支持 FormData 和 file.fileList 的浏览器 才能用 xhr 发送
                    //标准规定的 multipart/form-data 发送必须用 utf-8 格式， 记得 ie 会受到 document.charset 的影响
                    transport.send(opts.hasContent && (this.formdata || this.querystring) || null);
                    //在同步模式中,IE6,7可能会直接从缓存中读取数据而不会发出请求,因此我们需要手动发出请求
                    if (!opts.async || transport.readyState === 4) {
                        this.respond();
                    } else {
                        if (useOnload) {
                            //如果支持onerror, onload新API
                            transport.onload = transport.onerror = function (e) {
                                this.readyState = 4;
                                //IE9+
                                this.status = e.type === 'load' ? 200 : 500;
                                self.respond();
                            };
                        } else {
                            transport.onreadystatechange = function () {
                                self.respond();
                            };
                        }
                    }
                },
                //用于获取原始的responseXMLresponseText 修正status statusText
                //第二个参数为1时中止清求
                respond: function (event, forceAbort) {
                    var transport = this.transport;
                    if (!transport) {
                        return;
                    }
                    // by zilong：避免abort后还继续派发onerror等事件
                    if (forceAbort && this.timeoutID) {
                        clearTimeout(this.timeoutID);
                        delete this.timeoutID;
                    }
                    try {
                        var completed = transport.readyState === 4;
                        if (forceAbort || completed) {
                            transport.onreadystatechange = avalon.noop;
                            if (useOnload) {
                                //IE6下对XHR对象设置onerror属性可能报错
                                transport.onerror = transport.onload = null;
                            }
                            if (forceAbort) {
                                if (!completed && typeof transport.abort === 'function') {
                                    // 完成以后 abort 不要调用
                                    transport.abort();
                                }
                            } else {
                                var status = transport.status;
                                //设置responseText
                                var text = transport.responseText;
                                this.responseText = typeof text === 'string' ? text : void 0;
                                //设置responseXML
                                try {
                                    //当responseXML为[Exception: DOMException]时，
                                    //访问它会抛“An attempt was made to use an object that is not, or is no longer, usable”异常
                                    var xml = transport.responseXML;
                                    this.responseXML = xml.documentElement;
                                } catch (e) {
                                }
                                //设置response
                                if (this.useResponseType) {
                                    this.response = transport.response;
                                }
                                //设置responseHeadersString
                                this.responseHeadersString = transport.getAllResponseHeaders();
                                try {
                                    //火狐在跨城请求时访问statusText值会抛出异常
                                    var statusText = transport.statusText;
                                } catch (e) {
                                    this.error = e;
                                    statusText = 'firefoxAccessError';
                                }
                                //用于处理特殊情况,如果是一个本地请求,只要我们能获取数据就假当它是成功的
                                if (!status && isLocal && !this.options.crossDomain) {
                                    status = this.responseText ? 200 : 404    //IE有时会把204当作为1223
;
                                } else if (status === 1223) {
                                    status = 204;
                                }
                                this.dispatch(status, statusText);
                            }
                        }
                    } catch (err) {
                        // 如果网络问题时访问XHR的属性，在FF会抛异常
                        // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                        if (!forceAbort) {
                            this.dispatch(500, err);
                        }
                    }
                }
            },
            jsonp: {
                preproccess: function () {
                    var opts = this.options;
                    var name = this.jsonpCallback = opts.jsonpCallback || 'avalon.jsonp' + setTimeout('1');
                    if (rjsonp.test(opts.url)) {
                        opts.url = opts.url.replace(rjsonp, '$1' + name);
                    } else {
                        opts.url = opts.url + (rquery.test(opts.url) ? '&' : '?') + opts.jsonp + '=' + name;
                    }
                    //将后台返回的json保存在惰性函数中
                    if (name.startsWith('avalon.')) {
                        name = name.replace(/avalon\./, '');
                        avalon[name] = function (json) {
                            avalon[name] = json;
                        };
                    } else {
                        window[name] = function (json) {
                            window[name] = json;
                        };
                    }
                    return 'script';
                }
            },
            script: {
                request: function () {
                    var opts = this.options;
                    var node = this.transport = DOC.createElement('script');
                    if (opts.charset) {
                        node.charset = opts.charset;
                    }
                    var self = this;
                    node.onerror = node[useOnload ? 'onload' : 'onreadystatechange'] = function () {
                        self.respond();
                    };
                    node.src = opts.url;
                    head.insertBefore(node, head.firstChild);
                },
                respond: function (event, forceAbort) {
                    var node = this.transport;
                    if (!node) {
                        return;
                    }
                    // by zilong：避免abort后还继续派发onerror等事件
                    if (forceAbort && this.timeoutID) {
                        clearTimeout(this.timeoutID);
                        delete this.timeoutID;
                    }
                    var execute = /loaded|complete|undefined/i.test(node.readyState);
                    if (forceAbort || execute) {
                        node.onerror = node.onload = node.onreadystatechange = null;
                        var parent = node.parentNode;
                        if (parent) {
                            parent.removeChild(node);
                        }
                        if (!forceAbort) {
                            var args;
                            if (this.jsonpCallback) {
                                var jsonpCallback = this.jsonpCallback.startsWith('avalon.') ? avalon[this.jsonpCallback.replace(/avalon\./, '')] : window[this.jsonpCallback];
                                args = typeof jsonpCallback === 'function' ? [
                                    500,
                                    'error'
                                ] : [
                                    200,
                                    'success'
                                ];
                            } else {
                                args = [
                                    200,
                                    'success'
                                ];
                            }
                            this.dispatch.apply(this, args);
                        }
                    }
                }
            },
            upload: {
                preproccess: function () {
                    var opts = this.options, formdata;
                    if (typeof opts.form.append === 'function') {
                        //简单判断opts.form是否为FormData
                        formdata = opts.form;
                        opts.contentType = '';
                    } else {
                        formdata = new FormData(opts.form)    //将二进制什么一下子打包到formdata
;
                    }
                    avalon.each(opts.data, function (key, val) {
                        formdata.append(key, val)    //添加客外数据
;
                    });
                    this.formdata = formdata;
                }
            }
        };
    avalon.mix(transports.jsonp, transports.script);
    avalon.mix(transports.upload, transports.xhr);
    if (!window.FormData) {
        var str = 'Function BinaryToArray(binary)\r\n                 Dim oDic\r\n                 Set oDic = CreateObject("scripting.dictionary")\r\n                 length = LenB(binary) - 1\r\n                 For i = 1 To length\r\n                     oDic.add i, AscB(MidB(binary, i, 1))\r\n                 Next\r\n                 BinaryToArray = oDic.Items\r\n              End Function';
        execScript(str, 'VBScript');
        avalon.fixAjax = function () {
            avalon.ajaxConverters.arraybuffer = function () {
                var body = this.tranport && this.tranport.responseBody;
                if (body) {
                    return new VBArray(BinaryToArray(body)).toArray();
                }
            };
            function createIframe(ID) {
                var iframe = avalon.parseHTML('<iframe ' + ' id=\'' + ID + '\'' + ' name=\'' + ID + '\'' + ' style=\'position:absolute;left:-9999px;top:-9999px;\'/>').firstChild;
                return (DOC.body || DOC.documentElement).insertBefore(iframe, null);
            }
            function addDataToForm(form, data) {
                var ret = [], d, isArray, vs, i, e;
                for (d in data) {
                    isArray = Array.isArray(data[d]);
                    vs = isArray ? data[d] : [data[d]];
                    // 数组和原生一样对待，创建多个同名输入域
                    for (i = 0; i < vs.length; i++) {
                        e = DOC.createElement('input');
                        e.type = 'hidden';
                        e.name = d;
                        e.value = vs[i];
                        form.appendChild(e);
                        ret.push(e);
                    }
                }
                return ret;
            }
            //https://github.com/codenothing/Pure-Javascript-Upload/blob/master/src/upload.js
            avalon.ajaxTransports.upload = {
                request: function () {
                    var self = this;
                    var opts = this.options;
                    var ID = 'iframe-upload-' + this.uniqueID;
                    var form = opts.form;
                    var iframe = this.transport = createIframe(ID);
                    //form.enctype的值
                    //1:application/x-www-form-urlencoded   在发送前编码所有字符（默认）
                    //2:multipart/form-data 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。
                    //3:text/plain  空格转换为 "+" 加号，但不对特殊字符编码。
                    var backups = {
                            target: form.target || '',
                            action: form.action || '',
                            enctype: form.enctype,
                            method: form.method
                        };
                    var fields = opts.data ? addDataToForm(form, opts.data) : [];
                    //必须指定method与enctype，要不在FF报错
                    //表单包含文件域时，如果缺少 method=POST 以及 enctype=multipart/form-data，
                    // 设置target到隐藏iframe，避免整页刷新
                    form.target = ID;
                    form.action = opts.url;
                    form.method = 'POST';
                    form.enctype = 'multipart/form-data';
                    this.uploadcallback = avalon.bind(iframe, 'load', function (event) {
                        self.respond(event);
                    });
                    form.submit();
                    //还原form的属性
                    for (var i in backups) {
                        form[i] = backups[i];
                    }
                    //移除之前动态添加的节点
                    fields.forEach(function (input) {
                        form.removeChild(input);
                    });
                },
                respond: function (event) {
                    var node = this.transport, child;
                    // 防止重复调用,成功后 abort
                    if (!node) {
                        return;
                    }
                    if (event && event.type === 'load') {
                        var doc = node.contentWindow.document;
                        this.responseXML = doc;
                        if (doc.body) {
                            //如果存在body属性,说明不是返回XML
                            this.responseText = doc.body.innerHTML;
                            //当MIME为'application/javascript' 'text/javascript",浏览器会把内容放到一个PRE标签中
                            if ((child = doc.body.firstChild) && child.nodeName.toUpperCase() === 'PRE' && child.firstChild) {
                                this.responseText = child.firstChild.nodeValue;
                            }
                        }
                        this.dispatch(200, 'success');
                    }
                    this.uploadcallback = avalon.unbind(node, 'load', this.uploadcallback);
                    delete this.uploadcallback;
                    setTimeout(function () {
                        // Fix busy state in FF3
                        node.parentNode.removeChild(node);
                    });
                }
            };
            delete avalon.fixAjax;
        };
        avalon.fixAjax();
    }
    return avalon;
}
)();
},{"../mmPromise/mmPromise":38,"avalon":2}],41:[function(innerRequire,module,exports){
//avalon 1.3.6 2014.11.06
/**
 *
 * @cnName 路由器
 * @enName mmRouter
 * @introduce
 *
 <p><a href="avalon.mmRouter.old.doc.html">旧版文档</a><a href="https://github.com/gogoyqj/avalon.oniui/blob/master/mmRouter/README.md">迁移教程</a></p>
 <p>路由器插件，实现类似angular ui-router的功能</p>
<h5>mmRouter的使用</h5>
1、引入依赖(直接依赖于mmRouter, 总共依赖于avalon, mmRouter, mmHistory)
```javascript
  innerRequire(["mmRouter"], function() {
  })
```
2、定义VM
```javascript
    var model = avalon.define('test', function(vm) {
        vm.currPath = ""
        vm.params = {}
        vm.query = {}
        vm.args = "[]"
    })
```
3、定义路由规则
```javascript
 function callback() {
    model.currPath = this.path
    var params = this.params
    if ("time" in params) {
        params.time = avalon.filters.date(params.time, "yyyy年M月dd日")
    }
    model.params = params
    model.query = this.query
    model.args = "[" + [].slice.call(arguments, 0) + "]"

}
avalon.router.get("/aaa/", callback)
avalon.router.get("/bbb", callback)
avalon.router.get("/ccc/:ccc", callback)
avalon.router.get("/ddd/{time:date}/", callback)
avalon.router.get("/eee/{count:\\d{4}}/", callback)
avalon.router.get("/fff", callback)
```
4、启动历史管理器
```javascript
 avalon.history.start({
     basepath: "/avalon"
  })
```
5、开始扫描
```javascript
avalon.scan()
```
6、页面上的链接处理，所有不想跳转不想刷新整面的A标签，都需要以`#!`/或`#/`开头
（这个由历史管理器的`hashPrefix`参数决定，默认是`!`），target属性指向当前页面．
```html
 <ul>
    <li><a href="#!/aaa">aaa</a></li>
    <li><a href="#!/bbb?uu=3445345&were=4324">bbb</a></li>
    <li><a href="#!/ccc/etretr">ccc</a></li>
    <li><a href="#!/ddd/2014-09-19">ddd</a></li>
    <li><a href="#!/eee/2222">eee</a></li>
    <li><a href="#!/fff?a=1&nn=4&dfg=676">fff</a></li>
</ul>
```
mmRouter与mmHistory的API列表<br>
* `avalon.history.start(opts)`， 开始监听URL变化，opts。 enter image description here<br>
* `avalon.history.stop()`， 中止监听URL变化。<br>
* `avalon.router.get(path, callback)`，用于添加路由规则。第一个为路由规则，<br>
如"/aaa", "/bbb/:bbbId","/eee/{eeeId}/ddd/{dddId:[0-9]{6}}" 冒号后的东西或花括号的东西表示为参数，<br>
花括号模式下还可以指定匹配规则。callback为回调函数，框架会将冒号后的或花括中的匹配内容传进来，<br>
此外this对象，包含了path、 params、 query等对象与属性。<br>
 `'/hello/'` - 匹配'/hello/'或'/hello'<br>
 `'/user/:id'` - 匹配 '/user/bob' 或 '/user/1234!!!' 或 '/user/' 但不匹配 '/user' 与 '/user/bob/details'<br>
 `'/user/{id}'` - 同上<br>
 `'/user/{id:[^/]*}'` - 同上<br>
 `'/user/{id:[0-9a-fA-F]{1,8}}'` - 要求ID匹配/[0-9a-fA-F]{1,8}/这个子正则<br>
 `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the<br>
 path into the parameter 'path'.<br>
 `'/files/*path'` - ditto.<br>
```javascript
 avalon.router.get("/ddd/:dddID/",callback)
 avalon.router.get("/ddd/{dddID}/",callback)
 avalon.router.get("/ddd/{dddID:[0-9]{4}}/",callback)
 avalon.router.get("/ddd/{dddID:int}/",callback)
 我们甚至可以在这里添加新的类型，avalon.router.$type.d4 = { pattern: '[0-9]{4}', decode: Number}
 avalon.router.get("/ddd/{dddID:d4}/",callback)
```
* `avalon.router.add(method, path, callback)` ， 添加回调，第一个为请求类型，
如GET，POST，DELETE什么， 第2个为路由规则，第3个为回调函数
* `avalon.router.error(callback)`，如果没有一条路由规则满足此请求，那么就转交此回调处理，
我们可以在里面写跳转到404页面这样的逻辑
* `avalon.router.navigate(path)`，强制触发对应路径的回调
* `avalon.router.setLastPath(path)` ， 这是框架自己调用，保存最近一次跳转的路径
* `avalon.router.getLastPath()` 取得最近一次跳转的路径，比如用户F5强制页面，你在ready回调中执行此方法，
得到path，然后将它放进navigate中就能回到原来的页面了。
<h3>路由器与多个VM的协作（每个VM定义在不同的JS文件中）</h3>
 */
},{}],42:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var anchorElement = document.createElement('a');
    var History = avalon.History = function () {
            this.location = location;
        };
    History.started = false;
    //取得当前IE的真实运行环境
    History.IEVersion = function () {
        var mode = document.documentMode;
        return mode ? mode : window.XMLHttpRequest ? 7 : 6;
    }();
    History.defaults = {
        basepath: '/',
        html5Mode: false,
        hashPrefix: '!',
        iframeID: null,
        //IE6-7，如果有在页面写死了一个iframe，这样似乎刷新的时候不会丢掉之前的历史
        interval: 50,
        //IE6-7,使用轮询，这是其时间时隔
        fireAnchor: true    //决定是否将滚动条定位于与hash同ID的元素上
    };
    var oldIE = window.VBArray && History.IEVersion <= 7;
    var supportPushState = !!window.history.pushState;
    var supportHashChange = !!('onhashchange' in window && (!window.VBArray || !oldIE));
    History.prototype = {
        constructor: History,
        getFragment: function (fragment) {
            if (fragment == null) {
                if (this.monitorMode === 'popstate') {
                    fragment = this.getPath();
                } else {
                    fragment = this.getHash();
                }
            }
            return fragment.replace(/^[#\/]|\s+$/g, '');
        },
        getHash: function (window) {
            // IE6直接用location.hash取hash，可能会取少一部分内容
            // 比如 http://www.cnblogs.com/rubylouvre#stream/xxxxx?lang=zh_c
            // ie6 => location.hash = #stream/xxxxx
            // 其他浏览器 => location.hash = #stream/xxxxx?lang=zh_c
            // firefox 会自作多情对hash进行decodeURIComponent
            // 又比如 http://www.cnblogs.com/rubylouvre/#!/home/q={%22thedate%22:%2220121010~20121010%22}
            // firefox 15 => #!/home/q={"thedate":"20121010~20121010"}
            // 其他浏览器 => #!/home/q={%22thedate%22:%2220121010~20121010%22}
            var path = (window || this).location.href;
            return this._getHash(path.slice(path.indexOf('#')));
        },
        _getHash: function (path) {
            if (path.indexOf('#/') === 0) {
                return decodeURIComponent(path.slice(2));
            }
            if (path.indexOf('#!/') === 0) {
                return decodeURIComponent(path.slice(3));
            }
            return '';
        },
        getPath: function () {
            var path = decodeURIComponent(this.location.pathname + this.location.search);
            var root = this.basepath.slice(0, -1);
            if (!path.indexOf(root))
                path = path.slice(root.length);
            return path.slice(1);
        },
        _getAbsolutePath: function (a) {
            return !a.hasAttribute ? a.getAttribute('href', 4) : a.href;
        },
        start: function (options) {
            if (History.started)
                throw new Error('avalon.history has already been started');
            History.started = true;
            this.options = avalon.mix({}, History.defaults, options);
            //IE6不支持maxHeight, IE7支持XMLHttpRequest, IE8支持window.Element，querySelector, 
            //IE9支持window.Node, window.HTMLElement, IE10不支持条件注释
            //确保html5Mode属性存在,并且是一个布尔
            this.html5Mode = !!this.options.html5Mode;
            //监听模式
            this.monitorMode = this.html5Mode ? 'popstate' : 'hashchange';
            if (!supportPushState) {
                if (this.html5Mode) {
                    avalon.log('\u5982\u679C\u6D4F\u89C8\u5668\u4E0D\u652F\u6301HTML5 pushState\uFF0C\u5F3A\u5236\u4F7F\u7528hash hack!');
                    this.html5Mode = false;
                }
                this.monitorMode = 'hashchange';
            }
            if (!supportHashChange) {
                this.monitorMode = 'iframepoll';
            }
            this.prefix = '#' + this.options.hashPrefix + '/';
            //确认前后都存在斜线， 如"aaa/ --> /aaa/" , "/aaa --> /aaa/", "aaa --> /aaa/", "/ --> /"
            this.basepath = ('/' + this.options.basepath + '/').replace(/^\/+|\/+$/g, '/');
            // 去最左右两边的斜线
            this.fragment = this.getFragment();
            anchorElement.href = this.basepath;
            this.rootpath = this._getAbsolutePath(anchorElement);
            var that = this;
            var html = '<!doctype html><html><body>@</body></html>';
            if (this.options.domain) {
                html = html.replace('<body>', '<script>document.domain =' + this.options.domain + '</script><body>');
            }
            this.iframeHTML = html;
            if (this.monitorMode === 'iframepoll') {
                //IE6,7在hash改变时不会产生历史，需要用一个iframe来共享历史
                avalon.ready(function () {
                    if (that.iframe)
                        return;
                    var iframe = that.iframe || document.getElementById(that.iframeID) || document.createElement('iframe');
                    iframe.src = 'javascript:0';
                    iframe.style.display = 'none';
                    iframe.tabIndex = -1;
                    document.body.appendChild(iframe);
                    that.iframe = iframe.contentWindow;
                    that._setIframeHistory(that.prefix + that.fragment);
                });
            }
            // 支持popstate 就监听popstate
            // 支持hashchange 就监听hashchange
            // 否则的话只能每隔一段时间进行检测了
            function checkUrl(e) {
                var iframe = that.iframe;
                if (that.monitorMode === 'iframepoll' && !iframe) {
                    return false;
                }
                var pageHash = that.getFragment(), hash;
                if (iframe) {
                    //IE67
                    var iframeHash = that.getHash(iframe);
                    //与当前页面hash不等于之前的页面hash，这主要是用户通过点击链接引发的
                    if (pageHash !== that.fragment) {
                        that._setIframeHistory(that.prefix + pageHash);
                        hash = pageHash    //如果是后退按钮触发hash不一致
;
                    } else if (iframeHash !== that.fragment) {
                        that.location.hash = that.prefix + iframeHash;
                        hash = iframeHash;
                    }
                } else if (pageHash !== that.fragment) {
                    hash = pageHash;
                }
                if (hash !== void 0) {
                    that.fragment = hash;
                    that.fireRouteChange(hash, { fromHistory: true });
                }
            }
            //thanks https://github.com/browserstate/history.js/blob/master/scripts/uncompressed/history.html4.js#L272
            // 支持popstate 就监听popstate
            // 支持hashchange 就监听hashchange(IE8,IE9,FF3)
            // 否则的话只能每隔一段时间进行检测了(IE6, IE7)
            switch (this.monitorMode) {
            case 'popstate':
                this.checkUrl = avalon.bind(window, 'popstate', checkUrl);
                this._fireLocationChange = checkUrl;
                break;
            case 'hashchange':
                this.checkUrl = avalon.bind(window, 'hashchange', checkUrl);
                break;
            case 'iframepoll':
                this.checkUrl = setInterval(checkUrl, this.options.interval);
                break;
            }
            //根据当前的location立即进入不同的路由回调
            avalon.ready(function () {
                that.fireRouteChange(that.fragment || '/', { replace: true });
            });
        },
        fireRouteChange: function (hash, options) {
            var router = avalon.router;
            if (router && router.navigate) {
                router.setLastPath(hash);
                router.navigate(hash === '/' ? hash : '/' + hash, options);
            }
            if (this.options.fireAnchor) {
                scrollToAnchorId(hash.replace(/\?.*/g, ''));
            }
        },
        // 中断URL的监听
        stop: function () {
            avalon.unbind(window, 'popstate', this.checkUrl);
            avalon.unbind(window, 'hashchange', this.checkUrl);
            clearInterval(this.checkUrl);
            History.started = false;
        },
        updateLocation: function (hash, options, urlHash) {
            var options = options || {}, rp = options.replace, st = options.silent;
            if (this.monitorMode === 'popstate') {
                // html5 mode 第一次加载的时候保留之前的hash
                var path = this.rootpath + hash + (urlHash || '');
                // html5 model包含query
                if (path != this.location.href.split('#')[0])
                    history[rp ? 'replaceState' : 'pushState']({ path: path }, document.title, path);
                if (!st)
                    this._fireLocationChange();
            } else {
                var newHash = this.prefix + hash;
                if (st && hash != this.getHash()) {
                    this._setIframeHistory(newHash, rp);
                    this.fragment = this._getHash(newHash);
                }
                this._setHash(this.location, newHash, rp);
            }
        },
        _setHash: function (location, hash, replace) {
            var href = location.href.replace(/(javascript:|#).*$/, '');
            if (replace) {
                location.replace(href + hash);
            } else
                location.hash = hash;
        },
        _setIframeHistory: function (hash, replace) {
            if (!this.iframe)
                return;
            var idoc = this.iframe.document;
            idoc.open();
            idoc.write(this.iframeHTML);
            idoc.close();
            this._setHash(idoc.location, hash, replace);
        }
    };
    avalon.history = new History();
    //https://github.com/asual/jquery-address/blob/master/src/jquery.address.js
    //劫持页面上所有点击事件，如果事件源来自链接或其内部，
    //并且它不会跳出本页，并且以"#/"或"#!/"开头，那么触发updateLocation方法
    avalon.bind(document, 'click', function (event) {
        var defaultPrevented = 'defaultPrevented' in event ? event['defaultPrevented'] : event.returnValue === false;
        if (defaultPrevented || event.ctrlKey || event.metaKey || event.which === 2)
            return;
        var target = event.target;
        while (target.nodeName !== 'A') {
            target = target.parentNode;
            if (!target || target.tagName === 'BODY') {
                return;
            }
        }
        if (targetIsThisWindow(target.target)) {
            var href = oldIE ? target.getAttribute('href', 2) : target.getAttribute('href') || target.getAttribute('xlink:href');
            var prefix = avalon.history.prefix;
            if (href === null) {
                // href is null if the attribute is not present
                return;
            }
            var hash = href.replace(prefix, '').trim();
            if (href.indexOf(prefix) === 0 && hash !== '') {
                event.preventDefault();
                avalon.router && avalon.router.navigate(hash);
            }
        }
    });
    //判定A标签的target属性是否指向自身
    //thanks https://github.com/quirkey/sammy/blob/master/lib/sammy.js#L219
    function targetIsThisWindow(targetWindow) {
        if (!targetWindow || targetWindow === window.name || targetWindow === '_self' || targetWindow === 'top' && window == window.top) {
            return true;
        }
        return false;
    }
    //得到页面第一个符合条件的A标签
    function getFirstAnchor(list) {
        for (var i = 0, el; el = list[i++];) {
            if (el.nodeName === 'A') {
                return el;
            }
        }
    }
    function scrollToAnchorId(hash, el) {
        if (el = document.getElementById(hash)) {
            el.scrollIntoView();
        } else if (el = getFirstAnchor(document.getElementsByName(hash))) {
            el.scrollIntoView();
        } else {
            window.scrollTo(0, 0);
        }
    }
    return avalon;
}
)();
},{"avalon":2}],43:[function(innerRequire,module,exports){
innerRequire("./mmHistory");

module.exports = (
function () {
    function Router() {
        var table = {};
        'get,post,delete,put'.replace(avalon.rword, function (name) {
            table[name] = [];
        });
        this.routingTable = table;
    }
    function parseQuery(url) {
        var array = url.split('?'), query = {}, path = array[0], querystring = array[1];
        if (querystring) {
            var seg = querystring.split('&'), len = seg.length, i = 0, s;
            for (; i < len; i++) {
                if (!seg[i]) {
                    continue;
                }
                s = seg[i].split('=');
                query[decodeURIComponent(s[0])] = decodeURIComponent(s[1]);
            }
        }
        return {
            path: path,
            query: query
        };
    }
    function queryToString(obj) {
        if (typeof obj == 'string')
            return obj;
        var str = [];
        for (var i in obj) {
            if (i == 'query')
                continue;
            str.push(i + '=' + encodeURIComponent(obj[i]));
        }
        return str.length ? '?' + str.join('&') : '';
    }
    var placeholder = /([:*])(\w+)|\{(\w+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g;
    Router.prototype = {
        error: function (callback) {
            this.errorback = callback;
        },
        _pathToRegExp: function (pattern, opts) {
            var keys = opts.keys = [],
                //      segments = opts.segments = [],
                compiled = '^', last = 0, m, name, regexp, segment;
            while (m = placeholder.exec(pattern)) {
                name = m[2] || m[3];
                // IE[78] returns '' for unmatched groups instead of null
                regexp = m[4] || (m[1] == '*' ? '.*' : 'string');
                segment = pattern.substring(last, m.index);
                var type = this.$types[regexp];
                var key = { name: name };
                if (type) {
                    regexp = type.pattern;
                    key.decode = type.decode;
                }
                keys.push(key);
                compiled += quoteRegExp(segment, regexp, false);
                //  segments.push(segment)
                last = placeholder.lastIndex;
            }
            segment = pattern.substring(last);
            compiled += quoteRegExp(segment) + (opts.strict ? opts.last : '/?') + '$';
            var sensitive = typeof opts.caseInsensitive === 'boolean' ? opts.caseInsensitive : true;
            //  segments.push(segment);
            opts.regexp = new RegExp(compiled, sensitive ? 'i' : undefined);
            return opts;
        },
        //添加一个路由规则
        add: function (method, path, callback, opts) {
            var array = this.routingTable[method.toLowerCase()];
            if (path.charAt(0) !== '/') {
                throw 'path\u5FC5\u987B\u4EE5/\u5F00\u5934';
            }
            opts = opts || {};
            opts.callback = callback;
            if (path.length > 2 && path.charAt(path.length - 1) === '/') {
                path = path.slice(0, -1);
                opts.last = '/';
            }
            avalon.Array.ensure(array, this._pathToRegExp(path, opts));
        },
        //判定当前URL与已有状态对象的路由规则是否符合
        route: function (method, path, query) {
            path = path.trim();
            var states = this.routingTable[method];
            for (var i = 0, el; el = states[i++];) {
                var args = path.match(el.regexp);
                if (args) {
                    el.query = query || {};
                    el.path = path;
                    el.params = {};
                    var keys = el.keys;
                    args.shift();
                    if (keys.length) {
                        this._parseArgs(args, el);
                    }
                    return el.callback.apply(el, args);
                }
            }
            if (this.errorback) {
                this.errorback();
            }
        },
        _parseArgs: function (match, stateObj) {
            var keys = stateObj.keys;
            for (var j = 0, jn = keys.length; j < jn; j++) {
                var key = keys[j];
                var value = match[j] || '';
                if (typeof key.decode === 'function') {
                    //在这里尝试转换参数的类型
                    var val = key.decode(value);
                } else {
                    try {
                        val = JSON.parse(value);
                    } catch (e) {
                        val = value;
                    }
                }
                match[j] = stateObj.params[key.name] = val;
            }
        },
        getLastPath: function () {
            return getCookie('msLastPath');
        },
        setLastPath: function (path) {
            setCookie('msLastPath', path);
        },
        /*
         *  @interface avalon.router.redirect
         *  @param hash 访问的url hash
         */
        redirect: function (hash) {
            this.navigate(hash, { replace: true });
        },
        /*
         *  @interface avalon.router.navigate
         *  @param hash 访问的url hash
         *  @param options 扩展配置
         *  @param options.replace true替换history，否则生成一条新的历史记录
         *  @param options.silent true表示只同步url，不触发url变化监听绑定
        */
        navigate: function (hash, options) {
            var parsed = parseQuery((hash.charAt(0) !== '/' ? '/' : '') + hash), options = options || {};
            if (hash.charAt(0) === '/')
                hash = hash.slice(1);
            // 修正出现多扛的情况 fix http://localhost:8383/mmRouter/index.html#!//
            // 在state之内有写history的逻辑
            if (!avalon.state || options.silent)
                avalon.history && avalon.history.updateLocation(hash, avalon.mix({}, options, { silent: true }));
            // 只是写历史而已
            if (!options.silent) {
                this.route('get', parsed.path, parsed.query, options);
            }
        },
        /*
         *  @interface avalon.router.when 配置重定向规则
         *  @param path 被重定向的表达式，可以是字符串或者数组
         *  @param redirect 重定向的表示式或者url
        */
        when: function (path, redirect) {
            var me = this, path = path instanceof Array ? path : [path];
            avalon.each(path, function (index, p) {
                me.add('get', p, function () {
                    var info = me.urlFormate(redirect, this.params, this.query);
                    me.navigate(info.path + info.query, { replace: true });
                });
            });
            return this;
        },
        /*
         *  @interface avalon.router.get 添加一个router规则
         *  @param path url表达式
         *  @param callback 对应这个url的回调
        */
        get: function (path, callback) {
        },
        urlFormate: function (url, params, query) {
            var query = query ? queryToString(query) : '', hash = url.replace(placeholder, function (mat) {
                    var key = mat.replace(/[\{\}]/g, '').split(':');
                    key = key[0] ? key[0] : key[1];
                    return params[key] || '';
                }).replace(/^\//g, '');
            return {
                path: hash,
                query: query
            };
        },
        /* *
         `'/hello/'` - 匹配'/hello/'或'/hello'
         `'/user/:id'` - 匹配 '/user/bob' 或 '/user/1234!!!' 或 '/user/' 但不匹配 '/user' 与 '/user/bob/details'
         `'/user/{id}'` - 同上
         `'/user/{id:[^/]*}'` - 同上
         `'/user/{id:[0-9a-fA-F]{1,8}}'` - 要求ID匹配/[0-9a-fA-F]{1,8}/这个子正则
         `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
         path into the parameter 'path'.
         `'/files/*path'` - ditto.
         */
        // avalon.router.get("/ddd/:dddID/",callback)
        // avalon.router.get("/ddd/{dddID}/",callback)
        // avalon.router.get("/ddd/{dddID:[0-9]{4}}/",callback)
        // avalon.router.get("/ddd/{dddID:int}/",callback)
        // 我们甚至可以在这里添加新的类型，avalon.router.$type.d4 = { pattern: '[0-9]{4}', decode: Number}
        // avalon.router.get("/ddd/{dddID:d4}/",callback)
        $types: {
            date: {
                pattern: '[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])',
                decode: function (val) {
                    return new Date(val.replace(/\-/g, '/'));
                }
            },
            string: { pattern: '[^\\/]*' },
            bool: {
                decode: function (val) {
                    return parseInt(val, 10) === 0 ? false : true;
                },
                pattern: '0|1'
            },
            int: {
                decode: function (val) {
                    return parseInt(val, 10);
                },
                pattern: '\\d+'
            }
        }
    };
    'get,put,delete,post'.replace(avalon.rword, function (method) {
        return Router.prototype[method] = function (a, b, c) {
            this.add(method, a, b, c);
        };
    });
    function quoteRegExp(string, pattern, isOptional) {
        var result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, '\\$&');
        if (!pattern)
            return result;
        var flag = isOptional ? '?' : '';
        return result + flag + '(' + pattern + ')' + flag;
    }
    function supportLocalStorage() {
        try {
            localStorage.setItem('avalon', 1);
            localStorage.removeItem('avalon');
            return true;
        } catch (e) {
            return false;
        }
    }
    if (supportLocalStorage()) {
        Router.prototype.getLastPath = function () {
            return localStorage.getItem('msLastPath');
        };
        var cookieID;
        Router.prototype.setLastPath = function (path) {
            if (cookieID) {
                clearTimeout(cookieID);
                cookieID = null;
            }
            localStorage.setItem('msLastPath', path);
            cookieID = setTimeout(function () {
                localStorage.removItem('msLastPath');
            }, 1000 * 60 * 60 * 24);
        };
    }
    function escapeCookie(value) {
        return String(value).replace(/[,;"\\=\s%]/g, function (character) {
            return encodeURIComponent(character);
        });
    }
    function setCookie(key, value) {
        var date = new Date();
        //将date设置为1天以后的时间 
        date.setTime(date.getTime() + 1000 * 60 * 60 * 24);
        document.cookie = escapeCookie(key) + '=' + escapeCookie(value) + ';expires=' + date.toGMTString();
    }
    function getCookie(name) {
        var m = String(document.cookie).match(new RegExp('(?:^| )' + name + '(?:(?:=([^;]*))|;|$)')) || [
                '',
                ''
            ];
        return decodeURIComponent(m[1]);
    }
    avalon.router = new Router();
    return avalon;
}
)();
},{"./mmHistory":42}],44:[function(innerRequire,module,exports){
innerRequire("../mmPromise/mmPromise");
innerRequire("./mmRouter");

module.exports = (
function () {
    //重写mmRouter中的route方法     
    avalon.router.route = function (method, path, query, options) {
        path = path.trim();
        var states = this.routingTable[method];
        for (var i = 0, el; el = states[i++];) {
            //el为一个个状态对象，状态对象的callback总是返回一个Promise
            var args = path.match(el.regexp);
            if (args && el.abstract !== true) {
                //不能是抽象状态
                var newParams = { params: {} };
                avalon.mix(newParams.params, el.params);
                newParams.keys = el.keys;
                newParams.params.query = query || {};
                args.shift();
                if (el.keys.length) {
                    this._parseArgs(args, newParams);
                }
                if (el.stateName) {
                    mmState.transitionTo(mmState.currentState, el, newParams.params, options);
                } else {
                    el.callback.apply(el, args);
                }
                return;
            }
        }
        if (this.errorback) {
            this.errorback();
        }
    };
    var _root, undefine, _controllers = {}, _states = {};
    /*
     *  @interface avalon.router.go 跳转到一个已定义状态上，params对参数对象
     *  @param toName 状态name
     *  @param params 附加参数
     *  @param params.query 在hash后面附加的类似search的参数对
     *  @param options 扩展配置
     *  @param options.reload true强制reload，即便url、参数并未发生变化
     *  @param options.replace true替换history，否则生成一条新的历史记录
     *  @param options.confirmed true不触发onBeforeUnload,$onBeforeUnload,onBeforeExit
    */
    avalon.router.go = function (toName, params, options) {
        var from = mmState.currentState, to = StateModel.is(toName) ? toName : getStateByName(toName), params = params || {};
        params = avalon.mix(true, {}, to.params, params);
        if (to) {
            mmState.transitionTo(from, to, params, options);
        }
    };
    // 事件管理器
    var Event = window.$eventManager = avalon.define('$eventManager', function (vm) {
            vm.$flag = 0;
            vm.uiqKey = function () {
                vm.$flag++;
                return 'flag' + vm.$flag++;
            };
        });
    function removeOld() {
        var nodes = mmState.oldNodes;
        while (nodes.length) {
            var i = nodes.length - 1, node = nodes[i];
            node.parentNode && node.parentNode.removeChild(node);
            nodes.splice(i, 1);
        }
    }
    Event.$watch('onAbort', removeOld);
    var mmState = window.mmState = {
            prevState: NaN,
            currentState: NaN,
            // 当前状态，可能还未切换到该状态
            activeState: NaN,
            // 当前实际处于的状态
            oldNodes: [],
            query: {},
            // 从属于currentState
            popOne: function (chain, params, callback, notConfirmed) {
                var cur = chain.pop(), me = this;
                if (!cur)
                    return callback();
                // 阻止退出
                if (notConfirmed && cur.onBeforeExit() === false)
                    return callback(false);
                me.activeState = cur.parentState || _root;
                cur.done = function (success) {
                    cur._pending = false;
                    cur.done = null;
                    cur._local = null;
                    if (success !== false) {
                        if (me.activeState)
                            return me.popOne(chain, params, callback, notConfirmed);
                    }
                    return callback(success);
                };
                var success = cur.onExit();
                if (!cur._pending && cur.done)
                    cur.done(success);
            },
            pushOne: function (chain, params, callback, _local, toLocals) {
                var cur = chain.shift(), me = this;
                // 退出
                if (!cur) {
                    return callback();
                }
                cur.syncParams(params);
                // 阻止进入该状态
                if (cur.onBeforeEnter() === false) {
                    // 恢复params
                    cur.syncParams(cur.oldParams);
                    return callback(false);
                }
                _local = inherit(_local);
                me.activeState = cur;
                // 更新当前实际处于的状态
                cur.done = function (success) {
                    // 防止async处触发已经销毁的done
                    if (!cur.done)
                        return;
                    cur._pending = false;
                    cur.done = null;
                    cur.visited = true;
                    // 退出
                    if (success === false) {
                        // 这里斟酌一下 - 去掉
                        // cur.callback.apply(cur, [params, _local])
                        return callback(success);
                    }
                    var resolved = cur.callback.apply(cur, [
                            params,
                            _local
                        ]);
                    resolved.$then(function (res) {
                        var a = resolved;
                        // sync params to oldParams
                        avalon.mix(true, cur.oldParams, cur.params);
                        // 继续状态链
                        me.pushOne(chain, params, callback, _local);
                    });
                };
                // 一般在这个回调里准备数据
                var args = [];
                avalon.each(cur.keys, function (index, item) {
                    var key = item.name;
                    args.push(cur.params[key]);
                });
                cur._onEnter.apply(cur, args);
                if (!cur._pending && cur.done)
                    cur.done();
            },
            transitionTo: function (fromState, toState, toParams, options) {
                var toParams = toParams || toState.params, fromAbort;
                // state machine on transition
                if (this.activeState && this.activeState != this.currentState) {
                    avalon.log('navigating to [' + this.currentState.stateName + '] will be stopped, redirect to [' + toState.stateName + '] now');
                    this.activeState.done && this.activeState.done(!'stopped');
                    fromState = this.activeState;
                    // 更新实际的fromState
                    fromAbort = true;
                }
                var info = avalon.router.urlFormate(toState.url, toParams, toParams.query), me = this, options = options || {},
                    // 是否强制reload，参照angular，这个时候会触发整个页面重刷
                    reload = options.reload, over, fromChain = fromState && fromState.chain || [], toChain = toState.chain, i = 0, changeType,
                    // 是params变化？query变化？这个东西可以用来配置是否屏蔽视图刷新逻辑
                    state = toChain[i], _local = _root.sourceLocal, toLocals = [];
                if (!reload) {
                    // 找到共有父状态chain，params未变化
                    while (state && state === fromChain[i] && !state.paramsChanged(toParams)) {
                        _local = toLocals[i] = state._local;
                        i++;
                        state = toChain[i];
                    }
                }
                var exitChain = fromChain.slice(i),
                    // 需要退出的chain
                    enterChain = toChain.slice(i),
                    // 需要进入的chain
                    commonLocal = _local;
                // 建立toLocals，用来计算哪些view会被替换
                while (state = toChain[i]) {
                    _local = toLocals[i] = inherit(_local, state.sourceLocal);
                    i++;
                }
                mmState._local = _local;
                done = function (success, e) {
                    if (over)
                        return;
                    over = true;
                    me.currentState = me.activeState;
                    if (success !== false) {
                        mmState.lastLocal = mmState.currentState._local;
                        _root.fire('updateview', me.currentState, changeType);
                        avalon.log('transitionTo ' + toState.stateName + ' success');
                        callStateFunc('onLoad', me, fromState, toState);
                    } else {
                        return callStateFunc('onError', me, {
                            type: 'transition',
                            message: 'transitionTo ' + toState.stateName + ' faild',
                            error: e,
                            fromState: fromState,
                            toState: toState,
                            params: toParams
                        }, me.currentState);
                    }
                };
                toState.path = ('/' + info.path).replace(/^[\/]{2,}/g, '/');
                if (!reload && fromState === toState) {
                    changeType = toState.paramsChanged(toParams);
                    if (!changeType) {
                        // redirect的目的状态 == this.activeState && abort
                        if (toState == this.activeState && fromAbort)
                            return done();
                        // 重复点击直接return
                        return;
                    }
                }
                mmState.query = avalon.mix({}, toParams.query);
                // onBeforeUnload check
                if (options && !options.confirmed && (callStateFunc('onBeforeUnload', this, fromState, toState) === false || broadCastBeforeUnload(exitChain, enterChain, fromState, toState) === false)) {
                    return callStateFunc('onAbort', this, fromState, toState);
                }
                if (over === true) {
                    return;
                }
                avalon.log('begin transitionTo ' + toState.stateName + ' from ' + (fromState && fromState.stateName || 'unknown'));
                callStateFunc('onUnload', this, fromState, toState);
                this.currentState = toState;
                this.prevState = fromState;
                if (info && avalon.history)
                    avalon.history.updateLocation(info.path + info.query, avalon.mix({}, options, { silent: true }), !fromState && location.hash);
                callStateFunc('onBegin', this, fromState, toState);
                this.popOne(exitChain, toParams, function (success) {
                    // 中断
                    if (success === false)
                        return done(success);
                    me.pushOne(enterChain, toParams, done, commonLocal, toLocals);
                }, !(options && options.confirmed));
            }
        };
    //将template,templateUrl,templateProvider等属性从opts对象拷贝到新生成的view对象上的
    function copyTemplateProperty(newObj, oldObj, name) {
        if (name in oldObj) {
            newObj[name] = oldObj[name];
            delete oldObj[name];
        }
    }
    function getCacheContainer() {
        return document.getElementsByTagName('avalon')[0];
    }
    var templateCache = {}, cacheContainer = getCacheContainer();
    function loadCache(name) {
        var fragment = document.createDocumentFragment(), divPlaceHolder = document.getElementById(name), f, eles = divPlaceHolder.eles, i = 0;
        if (divPlaceHolder) {
            while (f = eles[i]) {
                fragment.appendChild(f);
                i++;
            }
        }
        return fragment;
    }
    window.loadCache = loadCache;
    function setCache(name, element) {
        var fragment = document.createDocumentFragment(), divPlaceHolder = document.getElementById(name), f;
        if (!divPlaceHolder) {
            divPlaceHolder = document.createElement('div');
            divPlaceHolder.id = name;
            cacheContainer.appendChild(divPlaceHolder);
        }
        // 引用
        if (divPlaceHolder.eles) {
            avalon.each(divPlaceHolder.eles, function (index, ele) {
                fragment.appendChild(ele);
            });
        } else {
            divPlaceHolder.eles = [];
            while (f = element.firstChild) {
                fragment.appendChild(f);
                divPlaceHolder.eles.push(f);
            }
            templateCache[name] = true;
        }
        divPlaceHolder.appendChild(fragment);
    }
    function broadCastBeforeUnload(exitChain, enterChain, fromState, toState) {
        var lastLocal = mmState.lastLocal;
        if (!lastLocal || !enterChain[0] && !exitChain[0])
            return;
        var newLocal = mmState._local, cacheQueue = [];
        for (var i in lastLocal) {
            var local = lastLocal[i];
            // 所有被更新的view
            if (!(i in newLocal) || newLocal[i] != local) {
                if (local.$ctrl && '$onBeforeUnload' in local.$ctrl) {
                    if (local.$ctrl.$onBeforeUnload(fromState, toState) === false)
                        return false;
                }
                if (local.element && exitChain[0] != enterChain[0])
                    cacheQueue.push(local);
            }
        }
        avalon.each(cacheQueue, function (index, local) {
            var ele = local.element, name = avalon(ele).data('currentCache');
            if (name) {
                setCache(name, ele);
            }
        });
        cacheQueue = null;
    }
    // 靠谱的解决方法
    avalon.bindingHandlers.view = function (data, vmodels) {
        var currentState = mmState.currentState, element = data.element, $element = avalon(element), viewname = data.value, comment = document.createComment('ms-view:' + viewname), par = element.parentNode, defaultHTML = element.innerHTML, statename = $element.data('statename') || '', parentState = getStateByName(statename) || _root, currentLocal = {}, oldElement = element, tpl = element.outerHTML;
        element.removeAttribute('ms-view');
        // remove right now
        par.insertBefore(comment, element);
        function update(firsttime, currentState, changeType) {
            // node removed, remove callback
            if (!document.contains(comment))
                return !'delete from watch';
            var definedParentStateName = $element.data('statename') || '', parentState = getStateByName(definedParentStateName) || _root, _local;
            if (viewname.indexOf('@') < 0)
                viewname += '@' + parentState.stateName;
            _local = mmState.currentState._local && mmState.currentState._local[viewname];
            if (firsttime && !_local || currentLocal === _local)
                return;
            currentLocal = _local;
            _currentState = _local && _local.state;
            // 缓存，如果加载dom上，则是全局配置，针对template还可以开一个单独配置
            var cacheTpl = $element.data('viewCache'), lastCache = $element.data('currentCache');
            if (_local) {
                cacheTpl = (_local.viewCache === false ? false : _local.viewCache || cacheTpl) && viewname + '@' + _currentState.stateName;
            } else if (cacheTpl) {
                cacheTpl = viewname + '@__default__';
            }
            // stateB->stateB，配置了参数变化不更新dom
            if (_local && _currentState === currentState && _local.ignoreChange && _local.ignoreChange(changeType, viewname))
                return;
            // 需要load和使用的cache是一份
            if (cacheTpl && cacheTpl === lastCache)
                return;
            compileNode(tpl, element, $element, _currentState);
            var html = _local ? _local.template : defaultHTML, fragment;
            if (cacheTpl) {
                if (_local) {
                    _local.element = element;
                } else {
                    mmState.currentState._local[viewname] = {
                        state: mmState.currentState,
                        template: defaultHTML,
                        element: element
                    };
                }
            }
            avalon.clearHTML(element);
            // oldElement = element
            element.removeAttribute('ms-view');
            element.setAttribute('ui-view', data.value);
            // 本次更新的dom需要用缓存
            if (cacheTpl) {
                // 已缓存
                if (templateCache[cacheTpl]) {
                    fragment = loadCache(cacheTpl)    // 未缓存
;
                } else {
                    fragment = avalon.parseHTML(html);
                }
                element.appendChild(fragment);
                // 更新现在使用的cache名字
                $element.data('currentCache', cacheTpl);
                if (templateCache[cacheTpl])
                    return;
            } else {
                element.innerHTML = html;
                $element.data('currentCache', false);
            }
            // default
            if (!_local && cacheTpl)
                $element.data('currentCache', cacheTpl);
            avalon.each(getViewNodes(element), function (i, node) {
                avalon(node).data('statename', _currentState && _currentState.stateName || '');
            });
            // merge上下文vmodels + controller指定的vmodels
            avalon.scan(element, (_local && _local.vmodels || []).concat(vmodels || []));
            // 触发视图绑定的controller的事件
            if (_local && _local.$ctrl) {
                _local.$ctrl.$onRendered && _local.$ctrl.$onRendered.apply(element, [_local]);
            }
        }
        update('firsttime');
        _root.watch('updateview', function (state, changeType) {
            return update.call(this, undefine, state, changeType);
        });
    };
    function compileNode(tpl, element, $element, _currentState) {
        if ($element.hasClass('oni-mmRouter-slide')) {
            // 拷贝一个镜像
            var copy = element.cloneNode(true);
            copy.setAttribute('ms-skip', 'true');
            avalon(copy).removeClass('oni-mmRouter-enter').addClass('oni-mmRouter-leave');
            avalon(element).addClass('oni-mmRouter-enter');
            element.parentNode.insertBefore(copy, element);
            mmState.oldNodes.push(copy);
            callStateFunc('onViewEnter', _currentState, element, copy);
        }
        return element;
    }
    function inherit(parent, extra) {
        return avalon.mix(new (avalon.mix(function () {
        }, { prototype: parent }))(), extra);
    }
    /*
     * @interface avalon.state 对avalon.router.get 进行重新封装，生成一个状态对象
     * @param stateName 指定当前状态名
     * @param opts 配置
     * @param opts.url  当前状态对应的路径规则，与祖先状态们组成一个完整的匹配规则
     * @param {Function} opts.ignoreChange 当mmState.currentState == this时，更新视图的时候调用该函数，return true mmRouter则不会去重写视图和scan，请确保该视图内用到的数据没有放到avalon vmodel $skipArray内
     * @param opts.controller 如果不写views属性,则默认view为""，为默认的view指定一个控制器，该配置会直接作为avalon.controller的参数生成一个$ctrl对象
     * @param opts.controllerUrl 指定默认view控制器的路径，适用于模块化开发，该情形下默认通过avalon.controller.loader去加载一个符合amd规范，并返回一个avalon.controller定义的对象，传入opts.params作参数
     * @param opts.controllerProvider 指定默认view控制器的提供者，它可以是一个Promise，也可以为一个函数，传入opts.params作参数
     @param opts.viewCache 是否缓存这个模板生成的dom，设置会覆盖dom元素上的data-view-cache，也可以分别配置到views上每个单独的view上
     * @param opts.views: 如果不写views属性,则默认view为""，对多个[ms-view]容器进行处理,每个对象应拥有template, templateUrl, templateProvider，可以给每个对象搭配一个controller||controllerUrl||controllerProvider属性
     *     views的结构为
     *<pre>
     *     {
     *        "": {template: "xxx"}
     *        "aaa": {template: "xxx"}
     *        "bbb@": {template: "xxx"}
     *     }
     *</pre>
     *     views的每个键名(keyname)的结构为viewname@statename，
     *         如果名字不存在@，则viewname直接为keyname，statename为opts.stateName
     *         如果名字存在@, viewname为match[0], statename为match[1]
     * @param opts.views.template 指定当前模板，也可以为一个函数，传入opts.params作参数，
     * @param opts.views.templateUrl 指定当前模板的路径，也可以为一个函数，传入opts.params作参数
     * @param opts.views.templateProvider 指定当前模板的提供者，它可以是一个Promise，也可以为一个函数，传入opts.params作参数
     * @param opts.views.ignoreChange 用法同state.ignoreChange，只是针对的粒度更细一些，针对到具体的view
     * @param {Function} opts.onBeforeEnter 切入某个state之前触发，this指向对应的state，如果return false则会中断并退出整个状态机
     * @param {Function} opts.onEnter 进入状态触发，可以返回false，或任意不为true的错误信息或一个promise对象，用法跟视图的$onEnter一致
     * @param {Function} onEnter.params 视图所属的state的参数
     * @param {Function} onEnter.resolve $onEnter return false的时候，进入同步等待，直到手动调用resolve
     * @param {Function} onEnter.reject 数据加载失败，调用
     * @param {Function} opts.onBeforeExit state退出前触发，this指向对应的state，如果return false则会中断并退出整个状态机
     * @param {Function} opts.onExit 退出后触发，this指向对应的state
     * @param opts.ignoreChange.changeType 值为"param"，表示params变化，值为"query"，表示query变化
     * @param opts.ignoreChange.viewname 关联的ms-view name
     * @param opts.abstract  表示它不参与匹配，this指向对应的state
     * @param {private} opts.parentState 父状态对象（框架内部生成）
     */
    avalon.state = function (stateName, opts) {
        var state = StateModel(stateName, opts);
        avalon.router.get(state.url, function (params, _local) {
            var me = this, promises = [], _resovle, _reject, _data = [], _callbacks = [];
            state.resolved = getPromise(function (rs, rj) {
                _resovle = rs;
                _reject = rj;
            });
            avalon.each(state.views, function (name, view) {
                var params = me.params, reason = {
                        type: 'view',
                        name: name,
                        params: params,
                        state: state,
                        view: view
                    }, viewLocal = _local[name] = {
                        name: name,
                        state: state,
                        params: state.filterParams(params),
                        ignoreChange: 'ignoreChange' in view ? view.ignoreChange : me.ignoreChange,
                        viewCache: 'viewCache' in view ? view.viewCache : me.viewCache
                    }, promise = fromPromise(view, params, reason);
                promises.push(promise);
                // template不能cache
                promise.then(function (s) {
                    viewLocal.template = s;
                }, avalon.noop);
                // 捕获模板报错
                var prom, callback = function ($ctrl) {
                        viewLocal.vmodels = $ctrl.$vmodels;
                        view.$controller = viewLocal.$ctrl = $ctrl;
                        resolveData();
                    }, resolveData = function () {
                        var $onEnter = view.$controller && view.$controller.$onEnter;
                        if ($onEnter) {
                            var innerProm = getPromise(function (rs, rj) {
                                    var reason = {
                                            type: 'data',
                                            state: state,
                                            params: params
                                        }, res = $onEnter(params, rs, function (message) {
                                            reason.message = message;
                                            rj(reason);
                                        });
                                    // if promise
                                    if (res && res.then) {
                                        _data.push(res);
                                        res.then(function () {
                                            rs(res);
                                        })    // error msg
;
                                    } else if (res && res !== true) {
                                        reason.message = res;
                                        rj(reason);
                                    } else if (res === undefine) {
                                        rs();
                                    }    // res === false will pause here
                                });
                            innerProm = innerProm.then(function (cb) {
                                avalon.isFunction(cb) && _callbacks.push(cb);
                            });
                            _data.push(innerProm);
                        }
                    };
                // controller似乎可以缓存着
                if (view.$controller && view.cacheController !== false) {
                    return callback(view.$controller);
                }
                // 加载controller模块
                if (view.controller) {
                    prom = promise.then(function () {
                        callback(avalon.controller(view.controller));
                    });
                } else if (view.controllerUrl) {
                    prom = getPromise(function (rs, rj) {
                        var url = avalon.isFunction(view.controllerUrl) ? view.controllerUrl(params) : view.controllerUrl;
                        url = url instanceof Array ? url : [url];
                        avalon.controller.loader(url, function ($ctrl) {
                            promise.then(function () {
                                callback($ctrl);
                                rs();
                            });
                        });
                    });
                } else if (view.controllerProvider) {
                    var res = avalon.isFunction(view.controllerProvider) ? view.controllerProvider(params) : view.controllerProvider;
                    prom = getPromise(function (rs, rj) {
                        // if promise
                        if (res && res.then) {
                            _data.push(res);
                            res.then(function (r) {
                                promise.then(function () {
                                    callback(r);
                                    rs();
                                });
                            }, function (e) {
                                reason.message = e;
                                rj(reason);
                            })    // error msg
;
                        } else {
                            promise.then(function () {
                                callback(res);
                                rs();
                            });
                        }
                    });
                }
                // is promise
                if (prom && prom.then) {
                    promises.push(prom);
                }
            });
            // 模板和controller就绪
            getPromise(promises).$then(function (values) {
                state._local = _local;
                // 数据就绪
                getPromise(_data).$then(function () {
                    avalon.each(_callbacks, function (i, func) {
                        func();
                    });
                    _resovle();
                });
            });
            return state.resolved;
        }, state);
        return this;
    };
    function isError(e) {
        return e instanceof Error;
    }
    // 将所有的promise error适配到这里来
    function promiseError(e) {
        if (isError(e)) {
            throw e;
        } else {
            callStateFunc('onError', mmState, e, e && e.state);
        }
    }
    function getPromise(excutor) {
        var prom = avalon.isFunction(excutor) ? new Promise(excutor) : Promise.all(excutor);
        return prom;
    }
    Promise.prototype.$then = function (onFulfilled, onRejected) {
        var prom = this.then(onFulfilled, onRejected);
        prom['catch'](promiseError);
        return prom;
    };
    avalon.state.onViewEntered = function (newNode, oldNode) {
        if (newNode != oldNode)
            oldNode.parentNode.removeChild(oldNode);
    };
    /*
     *  @interface avalon.state.config 全局配置
     *  @param {Object} config 配置对象
     *  @param {Function} config.onBeforeUnload 开始切前的回调，this指向router对象，第一个参数是fromState，第二个参数是toState，return false可以用来阻止切换进行
     *  @param {Function} config.onAbort onBeforeUnload return false之后，触发的回调，this指向mmState对象，参数同onBeforeUnload
     *  @param {Function} config.onUnload url切换时候触发，this指向mmState对象，参数同onBeforeUnload
     *  @param {Function} config.onBegin  开始切换的回调，this指向mmState对象，参数同onBeforeUnload，如果配置了onBegin，则忽略begin
     *  @param {Function} config.onLoad 切换完成并成功，this指向mmState对象，参数同onBeforeUnload
     *  @param {Function} config.onViewEnter 视图插入动画函数，有一个默认效果
     *  @param {Node} config.onViewEnter.arguments[0] 新视图节点
     *  @param {Node} config.onViewEnter.arguments[1] 旧的节点
     *  @param {Function} config.onError 出错的回调，this指向对应的state，第一个参数是一个object，object.type表示出错的类型，比如view表示加载出错，object.name则对应出错的view name，object.xhr则是当使用默认模板加载器的时候的httpRequest对象，第二个参数是对应的state
    */
    avalon.state.config = function (config) {
        avalon.mix(avalon.state, config || {});
        return avalon;
    };
    function callStateFunc(name, state) {
        Event.$fire.apply(Event, arguments);
        return avalon.state[name] ? avalon.state[name].apply(state || mmState.currentState, [].slice.call(arguments, 2)) : 0;
    }
    // 状态原型，所有的状态都要继承这个原型
    function StateModel(stateName, options) {
        if (this instanceof StateModel) {
            this.stateName = stateName;
            this.formate(options);
        } else {
            var state = _states[stateName] = new StateModel(stateName, options || {});
            return state;
        }
    }
    StateModel.is = function (state) {
        return state instanceof StateModel;
    };
    StateModel.prototype = {
        formate: function (options) {
            avalon.mix(true, this, options);
            var stateName = this.stateName, me = this, chain = stateName.split('.'), len = chain.length - 1, sourceLocal = me.sourceLocal = {};
            this.chain = [];
            avalon.each(chain, function (key, name) {
                if (key == len) {
                    me.chain.push(me);
                } else {
                    var n = chain.slice(0, key + 1).join('.'), state = getStateByName(n);
                    if (!state)
                        throw new Error('\u5FC5\u987B\u5148\u5B9A\u4E49' + n);
                    me.chain.push(state);
                }
            });
            if (this.url === void 0) {
                this.abstract = true;
            }
            var parent = this.chain[len - 1] || _root;
            if (parent) {
                this.url = parent.url + (this.url || '');
                this.parentState = parent;
            }
            if (!this.views && stateName != '') {
                var view = {};
                'template,templateUrl,templateProvider,controller,controllerUrl,controllerProvider,viewCache'.replace(/\w+/g, function (prop) {
                    copyTemplateProperty(view, me, prop);
                });
                this.views = { '': view };
            }
            var views = {};
            avalon.each(this.views, function (name, view) {
                if (name.indexOf('@') < 0) {
                    name += '@' + (parent ? parent.stateName || '' : '');
                }
                views[name] = view;
                sourceLocal[name] = {};
            });
            this.views = views;
            this._self = options;
            this._pending = false;
            this.visited = false;
            this.params = inherit(parent && parent.params || {});
            this.oldParams = {};
            this.keys = [];
            this.events = {};
        },
        watch: function (eventName, func) {
            var events = this.events[eventName] || [];
            this.events[eventName] = events;
            events.push(func);
            return func;
        },
        fire: function (eventName, state) {
            var events = this.events[eventName] || [], i = 0;
            while (events[i]) {
                var res = events[i].apply(this, [].slice.call(arguments, 1));
                if (res === false) {
                    events.splice(i, 1);
                } else {
                    i++;
                }
            }
        },
        unwatch: function (eventName, func) {
            var events = this.events[eventName];
            if (!events)
                return;
            var i = 0;
            while (events[i]) {
                if (events[i] == func)
                    return events.splice(i, 1);
                i++;
            }
        },
        paramsChanged: function (toParams) {
            var changed = false, keys = this.keys, me = this, params = this.params;
            avalon.each(keys, function (index, item) {
                var key = item.name;
                if (params[key] != toParams[key])
                    changed = 'param';
            });
            // query
            if (!changed && mmState.currentState === this) {
                changed = !objectCompare(toParams.query, mmState.query) && 'query';
            }
            return changed;
        },
        filterParams: function (toParams) {
            var params = avalon.mix(true, {}, this.params), keys = this.keys;
            avalon.each(keys, function (index, item) {
                params[item.name] = toParams[item.name];
            });
            return params;
        },
        syncParams: function (toParams) {
            var me = this;
            avalon.each(this.keys, function (index, item) {
                var key = item.name;
                if (key in toParams)
                    me.params[key] = toParams[key];
            });
        },
        _onEnter: function () {
            this.query = this.getQuery();
            var me = this, arg = Array.prototype.slice.call(arguments), done = me._async(), prom = getPromise(function (rs, rj) {
                    var reason = {
                            type: 'data',
                            state: me,
                            params: me.params
                        }, _reject = function (message) {
                            reason.message = message;
                            done.apply(me, [false]);
                            rj(reason);
                        }, _resovle = function () {
                            done.apply(me);
                            rs();
                        }, res = me.onEnter.apply(me, arg.concat([
                            _resovle,
                            _reject
                        ]));
                    // if promise
                    if (res && res.then) {
                        res.then(_resovle)['catch'](promiseError)    // error msg
;
                    } else if (res && res !== true) {
                        _reject(res);
                    } else if (res === undefine) {
                        _resovle();
                    }    // res === false will pause here
                });
        },
        /*
         * @interface state.getQuery 获取state的query，等价于state.query
         *<pre>
         *  onEnter: function() {
         *      var query = this.getQuery()
         *      or
         *      this.query
         *  }
         *</pre> 
         */
        getQuery: function () {
            return mmState.query;
        },
        /*
         * @interface state.getParams 获取state的params，等价于state.params
         *<pre>
         *  onEnter: function() {
         *      var params = this.getParams()
         *      or
         *      this.params
         *  }
         *</pre> 
         */
        getParams: function () {
            return this.params;
        },
        _async: function () {
            // 没有done回调的时候，防止死球
            if (this.done)
                this._pending = true;
            return this.done || avalon.noop;
        },
        onBeforeEnter: avalon.noop,
        // 切入某个state之前触发
        onEnter: avalon.noop,
        // 切入触发
        onBeforeExit: avalon.noop,
        // state退出前触发
        onExit: avalon.noop
    };
    _root = StateModel('', {
        url: '',
        views: null,
        'abstract': true
    });
    /*
     * @interface avalon.controller 给avalon.state视图对象配置控制器
     * @param name 控制器名字
     * @param {Function} factory 控制器
     * @param {Object} factory.$ctrl 实际生成的控制器对象
     * @param {Function} factory.$onBeforeUnload 该视图被卸载前触发，return false可以阻止视图卸载，并阻止跳转
     * @param {Function} factory.$onEnter 给该视图加载数据，可以返回false，或任意不为true的错误信息或一个promise对象，传递3个参数
     * @param {Function} factory.$onEnter.params 视图所属的state的参数
     * @param {Function} factory.$onEnter.resolve $onEnter return false的时候，进入同步等待，直到手动调用resolve
     * @param {Function} factory.$onEnter.reject 数据加载失败，调用
     * @param {Function} factory.$onRendered 视图元素scan完成之后，调用
     */
    avalon.controller = function () {
        var first = arguments[0], second = arguments[1];
        var $ctrl = _controller();
        if (avalon.isFunction(first)) {
            first($ctrl);
        } else if (avalon.isFunction(second)) {
            $ctrl.name = first;
            second($ctrl);
        } else if (typeof first == 'string' || typeof first == 'object') {
            first = first instanceof Array ? first : Array.prototype.slice.call(arguments);
            avalon.each(first, function (index, item) {
                if (typeof item == 'string') {
                    first[index] = avalon.vmodels[item];
                }
                item = first[index];
                if ('$onRendered' in item)
                    $ctrl.$onRendered = item['$onRendered'];
                if ('$onEnter' in item)
                    $ctrl.$onEnter = item['$onEnter'];
            });
            $ctrl.$vmodels = first;
        } else {
            throw new Error('\u53C2\u6570\u9519\u8BEF' + arguments);
        }
        return $ctrl;
    };
    /*
     *  @interface avalon.controller.loader avalon.controller异步引入模块的加载器，默认是通过avalon.require加载
     */
    avalon.controller.loader = function (url, callback) {
        // 没有错误回调...
        avalon.require(url, function ($ctrl) {
            callback && callback($ctrl);
        });
    };
    function _controller() {
        if (!(this instanceof _controller))
            return new _controller();
        this.$vmodels = [];
    }
    _controller.prototype = {};
    function objectCompare(objA, objB) {
        for (var i in objA) {
            if (!(i in objB) || objA[i] !== objB[i])
                return false;
        }
        for (var i in objB) {
            if (!(i in objA) || objA[i] !== objB[i])
                return false;
        }
        return true;
    }
    //【avalon.state】的辅助函数，确保返回的是函数
    function getFn(object, name) {
        return typeof object[name] === 'function' ? object[name] : avalon.noop;
    }
    function getStateByName(stateName) {
        return _states[stateName];
    }
    function getViewNodes(node, query) {
        var nodes, query = query || 'ms-view';
        if (node.querySelectorAll) {
            nodes = node.querySelectorAll('[' + query + ']');
        } else {
            nodes = Array.prototype.filter.call(node.getElementsByTagName('*'), function (node) {
                return typeof node.getAttribute(query) === 'string';
            });
        }
        return nodes;
    }
    // 【avalon.state】的辅助函数，opts.template的处理函数
    function fromString(template, params, reason) {
        var promise = getPromise(function (resolve, reject) {
                var str = typeof template === 'function' ? template(params) : template;
                if (typeof str == 'string') {
                    resolve(str);
                } else {
                    reason.message = 'template\u5FC5\u987B\u5BF9\u5E94\u4E00\u4E2A\u5B57\u7B26\u4E32\u6216\u4E00\u4E2A\u8FD4\u56DE\u5B57\u7B26\u4E32\u7684\u51FD\u6570';
                    reject(reason);
                }
            });
        return promise;
    }
    // 【fromUrl】的辅助函数，得到一个XMLHttpRequest对象
    var getXHR = function () {
        return new (window.XMLHttpRequest || ActiveXObject)('Microsoft.XMLHTTP');
    };
    /*
     *  @interface avalon.state.templateLoader 通过url异步加载模板的函数，默认是通过内置的httpRequest去加载，但是在node-webkit环境是不work的，因此开放了这个配置，用以自定义url模板加载器，会在一个promise实例里调用这个方法去加载模板
     *  @param url 模板地址
     *  @param resolve 加载成功，如果需要缓存模板，请调用<br>
        resolve(avalon.templateCache[url] = templateString)<br>
        否则，请调用<br>
        resolve(templateString)<br>
     *  @param reject 加载失败，请调用reject(reason)
     *  @param reason 挂在失败原因的对象
     */
    avalon.state.templateLoader = function (url, resolve, reject, reason) {
        var xhr = getXHR();
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                var status = xhr.status;
                if (status > 399 && status < 600) {
                    reason.message = 'templateUrl\u5BF9\u5E94\u8D44\u6E90\u4E0D\u5B58\u5728\u6216\u6CA1\u6709\u5F00\u542F CORS';
                    reason.status = status;
                    reason.xhr = xhr;
                    reject(reason);
                } else {
                    resolve(avalon.templateCache[url] = xhr.responseText);
                }
            }
        };
        xhr.open('GET', url, true);
        if ('withCredentials' in xhr) {
            xhr.withCredentials = true;
        }
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.send();
    };
    // 【avalon.state】的辅助函数，opts.templateUrl的处理函数
    function fromUrl(url, params, reason) {
        var promise = getPromise(function (resolve, reject) {
                if (typeof url === 'function') {
                    url = url(params);
                }
                if (typeof url !== 'string') {
                    reason.message = 'templateUrl\u5FC5\u987B\u5BF9\u5E94\u4E00\u4E2AURL';
                    return reject(reason);
                }
                if (avalon.templateCache[url]) {
                    return resolve(avalon.templateCache[url]);
                }
                avalon.state.templateLoader(url, resolve, reject, reason);
            });
        return promise;
    }
    // 【avalon.state】的辅助函数，opts.templateProvider的处理函数
    function fromProvider(fn, params, reason) {
        var promise = getPromise(function (resolve, reject) {
                if (typeof fn === 'function') {
                    var ret = fn(params);
                    if (ret && ret.then || typeof ret == 'string') {
                        resolve(ret);
                    } else {
                        reason.message = 'templateProvider\u4E3A\u51FD\u6570\u65F6\u5E94\u8BE5\u8FD4\u56DE\u4E00\u4E2APromise\u6216thenable\u5BF9\u8C61\u6216\u5B57\u7B26\u4E32';
                        reject(reason);
                    }
                } else if (fn && fn.then) {
                    resolve(fn);
                } else {
                    reason.message = 'templateProvider\u4E0D\u4E3A\u51FD\u6570\u65F6\u5E94\u8BE5\u5BF9\u5E94\u4E00\u4E2APromise\u6216thenable\u5BF9\u8C61';
                    reject(reason);
                }
            });
        return promise;
    }
    // 【avalon.state】的辅助函数，将template或templateUrl或templateProvider转换为可用的Promise对象
    function fromPromise(config, params, reason) {
        return config.template ? fromString(config.template, params, reason) : config.templateUrl ? fromUrl(config.templateUrl, params, reason) : config.templateProvider ? fromProvider(config.templateProvider, params, reason) : getPromise(function (resolve, reject) {
            reason.message = '\u5FC5\u987B\u5B58\u5728template, templateUrl, templateProvider\u4E2D\u7684\u4E00\u4E2A';
            reject(reason);
        });
    }
    window._states = _states;
}
)();
},{"../mmPromise/mmPromise":38,"./mmRouter":43}],45:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<div class=\"oni-notice\" ms-class=\"{{typeClass}}\" ms-css-height=\"height\" ms-visible=\"toggle\">\n    <div class=\"oni-notice-inner\">\n        <div class=\"oni-notice-header\" ms-if=\"!!header\">{{title|html}}</div>\n        <div class=\"oni-notice-content\">\n            <span class=\"js_notice_content\">{{content|html}}</span>\n            <span class=\"oni-notice-close js_notice_close\" \n                ms-if=\"hasCloseBtn\"\n                ms-click=\"_close\">关闭</span>\n        </div>\n    </div>\n</div>\n<div ms-if=\"_isAffix\" ms-css-width=\"noticeAffixWidth\" ms-css-height=\"noticeAffixHeight\" ms-css-display=\"affixPlaceholderDisplay\"></div>\n";

module.exports = (
function () {
    var template = sourceHTML, containerMap = [], affixBoxs = [],
        // 存储吸顶的notice元素，且只保存弹出的notice
        affixHeights = [],
        //存储吸顶元素对应的height、width、offsetTop
        isIE6 = (window.navigator.userAgent || '').toLowerCase().indexOf('msie 6') !== -1, maxZIndex = 0;
    var widget = avalon.ui.notice = function (element, data, vmodels) {
            var options = data.noticeOptions, temp = template;
            if (options.animate) {
                temp = template.replace('ms-visible="toggle"', '');
                options.height = 0;
            } else {
                options.height = 'auto';
            }
            options.template = options.getTemplate(temp, options);
            // container选项可以是dom对象，或者元素ID("#id")
            var noticeDefineContainer = options.container;
            // 根据配置值将container转换为完全的dom对象，如果用户未配置container，则container容器默认是应用绑定的元素
            options.container = noticeDefineContainer ? noticeDefineContainer.nodeType === 1 ? noticeDefineContainer : document.getElementById(noticeDefineContainer.substr(1)) : element;
            var templateView = null,
                // 保存模板解析后的dom对象的引用
                elementInnerHTML = element.innerHTML.trim(),
                //如果notice的container是默认配置也就是绑定元素本身，元素的innerHTML就是notice的content
                onShow = options.onShow, onShowVM = null, onHide = options.onHide, onHideVM = null;
            if (typeof onShow === 'string') {
                onShowVM = avalon.getModel(onShow, vmodels);
                options.onShow = onShowVM && onShowVM[1][onShowVM[0]] || avalon.noop;
            }
            if (typeof onHide === 'string') {
                onHideVM = avalon.getModel(onHide, vmodels);
                options.onHide = onHideVM && onHideVM[1][onHideVM[0]] || avalon.noop;
            }
            element.innerHTML = '';
            if (options.header !== 'notice title' && options.title === 'notice title') {
                options.title = options.header;
            }
            var vmodel = avalon.define(data.noticeId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$closeTimer = 0;
                    // 定时器引用
                    vm.$skipArray = [
                        'template',
                        'widgetElement',
                        '_isAffix',
                        'container',
                        'elementHeight',
                        'rootElement'
                    ];
                    vm.elementHeight = 0;
                    vm.content = vm.content || elementInnerHTML;
                    vm._isAffix = vm.isPlace && vm.isAffix;
                    vm.rootElement = {};
                    vm.widgetElement = element;
                    // type的改变影响notice显示类的改变
                    vm.typeClass = vm[vm.type + 'Class'];
                    vm.noticeAffixWidth = 0;
                    vm.noticeAffixHeight = 0;
                    vm.affixPlaceholderDisplay = 'none';
                    // 如果配置notice不占位则设置器容器为body
                    !vm.isPlace ? vm.container = document.body : vm.container;
                    vm._show = function (display) {
                        // toggle为true时调用此方法显示notice
                        _timerClose();
                        _affix();
                        if (vmodel.animate) {
                            step(display, vmodel);
                        }
                        vmodel.onShow.call(element, data, vmodels);    // 用户回调
                    };
                    vm.$watch('elementHeightOk', function () {
                        vmodel.height = 'auto';
                    });
                    vm._close = function () {
                        //close按钮click时的监听处理函数
                        vmodel.toggle = false;
                    };
                    vm._hide = function (display) {
                        //toggle为false时隐藏notice
                        var hideAffixIndex = affixBoxs.indexOf(templateView), $templateView = avalon(templateView);
                        if (vmodel.animate) {
                            vmodel.elementHeight = $templateView.innerHeight();
                            $templateView.css('height', vmodel.elementHeight);
                            step(display, vmodel);
                        }
                        //隐藏吸顶元素后将其从吸顶队列中删除，并修改吸顶队列中所有元素的position为static，以便affixPosition能重新调整吸顶元素位置
                        if (hideAffixIndex !== -1) {
                            templateView.style.position = 'static';
                            //隐藏时改变position，方便再显示时调整元素位置(吸顶还是原位)
                            affixBoxs.splice(hideAffixIndex, 1);
                            affixHeights.splice(hideAffixIndex, 1);
                            for (var i = 0, len = affixBoxs.length; i < len; i++) {
                                affixBoxs[i].style.position = 'static';
                            }
                            if (len) {
                                //如果依然存在吸顶元素，重新调整吸顶元素的位置
                                affixPosition();
                            }
                        }
                        vmodel.onHide.call(element, data, vmodels);    //用户回调
                    };
                    vm.setContent = function (content) {
                        vmodel.content = content;
                    };
                    vm.$init = function () {
                        var container = null;
                        var sourceFragment = avalon.parseHTML(options.template);
                        var AffixPlaceholder = sourceFragment.lastChild;
                        if (!maxZIndex) {
                            maxZIndex = getMaxZIndex();
                        }
                        templateView = sourceFragment.firstChild;
                        container = positionNoticeElement();
                        //获取存储notice的容器
                        container.appendChild(templateView);
                        if (!vmodel.isPlace) {
                            //不占位notice元素，使之保持和配置container同样的offsetLeft和width
                            var $container = avalon(options.container);
                            // IE7及以下元素为空其width为0，所以需要取到其父节点的width
                            var $containerParent = avalon($container[0].parentNode);
                            templateView.style.width = ($container.width() || $containerParent.width()) + 'px';
                            templateView.style.position = 'relative';
                            templateView.style.left = $container.offset().left + 'px';
                        }
                        if (vmodel._isAffix) {
                            container.appendChild(AffixPlaceholder);
                            avalon.scan(AffixPlaceholder, [vmodel]);
                        }
                        vm.rootElement = templateView;
                        avalon.scan(templateView, [vmodel].concat(vmodels));
                        if (typeof options.onInit === 'function') {
                            //vmodels是不包括vmodel的
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                        if (vmodel.animate) {
                            animateElementHeight();
                        }
                    };
                    vm.$remove = function () {
                        //删除组件绑定元素后的自清理方法
                        var templateViewPar = templateView.parentNode;
                        for (var i = 0, len = containerMap.length; i < len; i++) {
                            var containerInfo = containerMap[i];
                            if (containerInfo[2] === options.container) {
                                break;
                            }
                        }
                        if (vmodel._isAffix) {
                            var templateViewNextSiblind = templateView.nextSibling;
                            templateViewPar.removeChild(templateViewNextSiblind);
                        }
                        templateView.innerHTML = templateView.textContent = '';
                        templateViewPar.removeChild(templateView);
                        if (!templateViewPar.children.length) {
                            templateViewPar.parentNode.removeChild(templateViewPar);
                            containerInfo[0] = void 0;
                        }
                    };
                });
            vmodel.$watch('toggle', function (v) {
                //改变toggle影响notice的显示、隐藏
                if (v) {
                    vmodel._show(v);
                } else {
                    vmodel._hide(v);
                }
            });
            vmodel.$watch('type', function (v) {
                //改变type影响notice的显示类型
                vmodel.typeClass = vmodel[v + 'Class'];
            });
            vmodel.$watch('header', function (v) {
                vmodel.title = v;
            });
            vmodel.$watch('successClass', function (v) {
                vmodel.typeClass = v;
            });
            vmodel.$watch('errorClass', function (v) {
                vmodel.typeClass = v;
            });
            vmodel.$watch('infoClass', function (v) {
                vmodel.typeClass = v;
            });
            vmodel.$watch('zIndex', function (v) {
                maxZIndex = v;
                affixPosition();
            });
            vmodel.$watch('content', function () {
                if (vmodel.animate) {
                    animateElementHeight();
                }
            });
            // 如果配置了timer，则在notice显示timer时间后自动隐藏
            function _timerClose() {
                if (!vmodel.timer) {
                    return;
                }
                window.clearTimeout(vmodel.$closeTimer);
                vmodel.$closeTimer = window.setTimeout(function () {
                    vmodel.toggle = false;
                }, vmodel.timer);
            }
            // notice要求占位且吸顶则保存吸顶元素到affixBoxs中，将元素的width、height、offsetTop保存到affixHeights对应位置,并根据页面目前位置调整吸顶元素的位置
            function _affix() {
                if (!vmodel._isAffix) {
                    return;
                }
                var $templateView = avalon(templateView);
                var offset = $templateView.offset();
                var templateViewWidth = templateView.offsetWidth;
                var templateViewHieght = templateView.offsetHeight;
                vmodel.noticeAffixWidth = templateViewWidth;
                vmodel.noticeAffixHeight = templateViewHieght;
                templateView.vmodel = vmodel;
                affixBoxs.push(templateView);
                affixHeights.push([
                    templateViewHieght,
                    templateViewWidth,
                    offset.top,
                    offset.left
                ]);
                affixPosition();
            }
            // 当content改变时，重新计算元素高度，保证动画执行正确
            function animateElementHeight() {
                setTimeout(function () {
                    var temp = document.createElement('div'), cloneTemplateView = templateView.cloneNode(true), $cloneTemplateView, width = avalon(templateView).innerWidth(), templateViewPar = templateView.parentNode;
                    if (!width) {
                        while (templateViewPar) {
                            if (templateViewPar.nodeType === 1) {
                                width = avalon(templateViewPar).innerWidth();
                            }
                            if (width) {
                                break;
                            }
                            templateViewPar = templateViewPar.parentNode;
                        }
                    }
                    temp.style.position = 'absolute';
                    temp.style.height = 0;
                    document.body.appendChild(temp);
                    temp.appendChild(cloneTemplateView);
                    $cloneTemplateView = avalon(cloneTemplateView);
                    $cloneTemplateView.css({
                        visibility: 'hidden',
                        width: width,
                        height: 'auto'
                    });
                    vmodel.elementHeight = $cloneTemplateView.height();
                    document.body.removeChild(temp);
                }, 10);
            }
            // 根据占位与否以及配置的container获得最终插入notice的container
            function positionNoticeElement() {
                var containerArr = [];
                var container = vmodel.container;
                var containerExist = false;
                // container是否被处理过的标志
                for (var i = 0, len = containerMap.length; i < len; i++) {
                    var containerInfo = containerMap[i];
                    if (containerInfo[2] === container) {
                        containerExist = true;
                        // container已经被配置过，则直接获取container下的div
                        container = vmodel.isPlace ? containerInfo[0] : containerInfo[1];
                        if (!container) {
                            //因为存在占位和不占位两种情况，所以有可能得到的container还没有经过处理
                            var div = document.createElement('div');
                            var containerFirstChild = vmodel.container.childNodes[0];
                            if (!containerFirstChild) {
                                // 如果container还没有子元素直接append
                                vmodel.container.appendChild(div);
                            } else {
                                //保证notice的容器始终在container的起始位置
                                vmodel.container.insertBefore(div, containerFirstChild);
                            }
                            if (vmodel.isPlace) {
                                containerInfo[0] = container = div;
                                avalon(div).addClass('oni-notice-flow');
                            } else {
                                avalon(div).addClass('oni-notice-detach');
                                containerInfo[1] = container = div;
                            }
                        }
                        break;
                    }
                }
                if (!containerExist) {
                    var div = document.createElement('div');
                    if (vmodel.isPlace) {
                        var containerFirstChild = container.childNodes[0];
                        if (!containerFirstChild) {
                            // 如果container还没有子元素直接append
                            container.appendChild(div);
                        } else {
                            //保证notice的容器始终在container的起始位置
                            container.insertBefore(div, containerFirstChild);
                        }
                    } else {
                        // 不占位的notice直接append到body后面
                        container.appendChild(div);
                    }
                    avalon(div).addClass(vmodel.isPlace ? 'oni-notice-flow' : 'oni-notice-detach');
                    containerArr[2] = container;
                    // 保存用户配置的container对象
                    if (vmodel.isPlace) {
                        containerArr[0] = container = div;    // 占位元素container下的oni-notice-flow
                    } else {
                        containerArr[1] = container = div;    // body下的oni-notice-detach元素
                    }
                    containerMap.push(containerArr);
                }
                return container;
            }
            return vmodel;
        };
    avalon.bind(window, 'scroll', function () {
        affixPosition();
    });
    function affixPosition() {
        // 定位吸顶元素
        var scrollTop = avalon(document).scrollTop();
        for (var i = 0, len = affixBoxs.length; i < len; i++) {
            var notice = affixBoxs[i], style = notice.style, $notice = avalon(notice), vmodel = notice.vmodel;
            // 如果滚动距离大于吸顶元素的offsetTop，将元素吸顶，否则保存元素在页面的位置不变
            if (scrollTop >= affixHeights[i][2]) {
                // IE6下fixed失效，使用absolute进行吸顶操作
                if (style.position !== 'fixed' || isIE6 && style.position !== 'absolute') {
                    //滚动过程中如果元素已经吸顶，就不再重新计算位置并定位
                    var top = 0;
                    var left = 0;
                    for (var j = 1; j <= i; j++) {
                        top += affixHeights[j - 1][0];
                    }
                    top = isIE6 ? scrollTop + top : top;
                    left = affixHeights[i][3];
                    $notice.css({
                        width: affixHeights[i][1] + 'px',
                        top: top + 'px',
                        left: left + 'px',
                        position: isIE6 ? 'absolute' : 'fixed',
                        'z-index': maxZIndex
                    });
                    vmodel.affixPlaceholderDisplay = 'block';
                }
            } else {
                $notice.css('position', 'static');
                vmodel.affixPlaceholderDisplay = 'none';
            }
        }
    }
    function getMaxZIndex() {
        var children = document.body.children, maxIndex = 10,
            //当body子元素都未设置zIndex时，默认取10
            zIndex;
        for (var i = 0, el; el = children[i++];) {
            if (el.nodeType === 1) {
                zIndex = ~~avalon(el).css('z-index');
                if (zIndex) {
                    maxIndex = Math.max(maxIndex, zIndex);
                }
            }
        }
        return maxIndex + 1;
    }
    function camelize(target) {
        //转换为驼峰风格
        if (target.indexOf('-') < 0 && target.indexOf('_') < 0) {
            return target    //提前判断，提高getStyle等的效率
;
        }
        return target.replace(/[-_][^-_]/g, function (match) {
            return match.charAt(1).toUpperCase();
        });
    }
    function supportCss3(name) {
        var prefix = [
                '',
                '-webkit-',
                '-o-',
                '-moz-',
                '-ms-'
            ], i, htmlStyle = document.documentElement.style;
        for (i in prefix) {
            camelCase = camelize(prefix[i] + name);
            if (camelCase in htmlStyle) {
                return true;
            }
        }
        return false;
    }
    function step(display, vmodel) {
        var elementHeight = vmodel.elementHeight, height, interval;
        if (supportCss3('transition')) {
            height = display ? elementHeight : 0;
            if (!display) {
                setTimeout(function () {
                    vmodel.height = height;
                }, 10);
            } else {
                vmodel.height = height;
            }
            if (height) {
                setTimeout(function () {
                    vmodel.$fire('elementHeightOk');
                }, 600);
            }
        } else {
            height = display ? 0 : elementHeight;
            function animate() {
                height = display ? height + 1 : height - 1;
                if (height < 0) {
                    vmodel.height = 0;
                    return;
                } else if (height > elementHeight) {
                    vmodel.height = elementHeight;
                    setTimeout(function () {
                        vmodel.$fire('elementHeightOk');
                    }, 600);
                    return;
                }
                vmodel.height = height;
                setTimeout(animate, 0);
            }
            animate();
        }
    }
    widget.version = 1;
    widget.defaults = {
        content: '',
        //@interface 要显示的内容,可以是DOM对象|String|DOM String
        container: '',
        //@interface 显示notice的容器，可以配置为自己想要包裹notice的元素对象或者元素id，id的话必须是"#ID"的格式,默认为绑定组件的元素
        type: 'info',
        //@config notice类型,可以选择为"success"、"error"或者默认的"info
        header: 'notice title',
        //@config notice的标题
        title: 'notice title',
        //@config  notice的标题
        timer: 0,
        //@config notice显示之后自动隐藏的定时器，0表示不自动隐藏
        hasCloseBtn: true,
        //@config 是否显示关闭按钮，设为false不显示
        toggle: false,
        //@config 显示或隐藏notice， true显示，false隐藏
        isPlace: true,
        //@config 是否占位，false不占位，true占位，占位时notice显示在自定义的container中，不占位时append到body元素下
        isAffix: false,
        //@config 是否吸顶，非占位元素不吸顶，占位元素当滚动距离大于元素距页面顶部距离时吸顶，否则保持原位置
        /**
         * @interface  notice显示之后回调
         * @param data {Object} 与此数组相关的数据对象
         *  @param vmodels {Array} 位于此组件上方的vmodels组成的数组
         */
        onShow: avalon.noop,
        /**
         * @interface  notice关闭之后回调
         * @param data {Object} 与此数组相关的数据对象
         *  @param vmodels {Array} 位于此组件上方的vmodels组成的数组
         */
        onHide: avalon.noop,
        successClass: 'oni-notice-info',
        //@config type为success时的提示类名
        errorClass: 'oni-notice-danger',
        //@config type为error时的提示类名
        infoClass: '',
        //@config type为info时的提示类名
        widgetElement: '',
        //@interface accordion容器
        zIndex: 'auto',
        //@config 提示组件的zindex css值
        animate: true,
        //@config notice的显示隐藏是否添加动画
        /*
         * @config {Function} 用于重写模板的函数 
         * @param {String} tmpl
         * @param {Object} opts
         * @returns {String}
         */
        getTemplate: function (str, options) {
            return str;
        }
    };
    return avalon;
}
)();
},{"../avalon.getModel":6}],46:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-pager\" onselectstart=\"return false;\" unselectable=\"on\" ms-visible=\"!!totalPages\">\n    <span class=\"oni-pager-prev\"\n          ms-class=\"oni-state-disabled:firstPage==1\"\n          ms-if=\"isShowPrev()\"\n          ms-attr-title=\"getTitle('prev')\" \n          ms-click=\"jumpPage($event,'prev')\" \n          ms-text=\"prevText\"\n          ></span>\n    <span class=\"oni-pager-item\"\n          ms-visible=\"firstPage!==1\" \n          ms-attr-title=\"getTitle('first', currentPage)\" \n          ms-click=\"jumpPage($event,'first')\" \n          ms-class-oni-state-active=\"currentPage == 1\"\n          ms-hover=\"oni-state-hover\">1</span>\n    <span class='oni-pager-omit'\n          ms-if=\"showFirstOmit\" \n          ms-text=\"ellipseText\"\n          ></span>\n    <span  class=\"oni-pager-item\" \n           ms-repeat=\"pages\" \n           ms-attr-title=\"getTitle(el, currentPage)\"\n           ms-hover=\"oni-state-hover\"\n           ms-click=\"jumpPage($event,el)\"\n           ms-class-oni-state-active=\"el == currentPage\" \n           ms-text=\"el\"\n           ></span>\n    <span class=\"oni-pager-omit\"\n          ms-if=\"showLastOmit\" \n          ms-text=\"ellipseText\"\n          ></span>\n    <span class=\"oni-pager-item \"\n          ms-visible=\"lastPage!==totalPages\" \n          ms-attr-title=\"getTitle('last', currentPage, totalPages)\" \n          ms-hover=\"oni-state-hover\" \n          ms-click=\"jumpPage($event,'last')\"  \n          ms-text=\"totalPages\"\n          ></span>\n    <span class=\"oni-pager-next\"\n          ms-if=\"isShowNext()\" \n          ms-attr-title=\"getTitle('next')\"\n          ms-click=\"jumpPage($event,'next')\" \n          ms-class=\"oni-state-disabled:lastPage==totalPages\"\n          ms-text=\"nextText\"\n          ></span>\n    <div class=\"oni-pager-jump\" ms-if=\"showJumper\">\n        <span class=\"oni-pager-text\" ms-html=\"_getTotalPages(totalPages)\"></span>\n        <div class=\"oni-pager-textbox-wrapper\">\n            <input class=\"oni-pager-textbox\" ms-duplex=\"_currentPage\" data-duplex-event=\"change\" ms-keyup=\"changeCurrentPage\">\n        </div>\n        <span class=\"oni-pager-text\">{{regional.pageText}}</span>\n        <button class=\"oni-pager-button\" ms-click=\"changeCurrentPage\" >{{regional.confirmText}}</button>\n    </div>\n</div>\n";

module.exports = (
function () {
    var widget = avalon.ui.pager = function (element, data, vmodels) {
            var options = data.pagerOptions;
            var pageOptions = options.options;
            if (Array.isArray(pageOptions)) {
                options.options = pageOptions.map(function (el) {
                    var obj = {};
                    switch (typeof el) {
                    case 'number':
                    case 'string':
                        obj.value = el;
                        obj.text = el;
                        return obj;
                    case 'object':
                        return el;
                    }
                });
            } else {
                options.options = [];
            }
            if (vmodels.cb) {
                template = template.replace(/ms-title/g, 'ms-attr-title');
            }
            //方便用户对原始模板进行修改,提高制定性
            options.template = options.getTemplate(template, options);
            options._currentPage = options.currentPage;
            var vmodel = avalon.define(data.pagerId, function (vm) {
                    avalon.mix(vm, options, { regional: widget.defaultRegional });
                    vm.widgetElement = element;
                    vm.rootElement = {};
                    vm.$skipArray = [
                        'showPages',
                        'rootElement',
                        'widgetElement',
                        'template',
                        'ellipseText',
                        'alwaysShowPrev',
                        'alwaysShowNext'
                    ];
                    //这些属性不被监控
                    vm.$init = function (continueScan) {
                        var pageHTML = options.template;
                        element.style.display = 'none';
                        setTimeout(function () {
                            element.innerHTML = pageHTML;
                            vm.rootElement = element.getElementsByTagName('*')[0];
                            element.style.display = 'block';
                            if (continueScan) {
                                continueScan();
                            } else {
                                avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                                avalon.scan(element, [vmodel].concat(vmodels));
                                if (typeof options.onInit === 'function') {
                                    options.onInit.call(element, vmodel, options, vmodels);
                                }
                            }
                        }, 100);
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                    vm.jumpPage = function (event, page) {
                        event.preventDefault();
                        var enabled = this.className.indexOf('state-disabled') === -1;
                        if (enabled && page !== vm.currentPage) {
                            switch (page) {
                            case 'first':
                                vm.currentPage = 1;
                                break;
                            case 'last':
                                vm.currentPage = vm.totalPages;
                                break;
                            case 'next':
                                vm.currentPage++;
                                if (vm.currentPage > vm.totalPages) {
                                    vm.currentPage = vm.totalPages;
                                }
                                break;
                            case 'prev':
                                vm.currentPage--;
                                if (vm.currentPage < 1) {
                                    vm.currentPage = 1;
                                }
                                break;
                            default:
                                vm.currentPage = page;
                                break;
                            }
                            vm.onJump.call(element, event, vm);
                            efficientChangePages(vm.pages, getPages(vm));
                        }
                    };
                    vm.$watch('totalItems', function () {
                        efficientChangePages(vm.pages, getPages(vm));
                    });
                    vm.$watch('perPages', function (a) {
                        vm.currentPage = 1;
                        efficientChangePages(vm.pages, getPages(vm));
                    });
                    vm.$watch('currentPage', function (a) {
                        vmodel._currentPage = a;
                        efficientChangePages(vm.pages, getPages(vm));
                    });
                    vm.isShowPrev = function () {
                        var a = vm.alwaysShowPrev;
                        var b = vm.firstPage;
                        return a || b !== 1;
                    };
                    vm.isShowNext = function () {
                        var a = vm.alwaysShowNext;
                        var b = vm.lastPage;
                        var c = vm.totalPages;
                        return a || b !== c;
                    };
                    vm.changeCurrentPage = function (e, value) {
                        if (e.type === 'keyup') {
                            value = this.value;
                            if (e.keyCode !== 13)
                                return;
                        } else {
                            value = vmodel._currentPage;
                        }
                        value = parseInt(value, 10) || 1;
                        if (value > vmodel.totalPages || value < 1)
                            return;
                        //currentPage需要转换为Number类型 fix lb1064@qq.com
                        vmodel.currentPage = value;
                        vmodel.pages = getPages(vmodel);
                        vmodel.onJump.call(element, e, vm);
                    };
                    vm.pages = [];
                    vm.getPages = getPages;
                    //设置语言包
                    vm.setRegional = function (regional) {
                        vmodel.regional = regional;
                    };
                    vm._getTotalPages = function (totalPages) {
                        //return {{regional.totalText}}{{totalPages}}{{regional.pagesText}}，{{regional.toText}}{{regional.numberText}}
                        var regional = vmodel.regional, html = [
                                regional.totalText,
                                totalPages
                            ];
                        if (totalPages > 1) {
                            html.push(regional.pagesText);
                        } else {
                            html.push(regional.pageText);
                        }
                        html = html.concat([
                            ' ',
                            regional.jumpToText,
                            regional.numberText
                        ]);
                        return html.join('');
                    };
                    /**
             * @config {Function} 获取页码上的title的函数
             * @param {String|Number} a 当前页码的类型，如first, prev, next, last, 1, 2, 3
             * @param {Number} currentPage 当前页码
             * @param {Number} totalPages 最大页码
             * @returns {String}
             */
                    vm.getTitle = function (a, currentPage, totalPages) {
                        var regional = vmodel.regional;
                        switch (a) {
                        case 'first':
                            if (currentPage == 1) {
                                return regional.currentText;
                            }
                            return regional.jumpToText + ' ' + regional.firstText;
                        case 'prev':
                            return regional.jumpToText + ' ' + regional.prevText;
                        case 'next':
                            return regional.jumpToText + ' ' + regional.nextText;
                        case 'last':
                            if (currentPage == totalPages) {
                                return regional.currentText;
                            }
                            return regional.jumpToText + ' ' + regional.lastText;
                        default:
                            if (a === currentPage) {
                                return regional.currentText;
                            }
                            return regional.jumpToText + regional.numberText + ' ' + a + regional.pageText;
                        }
                    };
                });
            vmodel.pages = getPages(vmodel);
            return vmodel;
        };
    //vmodel.pages = getPages(vmodel) 会波及一些其他没有改动的元素节点,现在只做个别元素的添加删除操作
    function efficientChangePages(aaa, bbb) {
        var obj = {};
        for (var i = 0, an = aaa.length; i < an; i++) {
            var el = aaa[i];
            obj[el] = {
                action: 'del',
                el: el
            };
        }
        for (var i = 0, bn = bbb.length; i < bn; i++) {
            var el = bbb[i];
            if (obj[el]) {
                obj[el] = {
                    action: 'retain',
                    el: el
                };
            } else {
                obj[el] = {
                    action: 'add',
                    el: el
                };
            }
        }
        var scripts = [];
        for (var i in obj) {
            scripts.push({
                action: obj[i].action,
                el: obj[i].el
            });
        }
        scripts.sort(function (a, b) {
            return a.el - b.el;
        });
        scripts.forEach(function (el, index) {
            el.index = index;
        });
        //添加添加
        var reverse = [];
        for (var i = 0, el; el = scripts[i++];) {
            switch (el.action) {
            case 'add':
                aaa.splice(el.index, 0, el.el);
                break;
            case 'del':
                reverse.unshift(el);
                break;
            }
        }
        //再删除
        for (var i = 0, el; el = reverse[i++];) {
            aaa.splice(el.index, 1);
        }
    }
    //默认语言包为中文简体
    widget.regional = [];
    widget.regional['zh-CN'] = {
        prevText: '\u4E0A\u4E00\u9875',
        nextText: '\u4E0B\u4E00\u9875',
        confirmText: '\u786E\u5B9A',
        totalText: '\u5171',
        pagesText: '\u9875',
        pageText: '\u9875',
        toText: '\u5230',
        jumpToText: '\u8DF3\u8F6C\u5230',
        currentText: '\u5F53\u524D\u9875',
        firstText: '\u7B2C\u4E00\u9875',
        lastText: '\u6700\u540E\u4E00\u9875',
        numberText: '\u7B2C'
    };
    //设置默认语言包
    widget.defaultRegional = widget.regional['zh-CN'];
    widget.defaults = {
        perPages: 10,
        //@config {Number} 每页包含多少条目
        showPages: 10,
        //@config {Number} 中间部分一共要显示多少页(如果两边出现省略号,即它们之间的页数) 
        currentPage: 1,
        //@config {Number} 当前选中的页面 (按照人们日常习惯,是从1开始)，它会被高亮 
        _currentPage: 1,
        //@config {Number}  跳转台中的输入框显示的数字，它默认与currentPage一致
        totalItems: 200,
        //@config {Number} 总条目数
        totalPages: 0,
        //@config {Number} 总页数,通过Math.ceil(vm.totalItems / vm.perPages)求得
        pages: [],
        //@config {Array} 要显示的页面组成的数字数组，如[1,2,3,4,5,6,7]
        nextText: '>',
        //@config {String} “下一页”分页按钮上显示的文字 
        prevText: '<',
        //@config {String} “上一页”分页按钮上显示的文字 
        ellipseText: '\u2026',
        //@config {String} 省略的页数用什么文字表示 
        firstPage: 0,
        //@config {Number} 当前可显示的最小页码，不能小于1
        lastPage: 0,
        //@config {Number} 当前可显示的最大页码，不能大于totalPages
        alwaysShowNext: false,
        //@config {Boolean} 总是显示向后按钮
        alwaysShowPrev: false,
        //@config {Boolean} 总是显示向前按钮
        showFirstOmit: false,
        showLastOmit: false,
        showJumper: false,
        //是否显示输入跳转台
        /*
         * @config {Function} 用于重写模板的函数 
         * @param {String} tmpl
         * @param {Object} opts
         * @returns {String}
         */
        getTemplate: function (tmpl, opts) {
            return tmpl;
        },
        options: [],
        // @config {Array}数字数组或字符串数组或对象数组,但都转换为对象数组,每个对象都应包含text,value两个属性, 用于决定每页有多少页(看avalon.pager.ex3.html) 
        /**
         * @config {Function} 页面跳转时触发的函数,如果当前链接处于不可以点状态(oni-state-disabled),是不会触发的
         * @param {Event} e
         * @param {Number} page  当前页码
         */
        onJump: function (e, page) {
        }
    };
    function getPages(vm) {
        var c = vm.currentPage, max = Math.ceil(vm.totalItems / vm.perPages), pages = [], s = vm.showPages, left = c, right = c;
        //一共有p页，要显示s个页面
        vm.totalPages = max;
        if (max <= s) {
            for (var i = 1; i <= max; i++) {
                pages.push(i);
            }
        } else {
            pages.push(c);
            while (true) {
                if (pages.length >= s) {
                    break;
                }
                if (left > 1) {
                    //在日常生活是以1开始的
                    pages.unshift(--left);
                }
                if (pages.length >= s) {
                    break;
                }
                if (right < max) {
                    pages.push(++right);
                }
            }
        }
        vm.firstPage = pages[0] || 1;
        vm.lastPage = pages[pages.length - 1] || 1;
        vm.showFirstOmit = vm.firstPage > 2;
        vm.showLastOmit = vm.lastPage < max - 1;
        return pages    //[0,1,2,3,4,5,6]
;
    }
    return avalon;
}
)();
},{"avalon":2}],47:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var cachedScrollbarWidth, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, cachedScrollbarWidth, oldPosition = avalon.fn.position, oldOffset = avalon.fn.offset;
    avalon.fn.offset = function (options) {
        if (avalon.type(options) === 'object') {
            return setOffset.call(this, options);
        }
        return oldOffset.call(this);
    };
    var myAt = [
            'my',
            'at'
        ];
    function setPosition(options) {
        // make a copy, we don't want to modify arguments
        options = avalon.mix({}, options);
        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = avalon(options.of),
            //这是作为基准的对象
            within = getWithinInfo(options.within),
            //如果没有指定，默认为window
            scrollInfo = getScrollInfo(within), collision = (options.collision || 'flip').split(' '), offsets = {};
        //at 是将元素放置容器的九个点（四个角+每条边的中心+矩形中心）
        //my 基于上面九个点再定位
        dimensions = getDimensions(target);
        if (target[0].preventDefault) {
            // force left top to allow flipping
            options.at = 'left top';
        }
        targetWidth = dimensions.width;
        targetHeight = dimensions.height;
        targetOffset = dimensions.offset;
        // clone to reuse original targetOffset later
        basePosition = avalon.mix({}, targetOffset);
        // force my and at to have valid horizontal and vertical positions
        // if a value is missing or invalid, it will be converted to center
        myAt.forEach(function (el) {
            var pos = (options[el] || '').split(' '), horizontalOffset, verticalOffset;
            if (pos.length === 1) {
                pos = rhorizontal.test(pos[0]) ? pos.concat(['center']) : rvertical.test(pos[0]) ? ['center'].concat(pos) : [
                    'center',
                    'center'
                ];
            }
            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : 'center';
            pos[1] = rvertical.test(pos[1]) ? pos[1] : 'center';
            // calculate offsets
            horizontalOffset = roffset.exec(pos[0]);
            verticalOffset = roffset.exec(pos[1]);
            offsets[el] = [
                horizontalOffset ? horizontalOffset[0] : 0,
                verticalOffset ? verticalOffset[0] : 0
            ];
            // reduce to just the positions without the offsets
            options[el] = [
                rposition.exec(pos[0])[0],
                rposition.exec(pos[1])[0]
            ];
        });
        // normalize collision option
        if (collision.length === 1) {
            collision[1] = collision[0];
        }
        if (options.at[0] === 'right') {
            basePosition.left += targetWidth;
        } else if (options.at[0] === 'center') {
            basePosition.left += targetWidth / 2;
        }
        if (options.at[1] === 'bottom') {
            basePosition.top += targetHeight;
        } else if (options.at[1] === 'center') {
            basePosition.top += targetHeight / 2;
        }
        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];
        // return this.each(function() {
        var collisionPosition, elem = this[0], elemWidth = elem.offsetWidth, elemHeight = elem.offsetHeight, marginLeft = parseCss(this, 'marginLeft'), marginTop = parseCss(this, 'marginTop'), collisionWidth = elemWidth + marginLeft + parseCss(this, 'marginRight') + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, 'marginBottom') + scrollInfo.height, position = avalon.mix({}, basePosition), myOffset = getOffsets(offsets.my, elemWidth, elemHeight);
        if (options.my[0] === 'right') {
            position.left -= elemWidth;
        } else if (options.my[0] === 'center') {
            position.left -= elemWidth / 2;
        }
        if (options.my[1] === 'bottom') {
            position.top -= elemHeight;
        } else if (options.my[1] === 'center') {
            position.top -= elemHeight / 2;
        }
        position.left += myOffset[0];
        position.top += myOffset[1];
        // if the browser doesn't support fractions, then round for consistent results
        position.left = round(position.left);
        position.top = round(position.top);
        collisionPosition = {
            marginLeft: marginLeft,
            marginTop: marginTop
        };
        [
            'left',
            'top'
        ].forEach(function (dir) {
            flip[dir](position, {
                targetWidth: targetWidth,
                targetHeight: targetHeight,
                elemWidth: elemWidth,
                elemHeight: elemHeight,
                collisionPosition: collisionPosition,
                collisionWidth: collisionWidth,
                collisionHeight: collisionHeight,
                offset: [
                    atOffset[0] + myOffset[0],
                    atOffset[1] + myOffset[1]
                ],
                my: options.my,
                at: options.at,
                within: within,
                elem: elem
            });
        });
        return this.offset(position);
    }
    var flip = {
            left: function (position, data) {
                var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = data.my[0] === 'left' ? -data.elemWidth : data.my[0] === 'right' ? data.elemWidth : 0, atOffset = data.at[0] === 'left' ? data.targetWidth : data.at[0] === 'right' ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                if (overLeft < 0) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                        position.left += myOffset + atOffset + offset;
                    }
                } else if (overRight > 0) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                        position.left += myOffset + atOffset + offset;
                    }
                }
            },
            top: function (position, data) {
                var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = data.my[1] === 'top', myOffset = top ? -data.elemHeight : data.my[1] === 'bottom' ? data.elemHeight : 0, atOffset = data.at[1] === 'top' ? data.targetHeight : data.at[1] === 'bottom' ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                if (overTop < 0) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    if (position.top + myOffset + atOffset + offset > overTop && (newOverBottom < 0 || newOverBottom < abs(overTop))) {
                        position.top += myOffset + atOffset + offset;
                    }
                } else if (overBottom > 0) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    if (position.top + myOffset + atOffset + offset > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom)) {
                        position.top += myOffset + atOffset + offset;
                    }
                }
            }
        };
    avalon.fn.position = function (options) {
        if (avalon.type(options) === 'object') {
            return setPosition.call(this, options);
        }
        return oldPosition.call(this);
    };
    //===========================学习express的做法，将私有函数放在底部================================
    function getDimensions(elem) {
        var raw = elem[0];
        if (raw.nodeType === 9) {
            return {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: 0,
                    left: 0
                }
            };
        }
        if (avalon.isWindow(raw)) {
            return {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: elem.scrollTop(),
                    left: elem.scrollLeft()
                }
            };
        }
        if (raw.preventDefault) {
            return {
                width: 0,
                height: 0,
                offset: {
                    top: raw.pageY,
                    left: raw.pageX
                }
            };
        }
        return {
            width: raw.offsetWidth,
            height: raw.offsetHeight,
            offset: elem.offset()
        };
    }
    function getOffsets(offsets, width, height) {
        return [
            parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),
            parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)
        ];
    }
    function parseCss(element, property) {
        return parseInt(element.css(property), 10) || 0;
    }
    function setOffset(options) {
        var elem = this[0];
        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = this.css('position');
        // Set position first, in-case top/left are set even on static elem
        if (position === 'static') {
            elem.style.position = 'relative';
        }
        curOffset = this.offset();
        curCSSTop = this.css('top');
        curCSSLeft = this.css('left');
        calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
        // Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
        if (calculatePosition) {
            curPosition = this.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
        } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
        }
        if (options.top != null) {
            elem.style.top = options.top - curOffset.top + curTop + 'px';
        }
        if (options.left != null) {
            elem.style.left = options.left - curOffset.left + curLeft + 'px';
        }
        return this;
    }
    function scrollbarWidth() {
        //求出当前页面滚动条的宽，IE6-7好像固定是17px
        if (cachedScrollbarWidth !== void 0) {
            return cachedScrollbarWidth;
        }
        var w1, w2, div = avalon.parseHTML('<div style=\'display:block;position:absolute;width:50px;height:50px;overflow:hidden;\'><div style=\'height:100px;width:auto;\'></div></div>').firstChild, innerDiv = div.children[0];
        document.body.appendChild(div);
        w1 = innerDiv.offsetWidth;
        div.style.overflow = 'scroll';
        w2 = innerDiv.offsetWidth;
        if (w1 === w2) {
            w2 = div.clientWidth;
        }
        document.body.removeChild(div);
        return cachedScrollbarWidth = w1 - w2;
    }
    function getScrollInfo(within) {
        //within为getWithinInfo返回的对象
        var overflowX = within.isWindow ? '' : within.element.css('overflow-x'), overflowY = within.isWindow ? '' : within.element.css('overflow-y'), hasOverflowX = overflowX === 'scroll' || overflowX === 'auto' && within.width < within.element[0].scrollWidth, hasOverflowY = overflowY === 'scroll' || overflowY === 'auto' && within.height < within.element[0].scrollHeight;
        return {
            width: hasOverflowY ? scrollbarWidth() : 0,
            height: hasOverflowX ? scrollbarWidth() : 0
        };
    }
    function getWithinInfo(element) {
        //求得当前对象一切涉及尺寸的数值
        var withinElement = avalon(element || window), isWindow = avalon.isWindow(withinElement[0]);
        return {
            element: withinElement,
            isWindow: isWindow,
            offset: withinElement.offset() || {
                left: 0,
                top: 0
            },
            scrollLeft: withinElement.scrollLeft(),
            scrollTop: withinElement.scrollTop(),
            width: isWindow ? withinElement.width() : withinElement[0].offsetWidth,
            height: isWindow ? withinElement.height() : withinElement[0].offsetHeight
        };
    }
    return avalon;
}
)();
},{"avalon":2}],48:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var widget = avalon.ui.preview = function (element, data, vmodels) {
            var options = data.previewOptions, fileChangeCallback;
            var file = options.fileInput;
            if (typeof file === 'string') {
                file = document.getElementById(file);
            }
            var isLegalFile = false;
            try {
                if (file.nodeType === 1 && file.tagName === 'INPUT' && file.type === 'file') {
                    isLegalFile = true;
                }
            } catch (e) {
            }
            if (isLegalFile === false) {
                throw new Error('fileInput\u5FC5\u987B\u662Finput[type=file]\u5143\u7D20\u8282\u70B9\u6216\u5176ID\u503C');
            }
            options.fileInput = file;
            var oneImageTypes = avalon.oneObject([
                    'image/gif',
                    'image/png',
                    'image/jpeg'
                ]);
            function addSettings(node, opts) {
                node.style.width = opts.width + 'px';
                node.style.height = opts.height + 'px';
                node.className = opts.className;
            }
            function appendImage(element, src, opts) {
                var image = new Image();
                element.appendChild(image);
                addSettings(image, opts);
                image.src = src;
            }
            var vmodel = avalon.define(data.previewId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'fileInput',
                        'widgetElement'
                    ];
                    vm.widgetElement = element;
                    vm.rootElement = element;
                    vm.$init = function () {
                        var _vmodels = [vmodel].concat(vmodels);
                        fileChangeCallback = avalon.bind(file, 'change', function () {
                            var images = [];
                            var files = file.files || [];
                            for (var i = 0, el; el = files[i++];) {
                                if (oneImageTypes[el.type]) {
                                    images.push(el);
                                }
                            }
                            images.forEach(function (image) {
                                if (window.FileReader) {
                                    //方案1
                                    var reader = new FileReader();
                                    reader.onload = function (e) {
                                        appendImage(element, e.target.result, vm);
                                    };
                                    return reader.readAsDataURL(image);
                                }
                                var url;
                                if (window.createObjectURL !== void 0) {
                                    // basic
                                    url = window.createObjectURL(image);
                                } else if (window.URL !== void 0) {
                                    // mozilla IE11
                                    url = window.URL.createObjectURL(image);
                                } else if (window.webkitURL !== void 0) {
                                    // webkit or chrome
                                    url = window.webkitURL.createObjectURL(image);
                                }
                                if (typeof url === 'string') {
                                    return appendImage(element, url, vm);
                                }
                            });
                            if (images.length === 0 && document.selection) {
                                file.select();
                                var src = document.selection.createRange().text;
                                document.selection.empty();
                                var div = document.createElement('div');
                                element.appendChild(div);
                                addSettings(div, vm);
                                div.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)';
                                div.filters.item('DXImageTransform.Microsoft.AlphaImageLoader').src = src;
                            }
                        });
                        avalon.scan(element, _vmodels);
                        if (typeof options.onInit === 'function') {
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.$remove = function () {
                        avalon.unbind(file, 'change', fileChangeCallback);
                        avalon.log('at $remove');
                    };
                });
            return vmodel;
        };
    widget.vertion = 1;
    widget.defaults = {
        width: 200,
        height: 160,
        className: ''
    };
    return avalon;
}
)();
},{"avalon":2}],49:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div ms-if=\"!circle\" class=\"oni-progressbar oni-helper-reset oni-helper-clearfix oni-widget oni-widget-content oni-progressbar-normal\" \t  ms-class-100=\"oni-progressbar-indeterminate:indeterminate\" \n\t ms-class-101=\"oni-progressbar-haslabel:label\" \n\t ms-class-102=\"oni-progressbar-right:inTwo\" \n\t ms-visible=\"toggle\">\n\t<div ms-class-100=\"oni-helper-hidden:inTwo\" class=\"oni-progressbar-label\" ms-if=\"label\">{{_labelShower(value, 'l1') | html}}\n\t\t<b ms-if=\"!inTwo\" class=\"oni-progressbar-arrow\"></b>\n\t</div>\n\t<div class=\"oni-progressbar-bar\" ms-css-width=\"{{_cssMaker()}}\">\n\t\t<div class=\"oni-progressbar-label\" ms-if=\"_showLabel(label, inTwo)\">{{_labelShower(value) | html}}\n\t\t<b ms-if=\"inTwo\" class=\"oni-progressbar-arrow\"></b></div>\n\t\t<div class=\"oni-progressbar-overlay\" ms-if=\"_indeterminate()\">       \n\t\t</div>\n\t</div>\n\t<div class=\"oni-progressbar-bar oni-progressbar-bar-right\" ms-if=\"inTwo\" ms-css-width=\"{{_cssMaker('inTwo')}}\">\n\t\t<div class=\"oni-progressbar-label\" ms-if=\"_showLabel(label, inTwo)\">\n\t\t<div class=\"oni-progressbar-overlay\" ms-if=\"_indeterminate()\">\n\t\t</div>{{_labelShower(value, \"inTwo\") | html}}\n\t\t<b ms-if=\"inTwo\" class=\"oni-progressbar-arrow\"></b></div>\n\t</div>\n</div>\n<div ms-if=\"circle\" class=\"oni-progressbar oni-helper-reset oni-helper-clearfix oni-widget oni-widget-content oni-progressbar-circle\" ms-class-100=\"oni-progressbar-indeterminate:indeterminate\" ms-class-101=\"oni-progressbar-haslabel:label\" ms-css-height=\"circleRadius*2+'px'\" ms-css-width=\"circleRadius*2+'px'\">\n\t<div class=\"oni-helper-hidden oni-progressbar oni-progressbar-circle-par\"></div>\n\t<div class=\"oni-progressbar-hidden oni-progressbar-circle-bar\"></div>\n\t<svg ms-if=\"svgSupport\"\n\twidth=\"100%\" \n\theight=\"100%\" \n\tstyle=\"position:absolute;z-index:3;\" \n\tversion=\"1.1\" \n\txmlns=\"http://www.w3.org/2000/svg\">\n\t\t<path ms-attr-d=\"circleCoordinates\" \n\t\tms-if=\"circleCoordinates\" \n\t\tms-attr-stroke=\"circleBorderColor\" \n\t\tms-attr-stroke-width=\"circleBorderWidth\" \n\t\tstroke-linejoin=\"round\" ms-attr-fill=\"circleColor\"></path>\n\t\t<path ms-if=\"barCoordinates\" \n\t\tms-attr-d=\"barCoordinates\" \n\t\tms-attr-stroke=\"circleBarColor\" \n\t\tms-attr-stroke-width=\"circleBorderWidth\" \n\t\tstroke-linejoin=\"round\" \n\t\tfill=\"none\"></path>\n\t</svg>\n\t<v:arc ms-if=\"!svgSupport\"  \n    filled=\"false\" \n    stroked=\"true\" \n    ms-css-left=\"circleBorderWidth+'px'\" \n    ms-css-top=\"circleBorderWidth+'px'\" \n    ms-css-height=\"(circleRadius-circleBorderWidth)*2+'px'\" \n    ms-css-width=\"(circleRadius-circleBorderWidth)*2+'px'\" \n    ms-attr-strokecolor=\"circleBarColor\" \n    ms-attr-strokeweight=\"circleBorderWidth +'px'\" \n    style=\"position:absolute;z-index:3;behavior:url(#default#VML);text-indent:-1000px;overflow:hidden;\" \n    startangle=\"0\" \n    ms-attr-endangle=\"angel\">\n\t</v:arc>\n   \t<v:oval ms-if=\"!svgSupport\"  \n\tstroked=\"true\" \n    ms-css-left=\"circleBorderWidth+'px'\" \n    ms-css-top=\"circleBorderWidth+'px'\" \n\tms-css-height=\"(circleRadius-circleBorderWidth)*2+'px'\" \n\tms-css-width=\"(circleRadius-circleBorderWidth)*2+'px'\" \n\tms-attr-fillcolor=\"circleColor\" \n\tms-attr-strokecolor=\"circleBorderColor\" \n\tms-attr-strokeweight=\"circleBorderWidth+'px'\" \n\tstyle=\"position:absolute;z-index:2;behavior:url(#default#VML);\"></v:oval>\n    <div class=\"oni-progressbar-label\" \n\tms-css-line-height=\"circleRadius*2-4+'px'\" \n    ms-if=\"label\">{{_labelShower(value) | html}}</div>\n</div>";

module.exports = (
function () {
    // 园的半径，边框宽度
    function circleValueList(r, bw) {
        var arr = [], r = r - bw, arc, x, y, res;
        for (var i = 0; i <= 100; i++) {
            arc = Math.PI / 2 - Math.PI / 50 * i;
            x = Math.cos(arc) * r + r * 1 + bw * 1;
            y = (1 - Math.sin(arc).toFixed(4)) * r + bw * 1;
            res = (i ? ' L' : 'M') + x + ' ' + y + (i == 100 ? 'Z' : '');
            arr.push(res);
        }
        return arr;
    }
    var svgSupport = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;
    var widget = avalon.ui.progressbar = function (element, data, vmodels) {
            var options = data.progressbarOptions;
            //方便用户对原始模板进行修改,提高制定性
            options.template = options.getTemplate(template, options);
            var vmodel = avalon.define(data.progressbarId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.rootElement = element;
                    var newElem = element, simulateTimer, barElement, labelElement, barParElement;
                    vm.$d = svgSupport && vm.circle && circleValueList(options.circleRadius, options.circleBorderWidth) || [];
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'svgSupport',
                        'rootElement'
                    ];
                    vm.svgSupport = svgSupport;
                    vm.ended = false;
                    // svg绘制一个圆，路径数据
                    vm.circleCoordinates = '';
                    // svg绘制扇形，进度条效果，路径数据
                    vm.barCoordinates = '';
                    vm.angel = options.value || 0;
                    vm.successValue = vm.countDown ? 0 : 100;
                    vm.value = vm.countDown ? 100 : vm.value;
                    vm.angel = vm.countDown ? 360 : 360 * vm.angel / 100;
                    var inited;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        newElem.innerHTML = vmodel.template;
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            // callback after inited
                            if (typeof options.onInit === 'function') {
                                //vmodels是不包括vmodel的 
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        if (vmodel.label) {
                            var nodes = newElem.getElementsByTagName('div');
                            avalon.each(nodes, function (i, item) {
                                var ele = avalon(item);
                                if (vmodel.circle) {
                                    if (ele.hasClass('oni-progressbar-circle-par')) {
                                        barParElement = ele;
                                    } else if (ele.hasClass('oni-progressbar-circle-bar')) {
                                        barElement = ele;
                                    }
                                } else {
                                    if (ele.hasClass('oni-progressbar-label')) {
                                        labelElement = item;
                                    } else if (ele.hasClass('oni-progressbar-bar')) {
                                        barElement = item;
                                        barParElement = item.parentNode;
                                    }
                                }
                            });
                        }
                        vmodel.$d = svgSupport && vmodel.circle && circleValueList(vmodel.circleRadius, vmodel.circleBorderWidth) || [];
                        vmodel.circleBar();
                        vmodel.circleCoordinates = vmodel.$d.join('');
                        // 开启模拟效果
                        vmodel._simulater();
                        if (typeof options.onInit === 'function') {
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    // 适用svg绘制圆圈的v生成方式
                    // vml不走这个逻辑，有直接绘制圆弧的方法
                    vm.circleBar = function (v) {
                        if (vmodel.circle || !svgSupport) {
                            var v = v || vmodel.value || 0;
                            v = v > 100 ? 100 : v > 0 ? v : 0;
                            vmodel.barCoordinates = v == 100 ? vmodel.circleCoordinates : vmodel.$d.slice(0, v + 1).join('') + (v < 100 && v ? '' : 'Z');
                        }
                    };
                    // 计算label tip的位置
                    vm._getLeft = function () {
                        if (vmodel.circle || !labelElement || vmodel.inTwo)
                            return;
                        var bw = barElement && barElement.offsetWidth || 0, lw = labelElement.offsetWidth || 0, bpw = barParElement && barParElement.offsetWidth || 0, res = bpw - bw > lw + 2 ? bw - lw / 2 + 2 : bpw - lw;
                        res = res > 0 ? res : 0;
                        labelElement.style.left = res + 'px';
                    };
                    // 进度条模拟
                    vm._simulater = function () {
                        if (vmodel.simulate !== false && !vmodel.indeterminate) {
                            clearTimeout(simulateTimer);
                            simulateTimer = setTimeout(function () {
                                if (vmodel.success || vmodel.ended || vmodel.indeterminate)
                                    return clearTimeout(simulateTimer);
                                var v = vmodel.simulater(vmodel.value || 0, vmodel);
                                if (vmodel.success) {
                                    v = vmodel.successValue;
                                    vmodel.value = v;
                                    return;
                                }
                                if (vmodel.ended)
                                    return;
                                if (vmodel.countDown) {
                                    if (v <= 0)
                                        return;
                                } else {
                                    if (v >= 100)
                                        return;
                                }
                                vmodel.value = v;
                                simulateTimer = setTimeout(arguments.callee, vmodel.simulate);
                            }, vmodel.simulate);
                        }
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                    // 设置bar元素宽度
                    vm._cssMaker = function (inTwo) {
                        if (vmodel.value === false && vmodel.indeterminate || vmodel.value == 100)
                            return inTwo ? 0 : '100%';
                        return inTwo ? 100 - (vmodel.value || 0) + '%' : (vmodel.value || 0) + '%';
                    };
                    // 不知当前进度
                    vm._indeterminate = function () {
                        return vmodel.indeterminate && vmodel.value == false && !vmodel.inTwo;
                    };
                    // 进度条分成左右两段显示的时候是否显示label
                    vm._showLabel = function (label, inTwo) {
                        return label && inTwo;
                    };
                    // 展示label
                    vm._labelShower = function (value) {
                        return vmodel.labelShower.call(vmodel, arguments[0], arguments[1], vmodel);
                    };
                    //@interface start() 开始进度推进，该接口适用于模拟进度条
                    vm.start = function () {
                        vmodel.indeterminate = false;
                        vmodel.ended = false;
                        vmodel._simulater();
                    };
                    //@interface end(value) 结束进度推进，该接口适用于模拟进度条，value为100表示结束，failed表示失败，undefine等于pause，其他则终止于value，并在label上显示
                    vm.end = function (value) {
                        clearTimeout(simulateTimer);
                        vmodel.ended = true;
                        if (value != void 0)
                            vmodel.value = value;
                    };
                    //@interface reset(value) 重置设置项，参数可选，为需要重设的值
                    vm.reset = function (value) {
                        var obj = {};
                        avalon.mix(obj, {
                            value: value != void 0 ? value : widget.defaults.value,
                            indeterminate: widget.defaults.indeterminate,
                            success: false
                        });
                        avalon.mix(vmodel, obj);
                        vmodel.ended = false;
                        vmodel.successValue = vmodel.countDown ? 0 : 100;
                        vmodel.value = vmodel.countDown ? 100 : vmodel.value;
                        vmodel._simulater();
                    };
                    //@interface progress(value) 设置value值，其实也可以直接设置vmodel.value
                    vm.progress = function (value) {
                        vmodel.value = value;
                    };
                });
            // 模拟进度条情形下，不监控success属性的变化
            vmodel.$watch('success', function (newValue) {
                if (newValue && vmodel.simulate)
                    vmodel.value = vmodel.successValue;
                if (newValue)
                    vmodel.onComplete.call(vmodel);
            });
            vmodel.$watch('value', function (newValue) {
                if (newValue == vmodel.successValue)
                    vmodel.success = true;
                vmodel.circle && vmodel.circleBar();
                vmodel._getLeft();
                vmodel.angel = 360 * newValue / 100;
                vmodel.onChange && vmodel.onChange.call(vmodel, newValue);
            });
            return vmodel;
        };
    widget.defaults = {
        toggle: true,
        //@config 组件是否显示，可以通过设置为false来隐藏组件
        value: false,
        //@config 当前进度值 0 - 100 or false
        label: true,
        //@config 是否在进度条上显示进度数字提示
        simulate: false,
        //@config 是否模拟进度条效果，默认为否，模拟的时候需要调用触发告知完成，模拟会采用模拟函数及算子进行模拟，取值为int表示动画效果间隔ms数
        indeterminate: false,
        //@config 是否不确定当前进度，现在loading效果
        countDown: false,
        //@config 倒计时
        inTwo: false,
        //@config 是否显示左右两段
        circle: false,
        //@config 圆形
        circleColor: '#ffffff',
        //@config 圆形填充色彩，可以配制为从皮肤中提取，只在初始化的时候提取
        circleBorderColor: '#dedede',
        //@config 圆形边框颜色，，可以配制为从皮肤中提取，只在初始化的时候提取
        circleBarColor: '#619FE8',
        //@config 圆形进度条边框颜色，可以配制为从皮肤中提取，只在初始化的时候提取
        circleRadius: 38,
        //@config 圆形的半径，可以配制为从皮肤中提取，只在初始化的时候提取
        circleBorderWidth: 4,
        //@config 圆形的边框宽度，可以配制为从皮肤中提取，只在初始化的时候提取
        success: false,
        //@config 是否完成，进度为100时或者外部将success置为true，用于打断模拟效果
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        //@config simulater(value, vmodel) 模拟进度进行效果函数，参数为当前进度和vmodel，默认return value + 5 * Math.random() >> 0
        simulater: function (i, vmodel) {
            if (vmodel.countDown)
                return i - 5 * Math.random() >> 0;
            return i + 5 * Math.random() >> 0;
        },
        //@config getTemplate(tmp, opts) 用于修改模板的接口，默认不做修改
        getTemplate: function (tmpl, opts) {
            return tmpl;
        },
        //@config getTemplate(tpl, opts) 定制修改模板接口
        //@config onChange(value) value发生变化回调，this指向vmodel
        onChange: avalon.noop,
        //@config onComplete() 完成回调，默认空函数，this指向vmodel
        onComplete: avalon.noop,
        //@config labelShower(value, isContainerLabel) 用于格式化进度条上label显示文字，默认value为false显示“loading…”，完成显示“complete!”，失败显示“failed!”，第二个参数是是否是居中显示的label，两段显示的时候，默认将这个label内容置空，只显示两边的label,this指向vmodel
        labelShower: function (value, l1, vmodel) {
            var value = l1 == 'inTwo' ? 100 - (value || 0) : value;
            var successValue = vmodel ? vmodel.successValue : 100;
            if (l1 == 'l1' && vmodel.inTwo)
                return '';
            if (value === false)
                return 'loading\u2026';
            if (value === 'failed')
                return 'failed!';
            if (value == successValue)
                return 'complete!';
            return value + '%';
        },
        $author: 'skipper@123'
    };
}
)();
},{"avalon":2}],50:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<label ms-on-mouseout=\"mouseout\">\n    <span class=\"oni-icon\"\n        ms-repeat=\"list\"\n        ms-css-color=\"{{floatValue > $index ? selectedColor : notSelectedColor}}\"\n        ms-css-font-size=\"{{size}}px\"\n        ms-css-margin-right=\"{{margin}}px\"\n        ms-on-mouseover=\"mouseover($index)\"\n        ms-click=\"select($index)\"\n    >{{floatValue > $index ? selectedContent : notSelectedContent | html}}</span>\n</label>\n";

module.exports = (
function () {
    var getFunc = function (name, vmodels) {
            var changeVM = avalon.getModel(name, vmodels);
            return changeVM && changeVM[1][changeVM[0]] || avalon.noop;
        }, canEdit = function (el) {
            var tagName = el.tagName.toUpperCase();
            return tagName === 'INPUT' || tagName === 'SELECT';
        };
    var widget = avalon.ui.rating = function (element, data, vmodels) {
            var options = data.ratingOptions, onSelect = getFunc('onSelect', vmodels), onFloat = getFunc('onFloat', vmodels), ratingTemplate = options.getTemplate(sourceHTML), rating;
            var vmodel = avalon.define(data.ratingId, function (vm) {
                    avalon.mix(vm, options);
                    vm.rootElement = '';
                    vm.widgetElement = element;
                    vm.value = vm.floatValue = element.value;
                    vm.list = new Array(options.max);
                    vm.mouseover = function (index) {
                        vmodel.floatValue = index + 1;
                    };
                    vm.select = function (index) {
                        vmodel.value = index + 1;
                    };
                    vm.mouseout = function () {
                        vmodel.floatValue = vmodel.value;
                    };
                    vm.setByIp = function () {
                        var value = parseInt(element.value);
                        if (value !== vmodel.value) {
                            vmodel.value = vmodel.floatValue = value ? value : 0;
                        }
                    };
                    vm.getRating = function () {
                        return vmodel.value;
                    };
                    vm.set = function (value) {
                        vmodel.value = value;
                        vmodel.floatValue = value;
                    };
                    vm.$init = function () {
                        rating = avalon.parseHTML(ratingTemplate).firstChild;
                        vm.rootElement = rating;
                        if (canEdit(element)) {
                            var parentNode = element.parentNode;
                            parentNode.insertBefore(rating, element);
                            parentNode.insertBefore(element, rating);
                            element.setAttribute('data-duplex-changed', 'setByIp');
                            vmodel.$watch('value', function (v) {
                                element.value = v;
                            });
                        } else {
                            vmodel.value = vmodel.floatValue = vmodel.defaultValue;
                            element.appendChild(rating);
                        }
                        avalon.scan(rating.parentNode, [vmodel].concat(vmodels));
                        if (typeof options.onInit === 'function') {
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.$remove = function () {
                        rating.parentNode.removeChild(rating);
                        rating = null;
                    };
                    vm.$watch('value', function (v) {
                        onSelect.call(null, v, data.ratingId, avalon(element).data());
                    });
                    vm.$watch('floatValue', function (v) {
                        onFloat.call(null, v, data.ratingId, avalon(element).data());
                    });
                });
            return vmodel;
        };
    widget.defaults = {
        defaultValue: 3,
        max: 5,
        margin: 3,
        notSelectedColor: '#CECECE',
        notSelectedContent: '&#xf08A;',
        selectedColor: '#00A3C2',
        selectedContent: '&#xf038;',
        size: 20,
        getTemplate: function (tmp) {
            return tmp;
        }
    };
    return avalon;
}
)();
},{"../avalon.getModel":6}],51:[function(innerRequire,module,exports){
var avalon = innerRequire("../draggable/avalon.draggable");

module.exports = (
function () {
    var draggable = avalon.bindingHandlers.draggable;
    var resizable = avalon.bindingHandlers.resizable = function (data, vmodels) {
            var args = data.value.match(avalon.rword) || [
                    '$',
                    'resizable'
                ];
            var ID = args[0].trim(), opts = args[1], model, vmOptions;
            if (ID && ID != '$') {
                model = avalon.vmodels[ID];
                //如果指定了此VM的ID
                if (!model) {
                    return;
                }
            }
            if (!model) {
                //如果使用$或绑定值为空，那么就默认取最近一个VM，没有拉倒
                model = vmodels.length ? vmodels[0] : null;
            }
            var fnObj = model || {};
            if (model && typeof model[opts] === 'object') {
                //如果指定了配置对象，并且有VM
                vmOptions = model[opts];
                if (vmOptions.$model) {
                    vmOptions = vmOptions.$model;
                }
                fnObj = vmOptions;
            }
            var element = data.element;
            element.removeAttribute('ms-resizable');
            var options = avalon.mix({}, resizable.defaults, vmOptions || {}, avalon.getWidgetData(element, 'resizable'));
            //修正drag,stop为函数
            'stop,start,resize,drag'.replace(avalon.rword, function (name) {
                var method = options[name];
                if (typeof method === 'string') {
                    if (typeof fnObj[method] === 'function') {
                        options[name] = fnObj[method];
                    } else {
                        options[name] = avalon.noop;
                    }
                }
            });
            options.handles = options.handles.match(avalon.rword) || ['all'];
            options._aspectRatio = typeof options.aspectRatio === 'number';
            var target = avalon(element);
            target.bind('mousemove', function (e) {
                if (options.started)
                    return;
                var dir = getDirection(e, target, options);
                options._cursor = target.css('cursor');
                //保存原来的光标样式
                if (dir === '') {
                    target.css('cursor', 'default');
                } else {
                    target.css('cursor', dir + '-resize');
                }
            });
            target.bind('mouseleave', function (e) {
                target.css('cursor', options._cursor);
                //还原光标样式
                delete options._cursor;
            });
            var _drag = options.drag || avalon.noop;
            var body = document.body;
            //在dragstart回调中,我们通过draggable已经设置了
            //data.startPageX = event.pageX;    data.startPageY = event.pageY;
            //data.originalX = offset.left; data.originalY = offset.top;
            options.beforeStart = function (event, data) {
                var target = data.$element;
                data.dragX = data.dragY = false;
                var dir = getDirection(event, target, data);
                if (dir === '')
                    return;
                avalon.mix(data, {
                    dir: dir,
                    startResizeLeft: getCssValue(target, 'left'),
                    startResizeTop: getCssValue(target, 'top'),
                    startResizeWidth: target.width(),
                    startResizeHeight: target.height()
                });
                //开始缩放时的位置大小
                'startResizeLeft,startResizeTop,startResizeWidth,startResizeHeight'.replace(avalon.rword, function (word) {
                    data[word.replace('startR', 'r')] = data[word];
                });
                //等比例缩放
                data.aspectRatio = data._aspectRatio ? data.aspectRatio : data.startResizeWidth / data.startResizeHeight || 1;
                event.type = 'resizestart';
                //data.start.call(target[0], event, data); //触发用户回调
                avalon(body).css('cursor', dir + '-resize');
            };
            options.drag = function (event, data) {
                if (data.dir) {
                    refresh(event, data.$element, data);
                    event.type = 'resize';
                    data.resize.call(data.element, event, data);    //触发用户回调
                } else if ('_cursor' in options) {
                    _drag.call(data.element, event, data);    //触发用户回调
                }
            };
            options.beforeStop = function (event, data) {
                if (data.dir) {
                    var target = data.$element;
                    refresh(event, target, data);
                    delete data.dir;
                    event.type = 'resizeend';
                    //   data.stop.call(target[0], event, data); //触发用户回调
                    avalon(body).css('cursor', 'default');
                }
            };
            data.value = '';
            data.draggable = options;
            draggable(data, vmodels);
        };
    resizable.defaults = {
        handles: 'n,e,s,w,ne,se,sw,nw',
        maxHeight: 10000,
        maxWidth: 10000,
        minHeight: 10,
        minWidth: 10,
        cursor: false,
        edge: 5,
        start: avalon.noop,
        resize: avalon.noop,
        stop: avalon.noop
    };
    /**
     * 用于修正拖动元素靠边边缘的区域的鼠标样式
     * @param {Event} e
     * @param {Mass} target
     * @param {Object} data 经过处理的配置对象
     */
    function getDirection(e, target, data) {
        var dir = '';
        var offset = target.offset();
        var width = target[0].offsetWidth;
        var height = target[0].offsetHeight;
        var edge = data.edge;
        if (e.pageY > offset.top && e.pageY < offset.top + edge) {
            dir += 'n';
        } else if (e.pageY < offset.top + height && e.pageY > offset.top + height - edge) {
            dir += 's';
        }
        if (e.pageX > offset.left && e.pageX < offset.left + edge) {
            dir += 'w';
        } else if (e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
            dir += 'e';
        }
        for (var i = 0, handle; handle = data.handles[i++];) {
            if (handle === 'all' || handle === dir) {
                return dir;
            }
        }
        return '';
    }
    function getCssValue(el, css) {
        //对样式值进行处理,强制转数值
        var val = parseInt(el.css(css), 10);
        if (isNaN(val)) {
            return 0;
        } else {
            return val;
        }
    }
    function refresh(event, target, data) {
        //刷新缩放元素
        var b = data;
        if (data._aspectRatio || event.shiftKey) {
            var aspest = true, pMinWidth = b.minHeight * data.aspectRatio, pMinHeight = b.minWidth / data.aspectRatio, pMaxWidth = b.maxHeight * data.aspectRatio, pMaxHeight = b.maxWidth / data.aspectRatio;
            if (pMinWidth > b.minWidth) {
                b.minWidth = pMinWidth;
            }
            if (pMinHeight > b.minHeight) {
                b.minHeight = pMinHeight;
            }
            if (pMaxWidth < b.maxWidth) {
                b.maxWidth = pMaxWidth;
            }
            if (pMaxHeight < b.maxHeight) {
                b.maxHeight = pMaxHeight;
            }
        }
        if (data.dir.indexOf('e') !== -1) {
            var width = data.startResizeWidth + event.pageX - data.startPageX;
            width = Math.min(Math.max(width, b.minWidth), b.maxWidth);
            data.resizeWidth = width;
            if (aspest) {
                data.resizeHeight = width / data.aspectRatio;
            }
        }
        if (data.dir.indexOf('s') !== -1) {
            var height = data.startResizeHeight + event.pageY - data.startPageY;
            height = Math.min(Math.max(height, b.minHeight), b.maxHeight);
            data.resizeHeight = height;
            if (aspest) {
                data.resizeWidth = height * data.aspectRatio;
            }
        }
        if (data.dir.indexOf('w') !== -1) {
            data.resizeWidth = data.startResizeWidth - event.pageX + data.startPageX;
            if (data.resizeWidth >= b.minWidth && data.resizeWidth <= b.maxWidth) {
                data.resizeLeft = data.startResizeLeft + event.pageX - data.startPageX;
                if (aspest) {
                    data.resizeTop = data.startResizeTop + (event.pageX - data.startPageX) / data.aspectRatio;
                }
            }
        }
        if (data.dir.indexOf('n') !== -1) {
            data.resizeHeight = data.startResizeHeight - event.pageY + data.startPageY;
            if (data.resizeHeight >= b.minHeight && data.resizeHeight <= b.maxHeight) {
                data.resizeTop = data.startResizeTop + event.pageY - data.startPageY;
                if (aspest) {
                    data.resizeLeft = data.startResizeLeft + (event.pageY - data.startPageY) * data.aspectRatio;
                }
            }
        }
        var obj = {
                left: data.resizeLeft,
                top: data.resizeTop,
                width: data.resizeWidth,
                height: data.resizeHeight
            };
        for (var i in obj) {
            target.css(i, obj[i]);
        }
    }
    return avalon;
}
)();
},{"../draggable/avalon.draggable":20}],52:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div ms-repeat-pos=\"_position\" class=\"oni-scrollbar oni-helper-reset oni-helper-clearfix oni-widget\"\n     ms-visible=\"!disabled\"\n\t ms-class-100=\"oni-scrollbar-{{pos}}\" \n\t ms-class-101=\"oni-scrollbar-{{size}} oni-scrollbar-{{pos}}-{{size}}\" \n\t ms-class-102=\"oni-state-disabled:disabled\" \n\t ms-mouseenter=\"_show($event, 'always', $index)\" \n\t ms-visible=\"toggle\">\n\t<div ms-if=\"showBarHeader\" class=\"oni-scrollbar-arrow oni-scrollbar-arrow-up\" \n\t ms-click=\"_arrClick($event, 'up', pos, $index)\" \n\t ms-mousedown=\"_arrDown($event,'up', pos, $index)\" \n\t ms-class-100=\"oni-state-disabled:disabled\" \n\t ms-mouseup=\"_arrDown($event,'up', pos, $index,'release')\" \n\t ms-hover=\"oni-state-hover oni-scrollbar-arrow-hover\"><b class=\"oni-scrollbar-trangle  oni-scrollbar-trangle-up\"></b></div>\n\t<div class=\"oni-scrollbar-draggerpar\" ms-click=\"_barClick($event, pos, $index)\">\n\t\t<div class=\"oni-scrollbar-dragger\"\n\t\tms-attr-data-draggable-axis=\"pos == 'left' || pos == 'right' ? 'y' : 'x'\" \n\t\tms-click=\"_stopPropagation($event)\" \n\t\tms-class-100=\"oni-state-disabled:disabled\" \n\t\tms-mouseover=\"_show($event,'always',$index)\" \n\t\tms-mousedown=\"_draggerDown($event, true)\" \n\t\tms-mouseup=\"_draggerDown($event, false)\" \n\t\tms-mouseout=\"_draggerDown($event, false)\" \n\t\tms-hover=\"oni-state-hover\"\n\t\t>{{draggerHTML | html}}</div>\n\t</div>\n\t<div ms-if=\"showBarHeader\" class=\"oni-scrollbar-arrow oni-scrollbar-arrow-down\"\n\t ms-click=\"_arrClick($event, 'down', pos, $index)\"\n\t ms-mousedown=\"_arrDown($event,'down', pos, $index)\" \n\t ms-mouseup=\"_arrDown($event,'down', pos, $index,'release')\" \n\t ms-class-100=\"oni-state-disabled:disabled\" \n\t ms-hover=\"oni-state-hover\"><b class=\"oni-scrollbar-trangle oni-scrollbar-trangle-down\"></b></div>\n</div>";
innerRequire("../draggable/avalon.draggable");

module.exports = (
function () {
    // get by className, not strict
    function getByClassName(cname, par) {
        var par = par || document.body;
        if (par.getElementsByClassName) {
            return par.getElementsByClassName(cname);
        } else {
            var child = par.getElementsByTagName('*'), arr = [];
            avalon.each(child, function (i, item) {
                var ele = avalon(item);
                if (ele.hasClass(cname))
                    arr.push(item);
            });
            return arr;
        }
    }
    function strToNumber(s) {
        return Math.round(parseFloat(s)) || 0;
    }
    // 响应wheel,binded
    var wheelBinded, wheelArr = [], keyArr = [];
    var widget = avalon.ui.scrollbar = function (element, data, vmodels) {
            var options = data.scrollbarOptions;
            //方便用户对原始模板进行修改,提高定制性
            options.template = options.getTemplate(template, options);
            var vmodel = avalon.define(data.scrollbarId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.draggerHeight = vm.draggerWidth = '';
                    vm.inFocuse = false;
                    vm._position = [];
                    vm.rootElement = element;
                    vm.viewElement = element;
                    vm.$skipArray = ['rootElement'];
                    vm.dragging = false;
                    var inited, bars = [], scroller;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        vmodel.widgetElement.style.position = 'relative';
                        //document body情形需要做一下修正
                        vmodel.viewElement = vmodel.widgetElement == document.body ? document.getElementsByTagName('html')[0] : vmodel.widgetElement;
                        vmodel.viewElement.style.overflow = vmodel.viewElement.style.overflowX = vmodel.viewElement.style.overflowY = 'hidden';
                        if (vmodel.widgetElement == document.body)
                            vmodel.widgetElement.style.overflow = vmodel.widgetElement.style.overflowX = vmodel.widgetElement.style.overflowY = 'hidden';
                        vmodel._position = vmodel.position.split(',');
                        var frag = avalon.parseHTML(options.template);
                        vmodel.widgetElement.appendChild(frag);
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        var children = vmodel.widgetElement.childNodes;
                        avalon.each(children, function (i, item) {
                            var ele = avalon(item);
                            if (ele.hasClass('oni-scrollbar') || ele.hasClass('ui-scrollbar')) {
                                bars.push(ele);
                            } else if (ele.hasClass('oni-scrollbar-scroller') || ele.hasClass('ui-scrollbar-scroller')) {
                                scroller = ele;
                            }
                        });
                        // 竖直方向支持滚轮事件
                        if (vmodel.position.match(/left|right/g)) {
                            var vs = [], hs = [];
                            avalon.each(vmodel._position, function (i, item) {
                                if (item.match(/left|right/g)) {
                                    vs.push([
                                        i,
                                        item
                                    ]);
                                } else {
                                    hs.push([
                                        i,
                                        item
                                    ]);
                                }
                            });
                            function wheelLike(diretion, arr, e, func) {
                                avalon.each(arr, function (i, item) {
                                    if (!bars[i].data('oni-scrollbar-needed'))
                                        return;
                                    vmodel._computer(func || function (obj) {
                                        return vmodel._clickComputer(obj, diretion);
                                    }, item[0], item[1], function (breakOut) {
                                        if (!breakOut)
                                            e.preventDefault();
                                    }, 'breakOutCallbackCannotIgnore');
                                });
                            }
                            function myOnWheel(e) {
                                if (vmodel.disabled)
                                    return;
                                if (vmodel.inFocuse) {
                                    wheelLike(e.wheelDelta > 0 ? 'up' : 'down', vs, e);
                                }
                            }
                            function myKeyDown(e) {
                                if (vmodel.disabled)
                                    return;
                                var k = e.keyCode;
                                if (k > 32 && k < 41 & vmodel.inFocuse) {
                                    // 方向按键
                                    if (k in {
                                            37: 1,
                                            39: 1,
                                            38: 1,
                                            40: 1
                                        }) {
                                        wheelLike(k in {
                                            37: 1,
                                            38: 1
                                        } ? 'up' : 'down', k in {
                                            38: 1,
                                            40: 1
                                        } ? vs : hs, e)    // end or home
                                                           // pageup or pagedown
;
                                    } else {
                                        var diretion = k in {
                                                33: 1,
                                                36: 1
                                            } ? 'up' : 'down';
                                        wheelLike(diretion, vs, e, function (obj) {
                                            var _top = scroller[0].scrollTop;
                                            // home, pageup
                                            if (k in {
                                                    33: 1,
                                                    36: 1
                                                }) {
                                                if (_top)
                                                    e.preventDefault()    // end, pagedown
;
                                            } else {
                                                if (_top < obj.scrollerH - obj.viewH)
                                                    e.preventDefault();
                                            }
                                            // home or end
                                            // end plus 100, easy to trigger breakout
                                            if (k in {
                                                    36: 1,
                                                    35: 1
                                                }) {
                                                return {
                                                    x: 0,
                                                    y: k == 36 ? 0 : obj.draggerparHeight - obj.draggerHeight + 100
                                                }    // pageup or pagedown
                                                     // a frame
;
                                            } else {
                                                // frame 计算方式更新为百分比
                                                var frame = (obj.draggerparHeight - obj.draggerHeight) * obj.viewH / (obj.scrollerH - obj.viewH);
                                                return vmodel._clickComputer(obj, diretion, strToNumber(frame) || 1);
                                            }
                                        });
                                    }
                                }
                            }
                            // document.body直接如此处理
                            if (vmodel.widgetElement == document.body) {
                                vmodel.inFocuse = true;
                                wheelArr.push(myOnWheel);
                                keyArr.push(myKeyDown);
                            } else {
                                avalon.bind(element, 'mouseenter', function (e) {
                                    vmodel.inFocuse = true;
                                    wheelArr.push(myOnWheel);
                                    keyArr.push(myKeyDown);
                                });
                                avalon.bind(element, 'mouseleave', function (e) {
                                    vmodel.inFocuse = false;
                                    for (var i = 0, len = wheelArr.length; i < len; i++) {
                                        if (wheelArr[i] === myOnWheel) {
                                            wheelArr.splice(i, 1);
                                            keyArr.splice(i, 1);
                                            break;
                                        }
                                    }
                                });
                            }
                            // 所有组件实例公用一个事件绑定
                            if (!wheelBinded) {
                                wheelBinded = true;
                                avalon.bind(document, 'mousewheel', function (e) {
                                    var cb = wheelArr[wheelArr.length - 1];
                                    cb && cb(e);
                                });
                                // keyborad,,,simida
                                // left 37
                                // right 39
                                // top 38
                                // down 40
                                // pageup 33
                                // pagedown 34
                                // home 36
                                // end 35
                                avalon.bind(document, 'keydown', function (e) {
                                    var cb = keyArr[keyArr.length - 1];
                                    cb && cb(e);
                                });
                            }
                        }
                        avalon.bind(element, 'mouseenter', function () {
                            avalon.each(bars, function (i, item) {
                                vmodel._show('e', false, item);
                            });
                        });
                        avalon.bind(element, 'mouseleave', function () {
                            vmodel._hide();
                        });
                        vmodel.update('init');
                    };
                    // data-draggable-before-start="beforeStartFn" 
                    // data-draggable-start="startFn" 
                    // data-draggable-drag="dragFn" 
                    // data-draggable-before-stop="beforeStopFn" 
                    // data-draggable-stop="stopFn" 
                    // data-draggable-containment="parent" 
                    vm.$draggableOpts = {
                        beforeStart: function () {
                            vmodel.dragging = true;
                        },
                        drag: function (e, data) {
                            var dr = avalon(data.element);
                            vmodel._computer(function (obj) {
                                var a = {
                                        x: strToNumber(dr.css('left')) >> 0,
                                        y: strToNumber(dr.css('top')) >> 0
                                    };
                                // easy to break out
                                if (a.x == obj.draggerparWidth - obj.draggerWidth)
                                    a.x += 100;
                                if (a.y == obj.draggerparHeight - obj.draggerHeight)
                                    a.y += 100;
                                return a;
                            }, dr.attr('oni-scrollbar-index'), dr.attr('oni-scrollbar-pos'));
                        },
                        handle: function (e, data) {
                            return !vmodel.disabled && this;
                        },
                        containment: 'parent'
                    };
                    vm.$draggableOpts.stop = function (e, data) {
                        vmodel.$draggableOpts.drag(e, data);
                        vmodel.dragging = false;
                        avalon(data.element).removeClass('oni-state-active');
                    };
                    vm.$remove = function () {
                        avalon.each(bars, function (i, bar) {
                            bar[0] && bar[0].parentNode && bar[0].parentNode.removeChild(bar[0]);
                        });
                    };
                    vm._onScroll = function () {
                        if (vmodel.show != 'scrolling')
                            return;
                        avalon.each(bars, function (i, item) {
                            vmodel._show('e', false, item);
                        });
                    };
                    vm._show = function (e, always, index) {
                        if (vmodel.show != 'scrolling')
                            return;
                        e.stopPropagation && e.stopPropagation();
                        var item = index.css ? index : bars[index];
                        if (item) {
                            clearTimeout(item.data('oni-scrollbar-hidetimer'));
                            item.css('visibility', 'visible');
                            item.css('opacity', 1);
                            if (!always) {
                                item.data('oni-scrollbar-hidetimer', setTimeout(function () {
                                    item.css('opacity', 0);
                                }, 1000));
                            }
                        }
                    };
                    vm._hide = function (e, index) {
                        if (vmodel.show != 'scrolling')
                            return;
                        if (index && bars[index]) {
                            bars[index].css('opacity', 0);
                        } else {
                            avalon.each(bars, function (i, item) {
                                item.css('opacity', 0);
                            });
                        }
                    };
                    //@interface getBars()返回所有的滚动条元素，avalon元素对象
                    vm.getBars = function () {
                        return bars;
                    };
                    //@interface getScroller()返回scroller avalon对象
                    vm.getScroller = function () {
                        return scroller;
                    };
                    //@interface update()更新滚动条状态，windowresize，内容高度变化等情况下调用，不能带参数
                    vm.update = function (ifInit, x, y) {
                        if (vmodel.disabled)
                            return;
                        var ele = avalon(vmodel.viewElement),
                            // 滚动内容宽高
                            viewW, viewH,
                            // 计算滚动条可以占据的宽或者高
                            // barH = strToNumber(ele.css("height")),
                            barH = vmodel.widgetElement === document.body ? vmodel.viewElement.clientHeight : strToNumber(ele.css('height')), barW = strToNumber(ele.css('width')),
                            // 滚动视野区宽高，存在滚动视野区宽高和滚动宽高不一致的情况
                            h = vmodel.viewHeightGetter(ele), w = vmodel.viewWidthGetter(ele), p = vmodel.position, barDictionary, barMinus = {}, y = y == void 0 ? vmodel.scrollTop : y, x = x == void 0 ? vmodel.scrollLeft : x;
                        //document body情形需要做一下修正
                        if (vmodel.viewElement != vmodel.widgetElement) {
                            p.match(/right|left/g) && avalon(vmodel.widgetElement).css('height', barH);
                        }
                        // 水平方向内间距
                        var hPadding = scroller.width() - scroller.innerWidth(),
                            // 竖直方向内间距
                            vPadding = scroller.height() - scroller.innerHeight();
                        scroller.css('height', h + vPadding);
                        scroller.css('width', w + hPadding);
                        viewW = scroller[0].scrollWidth;
                        viewH = scroller[0].scrollHeight;
                        barDictionary = {
                            'top': p.match(/top/g) && viewW > w,
                            'right': p.match(/right/g) && viewH > h,
                            'bottom': p.match(/bottom/g) && viewW > w,
                            'left': p.match(/left/g) && viewH > h
                        };
                        if (bars.length > 1) {
                            var ps = [
                                    'top',
                                    'right',
                                    'bottom',
                                    'left'
                                ];
                            for (var i = 0; i < 4; i++) {
                                barMinus[ps[i]] = [
                                    (barDictionary[i ? ps[i - 1] : ps[3]] && 1) >> 0,
                                    (barDictionary[i < 3 ? ps[i + 1] : ps[0]] && 1) >> 0
                                ];
                                if (i > 1)
                                    barMinus[ps[i]] = barMinus[ps[i]].reverse();
                            }
                        }
                        // 根据实际视窗计算，计算更新scroller的宽高
                        // 更新视窗
                        h = scroller.innerHeight();
                        w = scroller.innerWidth();
                        avalon.each(vmodel._position, function (i, item) {
                            var bar = bars[i], isVertical = item.match(/left|right/), dragger;
                            if (bar) {
                                dragger = avalon(getByClassName('oni-scrollbar-dragger', bar.element)[0]);
                            }
                            // 拖动逻辑前移，确保一定是初始化了的
                            if (ifInit && dragger) {
                                dragger.attr('ms-draggable', '$,$draggableOpts');
                                dragger.attr('oni-scrollbar-pos', item);
                                dragger.attr('oni-scrollbar-index', i);
                                avalon.scan(dragger[0], vmodel);
                            }
                            // hidden bar
                            if (!barDictionary[item]) {
                                if (bar) {
                                    bar.css('opacity', 0);
                                    bar.css('visibility', 'hidden');
                                    bar.data('oni-scrollbar-needed', false);
                                }
                                return;
                            } else {
                                if (bar) {
                                    bar.data('oni-scrollbar-needed', true);
                                    bar.css('visibility', 'visible');
                                    if (vmodel.show == 'scrolling' || vmodel.show == 'never') {
                                        bar.css('opacity', 0);
                                    } else {
                                        bar.css('opacity', 1);
                                    }
                                }
                            }
                            if (bar) {
                                var sh = strToNumber(bar.css('height')), sw = strToNumber(bar.css('width')), bh = sh, bw = sw, draggerpar = avalon(getByClassName('oni-scrollbar-draggerpar', bar[0])[0]), headerLength = vmodel.showBarHeader ? 2 : 0;
                                // 更新滚动条没有两端的箭头的时候依旧要重新计算相邻两个bar的间隔
                                var draggerParCss = [];
                                if (bars.length > 1) {
                                    var barCss = [], minus = barMinus[item];
                                    if (isVertical) {
                                        barCss = [
                                            [
                                                'top',
                                                minus[0] * bw
                                            ],
                                            [
                                                'height',
                                                barH - bw * (minus[0] + minus[1])
                                            ]
                                        ];
                                        draggerParCss = [
                                            [
                                                'top',
                                                headerLength / 2 * bw
                                            ],
                                            [
                                                'height',
                                                barH - bw * (minus[0] + minus[1] + headerLength)
                                            ]
                                        ];
                                    } else {
                                        barCss = [
                                            [
                                                'left',
                                                minus[0] * bh
                                            ],
                                            [
                                                'width',
                                                barW - bh * (minus[0] + minus[1])
                                            ]
                                        ];
                                        draggerParCss = [
                                            [
                                                'left',
                                                headerLength / 2 * bh
                                            ],
                                            [
                                                'width',
                                                barW - bh * (headerLength + minus[0] + minus[1])
                                            ]
                                        ];
                                    }
                                    avalon.each(barCss, function (index, css) {
                                        bar.css.apply(bar, css);
                                    });
                                    bh = bar.height();
                                    bw = bar.width();
                                } else {
                                    if (isVertical) {
                                        draggerParCss = [
                                            [
                                                'top',
                                                bw
                                            ],
                                            [
                                                'height',
                                                barH - bw * 2
                                            ]
                                        ];
                                    } else {
                                        draggerParCss = [
                                            [
                                                'left',
                                                bh
                                            ],
                                            [
                                                'width',
                                                barW - bh * 2
                                            ]
                                        ];
                                    }
                                }
                                var ex;
                                if (isVertical) {
                                    ex = vmodel.show == 'always' ? bw : 0;
                                    scroller.css('width', w + hPadding - ex);
                                } else {
                                    ex = vmodel.show == 'always' ? bh : 0;
                                    scroller.css('height', h + vPadding - ex);
                                }
                                avalon.each(draggerParCss, function (index, css) {
                                    draggerpar.css.apply(draggerpar, css);
                                });
                                sh = bh - headerLength * bw;
                                sw = bw - headerLength * bh;
                                // 更新滚动头
                                var draggerCss;
                                if (isVertical) {
                                    var draggerTop = y, draggerHeight = strToNumber(h * sh / viewH);
                                    // 限定一个dragger的最小高度
                                    draggerHeight = vmodel.limitRateV * bw > draggerHeight && vmodel.limitRateV * bw || draggerHeight;
                                    draggerTop = draggerTop < 0 ? 0 : draggerTop;
                                    draggerTop = draggerTop > viewH - h ? viewH - h : draggerTop;
                                    //draggerTop = sh * draggerTop / viewH
                                    draggerTop = strToNumber((sh - draggerHeight) * draggerTop / (viewH - h));
                                    draggerTop = Math.min(sh - draggerHeight, draggerTop);
                                    draggerCss = [
                                        [
                                            'width',
                                            '100%'
                                        ],
                                        [
                                            'height',
                                            draggerHeight
                                        ],
                                        [
                                            'top',
                                            draggerTop
                                        ]
                                    ];
                                    y = y > 0 ? y > viewH - h + ex ? viewH - h + ex : y : 0;
                                } else {
                                    var draggerLeft = x, draggerWidth = strToNumber(w * sw / viewW);
                                    // limit width to limitRateH * bh
                                    draggerWidth = vmodel.limitRateH * bh > draggerWidth && vmodel.limitRateH * bh || draggerWidth;
                                    draggerLeft = draggerLeft < 0 ? 0 : draggerLeft;
                                    draggerLeft = draggerLeft > viewW - w ? viewW - w : draggerLeft;
                                    // draggerLeft = sw * draggerLeft / viewW
                                    draggerLeft = strToNumber((sw - draggerWidth) * draggerLeft / (viewW - w));
                                    draggerLeft = Math.min(sw - draggerWidth, draggerLeft);
                                    draggerCss = [
                                        [
                                            'height',
                                            '100%'
                                        ],
                                        [
                                            'width',
                                            draggerWidth
                                        ],
                                        [
                                            'left',
                                            draggerLeft
                                        ]
                                    ];
                                    x = x > 0 ? x > viewW - w + ex ? viewW - w + ex : x : 0;
                                }
                                avalon.each(draggerCss, function (index, css) {
                                    dragger.css.apply(dragger, css);
                                });
                                if (ifInit) {
                                    if (isVertical) {
                                        vmodel._scrollTo(void 0, y);
                                    } else {
                                        vmodel._scrollTo(x, void 0);
                                    }
                                }
                                if (vmodel.showBarHeader) {
                                    if (y == 0 && isVertical || !isVertical && x == 0) {
                                        avalon(getByClassName('oni-scrollbar-arrow-up', bar[0])[0]).addClass('oni-state-disabled');
                                    } else {
                                        avalon(getByClassName('oni-scrollbar-arrow-up', bar[0])[0]).removeClass('oni-state-disabled');
                                    }
                                    if (y >= draggerpar.innerHeight() - dragger.innerHeight() && isVertical || !isVertical && x >= draggerpar.innerWidth() - dragger.innerWidth()) {
                                        !vmodel.breakOutCallback && avalon(getByClassName('oni-scrollbar-arrow-down', bar[0])[0]).addClass('oni-state-disabled');
                                    } else {
                                        avalon(getByClassName('oni-scrollbar-arrow-down', bar[0])[0]).removeClass('oni-state-disabled');
                                    }
                                }
                            }
                        });
                    };
                    // 点击箭头
                    vm._arrClick = function (e, diretion, position, barIndex) {
                        if (vmodel.disabled)
                            return;
                        vmodel._computer(function (obj) {
                            return vmodel._clickComputer(obj, diretion);
                        }, barIndex, position);
                    };
                    vm._clickComputer = function (obj, diretion, step) {
                        var step = step || obj.step || 40, l = strToNumber(obj.dragger.css('left')) >> 0, r = strToNumber(obj.dragger.css('top')) >> 0, x = diretion == 'down' ? l + step : l - step, y = diretion == 'down' ? r + step : r - step;
                        return {
                            x: x,
                            y: y
                        };
                    };
                    // 长按
                    vm._arrDown = function ($event, diretion, position, barIndex, ismouseup) {
                        if (vmodel.disabled)
                            return;
                        var se = this, ele = avalon(se);
                        clearInterval(ele.data('mousedownTimer'));
                        clearTimeout(ele.data('setTimer'));
                        var bar = bars[barIndex];
                        if (ismouseup || ele.hasClass('oni-state-disabled')) {
                            return ele.removeClass('oni-state-active');
                        }
                        // 延时开启循环
                        ele.data('setTimer', setTimeout(function () {
                            ele.addClass('oni-state-active');
                            ele.data('mousedownTimer', setInterval(function () {
                                return vmodel._computer(function (obj) {
                                    return vmodel._clickComputer(obj, diretion);
                                }, barIndex, position, function (breakOut) {
                                    if (!breakOut)
                                        return;
                                    clearInterval(ele.data('mousedownTimer'));
                                    clearTimeout(ele.data('setTimer'));
                                });
                            }, 120));
                        }, 10));
                    };
                    // 点击滚动条
                    vm._barClick = function (e, position, barIndex) {
                        if (vmodel.disabled)
                            return;
                        var ele = avalon(this);
                        if (ele.hasClass('oni-scrollbar-dragger'))
                            return;
                        vmodel._computer(function (obj) {
                            return {
                                x: Math.ceil(e.pageX - obj.offset.left - obj.draggerWidth / 2),
                                y: Math.ceil(e.pageY - obj.offset.top - obj.draggerHeight / 2)
                            };
                        }, barIndex, position);
                    };
                    // 计算滚动条位置
                    vm._computer = function (axisComputer, barIndex, position, callback, breakOutCallbackCannotIgnore) {
                        if (vmodel.disabled)
                            return;
                        var bar = bars[barIndex];
                        if (bar && bar.data('oni-scrollbar-needed')) {
                            var obj = {}, isVertical = position.match(/left|right/g);
                            obj.dragger = avalon(getByClassName('oni-scrollbar-dragger', bar[0])[0]);
                            obj.draggerWidth = strToNumber(obj.dragger.css('width'));
                            obj.draggerHeight = strToNumber(obj.dragger.css('height'));
                            obj.draggerpar = avalon(obj.dragger[0].parentNode);
                            obj.draggerparWidth = strToNumber(obj.draggerpar.css('width'));
                            obj.draggerparHeight = strToNumber(obj.draggerpar.css('height'));
                            obj.offset = obj.draggerpar.offset();
                            obj.up = avalon(getByClassName('oni-scrollbar-arrow-up', bar[0])[0]);
                            obj.down = avalon(getByClassName('oni-scrollbar-arrow-down', bar[0])[0]);
                            obj.viewer = avalon(vmodel.viewElement);
                            // obj.viewH = vmodel.viewHeightGetter(obj.viewer)
                            // obj.viewW = vmodel.viewWidthGetter(obj.viewer)
                            // 更新的时候要用viewer先计算
                            // 计算的时候直接用scroller作为视窗计算宽高
                            // obj.viewH = vmodel.viewHeightGetter(scroller)
                            // obj.viewW = vmodel.viewWidthGetter(scroller)
                            obj.viewH = scroller.innerHeight();
                            obj.viewW = scroller.innerWidth();
                            obj.scrollerH = scroller[0].scrollHeight;
                            obj.scrollerW = scroller[0].scrollWidth;
                            obj.step = isVertical ? 40 * (obj.draggerparHeight - obj.draggerHeight) / (obj.scrollerH - obj.viewH) : 40 * (obj.draggerparWidth - obj.draggerWidth) / (obj.scrollerW - obj.viewW);
                            obj.step = strToNumber(obj.step) || 1;
                            var xy = axisComputer(obj), breakOut;
                            xy.x = strToNumber(xy.x);
                            xy.y = strToNumber(xy.y);
                            if (isVertical) {
                                if (xy.y < 0) {
                                    xy.y = 0;
                                    obj.up.addClass('oni-state-disabled');
                                    breakOut = [
                                        'v',
                                        'up'
                                    ];
                                } else {
                                    obj.up.removeClass('oni-state-disabled');
                                }
                                if (xy.y > obj.draggerparHeight - obj.draggerHeight) {
                                    xy.y = obj.draggerparHeight - obj.draggerHeight;
                                    breakOut = [
                                        'v',
                                        'down'
                                    ];
                                    obj.down.addClass('oni-state-disabled');
                                } else {
                                    obj.down.removeClass('oni-state-disabled');
                                }
                                var c = strToNumber((obj.scrollerH - obj.viewH) * xy.y / (obj.draggerparHeight - obj.draggerHeight)) - vmodel.scrollTop;
                                obj.dragger.css('top', xy.y);
                                vmodel._scrollTo(void 0, strToNumber((obj.scrollerH - obj.viewH) * xy.y / (obj.draggerparHeight - obj.draggerHeight)));
                            } else {
                                if (xy.x < 0) {
                                    xy.x = 0;
                                    breakOut = [
                                        'h',
                                        'up'
                                    ];
                                    obj.up.addClass('oni-state-disabled');
                                } else {
                                    obj.up.removeClass('oni-state-disabled');
                                }
                                if (xy.x > obj.draggerparWidth - obj.draggerWidth) {
                                    xy.x = obj.draggerparWidth - obj.draggerWidth;
                                    breakOut = [
                                        'h',
                                        'down'
                                    ];
                                    // 有溢出检测回调，不disable
                                    !vmodel.breakOutCallback && obj.down.addClass('oni-state-disabled');
                                } else {
                                    obj.down.removeClass('oni-state-disabled');
                                }
                                obj.dragger.css('left', xy.x);
                                vmodel._scrollTo(strToNumber((obj.scrollerW - obj.viewW) * xy.x / (obj.draggerparWidth - obj.draggerWidth)), void 0);
                            }
                        }
                        // 回调，溢出检测
                        (!vmodel.breakOutCallback || breakOutCallbackCannotIgnore) && callback && callback(breakOut);
                        vmodel.breakOutCallback && vmodel.breakOutCallback(breakOut, vmodel, obj);
                    };
                    vm._scrollTo = function (x, y) {
                        if (y != void 0) {
                            scroller[0].scrollTop = y;
                            vmodel.scrollTop = scroller[0].scrollTop;
                        }
                        if (x != void 0) {
                            scroller[0].scrollLeft = x;
                            vmodel.scrollLeft = scroller[0].scrollLeft;
                        }
                    };
                    //@interface scrollTo(x,y) 滚动至 x,y
                    vm.scrollTo = function (x, y) {
                        vmodel.update(!'ifInit', x, y);
                        vm._scrollTo(x, y);
                    };
                    vm._initWheel = function (e, type) {
                        if (type == 'enter') {
                            vmodel.inFocuse = true;
                        } else {
                            vmodel.inFocuse = false;
                        }
                    };
                    vm._draggerDown = function (e, isdown) {
                        if (vmodel.disabled)
                            return;
                        var ele = avalon(this);
                        if (isdown) {
                            ele.addClass('oni-state-active');
                        } else {
                            ele.removeClass('oni-state-active');
                        }
                    };
                    vm._stopPropagation = function (e) {
                        e.stopPropagation();
                    };
                });
            vmodel.$watch('scrollLeft', function (newValue, oldValue) {
                vmodel._onScroll();
                vmodel.onScroll && vmodel.onScroll(newValue, oldValue, 'h', vmodel);
            });
            vmodel.$watch('scrollTop', function (newValue, oldValue) {
                vmodel._onScroll();
                vmodel.onScroll && vmodel.onScroll(newValue, oldValue, 'v', vmodel);
            });
            return vmodel;
        };
    widget.defaults = {
        disabled: false,
        //@config 组件是否被禁用，默认为否
        toggle: true,
        //@config 组件是否显示，可以通过设置为false来隐藏组件
        position: 'right',
        //@config scrollbar出现的位置,right右侧，bottom下侧，可能同时出现多个方向滚动条
        limitRateV: 1.5,
        //@config 竖直方向，拖动头最小高度和拖动头宽度比率
        limitRateH: 1.5,
        //@config 水平方向，拖动头最小宽度和高度的比率
        scrollTop: 0,
        //@config 竖直方向滚动初始值，负数会被当成0，设置一个极大值等价于将拖动头置于bottom
        scrollLeft: 0,
        //@config 水平方向滚动初始值，负数会被当成0处理，极大值等价于拖动头置于right
        show: 'always',
        //@config never一直不可见，scrolling滚动和hover时候可见，always一直可见
        showBarHeader: true,
        //@config 是否显示滚动条两端的上下箭头
        draggerHTML: '',
        //@config 滚动条拖动头里，注入的html碎片
        breakOutCallback: false,
        //@config breakOutCallback(["h", "up"], vmodel) 滚动到极限位置的回调，用来实现无线下拉等效果 breakOutCallback(["h", "up"], vmodel) 第一个参数是一个数组，分别是滚动条方向【h水平，v竖直】和超出极限的方向【up是向上或者向左，down是向右或者向下】，第三个参数是一个对象，包含滚动条的元素，宽高等信息
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        viewHeightGetter: function (viewElement) {
            return viewElement.innerHeight();
        },
        //@config viewHeightGetter(viewElement) 配置计算视窗高度计函数，默认返回innerHeight
        viewWidthGetter: function (viewElement) {
            return viewElement.innerWidth();
        },
        //@config viewWidthGetter(viewElement) 配置计算视窗宽度计函数，默认返回innerWidth
        getTemplate: function (tmpl, opts) {
            return tmpl;
        },
        //@config getTemplate(tpl, opts) 定制修改模板接口
        onScroll: function (newValue, oldValue, diretion, vmodel) {
        },
        //@config onScroll(newValue, oldValue, diretion, vmodel) 滚动回调,scrollLeft or scrollTop变化的时候触发，参数为newValue, oldValue, diretion, vmodel diretion = h 水平方向，= v 竖直方向
        size: 'normal',
        //@config srollbar size,normal为10px，small为8px，large为14px
        $author: 'skipper@123'
    };
}
)();
},{"../draggable/avalon.draggable":20,"avalon":2}],53:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "";

module.exports = (
function () {
    function getById(id) {
        return document.getElementById(id);
    }
    // 站位用来生成文档用注释
    // widget.defaults = {
    var defaults = {
            //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's interface
            onInit: avalon.noop,
            onChange: avalon.noop,
            //@config onChange(index, ele, widgetElement, options) 滚动到应该显示的index[是onChangeNew返回的indexs的第一个值]，以及targetListGetter返回的list[index]值，以及绑定scrollspy的元素，options
            onChangeNew: avalon.lop,
            //@config onChangeNew(indexLists, lists, element, options)参数indexs为所有显示在viewpoint内的index组成数组,lists为对应的list[index]集合的数组，其他同onChange
            axis: 'y',
            //@config 滚动条滚动的方向，默认是竖直方向y，取值为x的时候，表示水平方向
            targetListGetter: function (spytarget) {
                var spytarget = getById(spytarget), u = spytarget ? spytarget.getElementsByTagName('li') : false, arr = [];
                avalon.each(u, function (i, item) {
                    var a = item.getElementsByTagName('a')[0], href = a.getAttribute('href'), id;
                    if (id = href.match(/^#[\S]+/g)) {
                        arr.push(id[0].substring(1));
                    }
                });
                return arr;
            },
            //@config targetListGetter() 获取tab list函数，元素是数字或者元素id索引，默认是元素id索引，如果targetListGetter返回为空或者空数组的时候，list则取值panelListGetter的值，因此panelListGetter是必须有返回内容的
            panelListGetter: avalon.noop,
            //@config panelListGetter() 获取panel list函数，返回一个数组，元素是dom，或者返回空，默认返回空，panel跟targetListGetter返回的数组项，是一一对应的，来实现menu的切换，而内容滚动或切换到对应的panel，必须返回一个数组
            panelGetter: function (id, index, list, options) {
                return list != void 0 && list[index] || id != void 0 && getById(id);
            },
            //@config panelGetter(pannelId, pannelIndex, panelsList, options) 获取panel函数，默认返回 panelsList[pannelIndex] || Id = pannelId
            spytarget: void 0,
            //@config 指定滚动关联的元素id，默认的targetListGetter会到这个指定元素内寻找li元素作为所有的菜单选项，spytarget会作为第一个参数传递给targetListGetter,panelListGetter
            _lock: false,
            scrollTo: avalon.noop,
            $author: 'skipper@123'
        };
    function getScroll(ele) {
        if (ele == document.body)
            return {
                top: ele.scrollTop || document.documentElement.scrollTop,
                left: ele.scrollLeft || document.documentElement.scrollLeft,
                height: avalon(window).height(),
                width: avalon(window).width()
            };
        var offset = avalon(ele).offset();
        return {
            top: ele.scrollTop,
            left: ele.scrollLeft,
            offsetTop: offset.top,
            offsetLeft: offset.left,
            height: avalon(ele).height(),
            width: avalon(ele).width()
        };
    }
    avalon.bindingHandlers.scrollspy = function (data, vmodels) {
        var args = data.value.match(avalon.rword) || [
                '$',
                'scrollspy'
            ];
        var ID = args[0].trim(), opts = args[1], vmodel, vmOptions, element = data.element, msData = element.msData, $element = avalon(element), scrollbarBinded = msData && msData['ms-widget'].match(/scrollbar[,]?/g), isElementBody = element === document.body;
        if (ID && ID != '$') {
            vmodel = avalon.vmodels[ID];
            //如果指定了此VM的ID
            if (!vmodel) {
                return;
            }
        }
        data.element.removeAttribute('ms-scrollspy');
        if (!vmodel) {
            //如果使用$或绑定值为空，那么就默认取最近一个VM，没有拉倒
            var vmodelIndex = scrollbarBinded ? 1 : 0;
            vmodel = vmodels.length ? vmodels[vmodelIndex] : null;
        }
        var fnObj = vmodel || {};
        if (vmodel && typeof vmodel[opts] === 'object') {
            //如果指定了配置对象，并且有VM
            vmOptions = vmodel[opts];
            if (vmOptions.$model) {
                vmOptions = vmOptions.$model;
            }
            fnObj = vmOptions;
        }
        var options = avalon.mix({}, defaults, vmOptions || {}, data[opts] || {}, avalon.getWidgetData(element, 'scrollspy'));
        // do something while scrolling
        function onScroll(x, y, scroller) {
            if (!scroller)
                return;
            // 通过接口算出tab list
            var list = options.targetListGetter(options.spytarget, options),
                // 通过接口算出pannel list
                panelList = options.panelListGetter(options.spytarget, options),
                // scrollerOffset = scroller.offset()
                scrollerOffset = getScroll(scroller[0]), sHeight = scrollerOffset.height, sWidth = scrollerOffset.width, rlist = [], tlists = [];
            if (!list || !list.length)
                list = panelList;
            for (var i = 0, len = list.length; i < len; i++) {
                var id = list[i], ele = options.panelGetter(id, i, panelList, options);
                if (!ele)
                    return;
                var $ele = avalon(ele), offset = $ele.offset(), height = $ele.innerHeight(), width = $ele.innerWidth(), index = false;
                if (isElementBody) {
                    if (options.axis == 'x') {
                        if (scrollerOffset.left <= offset.left + width && scrollerOffset.left + sWidth >= offset.left) {
                            index = i;
                        }
                    } else {
                        if (scrollerOffset.top <= offset.top + height && scrollerOffset.top + sHeight >= offset.top) {
                            index = i;
                        }
                    }
                } else {
                    if (options.axis == 'x') {
                        if (scrollerOffset.left <= offset.left + width && scrollerOffset.left + sWidth >= offset.left) {
                            index = i;
                        }
                    } else {
                        if (offset.top <= scrollerOffset.offsetTop && offset.top + height >= scrollerOffset.offsetTop) {
                            index = i;
                        }
                    }
                }
                if (index !== false) {
                    rlist.push(index);
                    tlists.push(list[i]);
                }
            }
            if (rlist.length) {
                i = rlist[0];
                options.onChange && options.onChange(i, list[i], element, options);
            }
            options.onChangeNew && options.onChangeNew(rlist, tlists, element, options);
        }
        var initTop = element.scrollTop, initLeft = element.scrollLeft, scroller = $element, myScroll;
        // 原生滚动事件
        avalon.bind(isElementBody ? window : element, 'scroll', function (e) {
            // 修复原生滚动事件执行顺序造成的问题
            if (options._lock)
                return options._lock = false;
            onScroll(element.scrollLeft, element.scrollTop, $element);
        });
        // if scrollbar is used
        if (scrollbarBinded) {
            myScroll = avalon.vmodels[msData['ms-widget-id'] || element.getAttribute('avalonctrl')];
            initTop = myScroll.scrollTop;
            initLeft = myScroll.scrollLeft;
            scroller = myScroll.getScroller();
            myScroll.$watch('scrollLeft', function (n, o) {
                if (options._lock)
                    return;
                onScroll(n, void 0, scroller);
            });
            myScroll.$watch('scrollTop', function (n, o) {
                if (options._lock)
                    return;
                onScroll(void 0, n, myScroll.getScroller() || scroller);
            });
        }
        //@interface scrollTo(id, index) 滚动到panel位置，滚动到 panelList[index] || dom.id = id的元素的地方，该方法绑定在onInit的返回的options参数上返回，供调用
        options.scrollTo = function (id, index) {
            var panelList = options.panelListGetter(options.spytarget, options), ele = options.panelGetter(id, index, panelList, options), $ele = avalon(ele);
            if (!scroller && scrollbarBinded) {
                scroller = myScroll.getScroller();
            }
            if (!ele || !scroller)
                return;
            options._lock = true;
            var scrollerOffset = scroller.offset(), offset = $ele.offset(), dir = options.axis == 'x' ? 'Left' : 'Top';
            if (myScroll) {
                if (dir == 'Left') {
                    myScroll.scrollTo(offset[dir.toLowerCase()] - scrollerOffset[dir.toLowerCase()], void 0);
                } else {
                    myScroll.scrollTo(void 0, myScroll['scroll' + dir] + offset[dir.toLowerCase()] - scrollerOffset[dir.toLowerCase()]);
                }
                options._lock = false    // myScroll.update()
;
            } else {
                element['scroll' + dir] += offset[dir.toLowerCase()] - scrollerOffset[dir.toLowerCase()];
            }
        };
        // callback after inited
        if (typeof options.onInit === 'function') {
            onScroll(initTop, initLeft, scroller);
            //vmodels是不包括vmodel的 
            options.onInit.call(element, vmodel, options, vmodels);
        }
    };
}
)();
},{"avalon":2}],54:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
tmpl = "<div class=\"oni-simplegrid\">\n    <div class=\"oni-simplegrid-scroll-wrapper\" \n         ms-css-height=\"tbodyHeight+theadHeight\" \n         ms-widget=\"scrollbar,$simplegrid{{MS_OPTION_ID}},$spgScrollbarOpts\" \n         ms-css-padding-bottom=\"paddingBottom\"\n         data-scrollbar-position=\"right,bottom\">\n        <div class=\"oni-simplegrid-wrapper\"  \n             ms-css-nowidth=\"gridWidth\" \n             >\n            <table class=\"oni-simplegrid-thead\" \n                   ms-css-margin-left=\"cssLeft\" >\n                <tr>\n                    MS_OPTION_THEAD_BEGIN\n                    <td data-repeat-rendered=\"_theadRenderedCallback\"\n                        ms-repeat=\"columns\"\n                        ms-css-width=\"el.width\" \n                        ms-css-text-align=\"el.align\" \n                        ms-class=\"{{el.className}}\" \n                        ms-title=\"el.title\" \n                        ms-visible=\"el.toggle\" \n                        ms-data-vm=\"el\"\n                        ms-on-mousemove-10=\"startResize($event,el)\"\n                        ms-on-mousedown-10=\"resizeColumn($event,el)\"\n                        ms-on-mouseleave-10=\"stopResize\"\n                        >{{el.text | html}}\n                        <span  ms-click=\"sortColumn(el, $index)\"\n                               ms-if=\"el.sortable\" \n                               ms-class=\"oni-helper-{{ getArrow(el, $index)}}\">\n                            <span class=\"oni-helper-sort-top\"></span>\n                            <span class=\"oni-helper-sort-bottom\"></span>\n                        </span>\n                    </td>\n                    MS_OPTION_THEAD_END\n                </tr>\n            </table>\n            <table class=\"oni-simplegrid-tbody\" \n                   ms-css-margin-left=\"cssLeft\" >\n                <tr data-repeat-rendered=\"_tbodyRenderedCallback\"\n                    ms-repeat-row=\"_data\"\n                    ms-class=\"{{rowClass}}:$index % 2 && _data.size()>=2\"\n                    ms-hover=\"oni-state-hover\"\n                    ms-class-1=\"oni-state-selected: row.checked\"\n                    >\n                    MS_OPTION_TBODY_BEGIN\n                    <td class=\"oni-simplegrid-td\"\n                        data-with-sorted=\"getColumnsOrder\"\n                        ms-repeat=\"row\" \n                        ms-visible=\"getCellProperty($key,'toggle')\" \n                        ms-css-width=\"getCellProperty($key,'width')\"\n                        ms-css-text-align=\"getCellProperty($key,'align')\"\n                        >\n                        {{ renderCell($val, $key, row) | html }}\n                    </td>\n                    MS_OPTION_TBODY_END\n                </tr>\n            </table>\n            <div ms-if=\"!_data.size()\" \n                 ms-css-height=\"noResultHeight\"\n                 ms-css-line-height=\"{{noResultHeight}}px\"\n                 class=\"oni-simplegrid-empty\">\n                {{noResultContent|html}}\n            </div>\n        </div>\n        <div class=\"oni-scrollbar-scroller\">\n            <div class=\"oni-simplegrid-scroll-marker\" ms-css-height=\"getScrollerHeight()\" \n                 ms-css-nowidth=\"gridWidth\">\n            </div>\n\n        </div>\n    </div>\n    <div class=\"oni-simplegrid-pager-wrapper\"  ms-if=\"pageable\" id=\"pager-MS_OPTION_ID\" >\n\n    </div>\n    <div ms-widget=\"loading\"></div>\n</div>\n";
innerRequire("../pager/avalon.pager");
innerRequire("../dropdown/avalon.dropdown");
innerRequire("../loading/avalon.loading");
innerRequire("../scrollbar/avalon.scrollbar");

module.exports = (
function () {
    //切割出表头与表身的模板
    var gridTemplate = tmpl, theadTemplate, tbodyTemplate;
    gridTemplate = gridTemplate.replace(/MS_OPTION_THEAD_BEGIN([\s\S]+)MS_OPTION_THEAD_END/, function (a, b) {
        theadTemplate = b;
        return 'MS_OPTION_THEAD_HOLDER';
    });
    gridTemplate = gridTemplate.replace(/MS_OPTION_TBODY_BEGIN([\s\S]+)MS_OPTION_TBODY_END/, function (a, b) {
        tbodyTemplate = b;
        return 'MS_OPTION_TBODY_HOLDER';
    });
    var body = document.body || document.documentElement;
    var remptyfn = /^function\s+\w*\s*\([^)]*\)\s*{\s*}$/m;
    var widget = avalon.ui.simplegrid = function (element, data, vmodels) {
            var options = data.simplegridOptions, optId = +new Date(), scrollbarTimer;
            //格式化各列的具体规格
            options.columns = options.getColumns(options.columns, options);
            //允许指定表头与表身的每一行的模板
            makeTemplate(options, 'theadTemplate', theadTemplate);
            makeTemplate(options, 'tbodyTemplate', tbodyTemplate);
            var template = gridTemplate.replace(/MS_OPTION_THEAD_HOLDER/, options.theadTemplate).replace(/MS_OPTION_TBODY_HOLDER/, options.tbodyTemplate);
            //方便用户对原始模板进行修改,提高制定性
            options.template = options.getTemplate(template, options).replace(/\{\{MS_OPTION_ID\}\}/g, optId);
            //决定每页的行数(分页与滚动模式下都要用到它)
            //<------开始配置分页的参数
            if (typeof options.pager !== 'object') {
                options.pager = {};
            } else {
                options.pageable = true;
            }
            var pager = options.pager;
            //抽取要显示的数据(因为可能存在分页,不用全部显示,那么我们只将要显示的
            pager.perPages = options.pageable ? pager.perPages || options.data.length : options.data.length;
            pager.nextText = pager.nextText || '\u4E0B\u4E00\u9875';
            pager.prevText = pager.prevText || '\u4E0A\u4E00\u9875';
            if (Array.isArray(pager.options)) {
                pager.getTemplate = typeof pager.getTemplate === 'function' ? pager.getTemplate : function (tmpl) {
                    return tmpl + '<div class="oni-simplegrid-pager-options">\u6BCF\u9875\u663E\u793A<select ms-widget="dropdown" data-dropdown-list-width="50" data-dropdown-width="50" ms-duplex="perPages"><option ms-repeat="options" ms-value="el.value">{{el.text}}</option></select>\u6761,\u5171{{totalItems}}\u6761\u7ED3\u679C</div>';
                };
            }
            makeBool(pager, 'showJumper', true);
            //如果还不满意可以通过getPager方法重写
            options.pager = options.getPager(pager, options);
            //-----结束配置分页的参数--------->
            // 每页真实要显示的行数
            options.showRows = options.showRows || pager.perPages;
            //如果没有指定各列的出现顺序,那么将按用户定义时的顺序输出
            if (!Array.isArray(options.columnsOrder)) {
                var orders = [];
                for (var i = 0, el; el = options.columns[i++];) {
                    orders.push(el.field);
                }
                options.columnsOrder = orders;
            } else if (options.syncTheadColumnsOrder) {
                //如果用户指定columnsOrder,那么要对columns进行重排
                orders = options.columnsOrder.concat();
                var newColumns = [], oldColumns = options.columns, elem;
                while (el = orders.shift()) {
                    label:
                        for (var k = 0, kn = oldColumns.length; k < kn; k++) {
                            elem = oldColumns[k];
                            if (elem.field == el) {
                                newColumns.push(elem);
                                oldColumns.splice(k, 1);
                                break label;
                            }
                        }
                }
                options.columns = newColumns;
            }
            var _vmodels;
            var loadingOpts = {
                    toggle: false,
                    onInit: function (vm, options, vmodels) {
                        vmodel.loadingVModel = vm;
                    }
                };
            options.loading = avalon.type(options.loading) === 'object' ? avalon.mix(options.loading, loadingOpts) : loadingOpts;
            var vmodel = avalon.define(data.simplegridId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        '_init',
                        'widgetElement',
                        'data',
                        'addColumnCallbacks',
                        'scrollPanel',
                        'topTable',
                        'bottomTable',
                        'startIndex',
                        'pager',
                        'endIndex',
                        'template',
                        'loading',
                        'loadingVModel',
                        'rootElement'
                    ];
                    vm.loadingVModel = null;
                    vm.widgetElement = element;
                    vm.rootElement = '';
                    vm.gridWidth = '100%';
                    vm.startIndex = 0;
                    vm.endIndex = options.showRows;
                    vm.cssLeft = '0';
                    vm.barRight = 0;
                    vm.scrollerHeight = void 0;
                    vm.paddingBottom = '0';
                    vm.barUpdated = false;
                    vm._data = [];
                    vm._init = true;
                    vm.$init = function () {
                        avalon.ready(function () {
                            element.innerHTML = options.template.replace(/MS_OPTION_ID/g, vmodel.$id);
                            _vmodels = [vmodel].concat(vmodels);
                            vm.rootElement = element.getElementsByTagName('*')[0];
                            avalon.scan(element, _vmodels);
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        });
                    };
                    vm._theadRenderedCallback = function () {
                        var fns = getHiddenParent(vm.widgetElement);
                        fns[0]();
                        //位于表头的data-repeat-rendered回调,用于得到table的宽度
                        var tr = this;
                        //这是TR元素
                        var tbody = this.parentNode;
                        //tbody
                        var table = tbody.parentNode;
                        //table
                        var cells = tr.children;
                        //在旧式IE下可能包含注释节点
                        var cellIndex = 0;
                        for (var i = 0, cell; cell = cells[i++];) {
                            if (cell.nodeType === 1 && cell['data-vm']) {
                                var c = vm.columns[cellIndex++];
                                if (String(c.width).indexOf('%') === -1) {
                                    c.width = cell.offsetWidth;
                                }
                            }
                        }
                        vm.topTable = table;
                        //重置真正的代表表头的table
                        vm.theadHeight = avalon(table).innerHeight();
                        vm.scrollPanel = table.parentNode.parentNode;
                        //重置包含两个table的会出现滚动条的容器对象
                        vm.gridWidth = Math.min(table.offsetWidth, vm.scrollPanel.offsetWidth) + 1;
                        fns[1]();
                        vm.theadRenderedCallback.call(tbody, vmodel, options, vmodels);
                    };
                    vm._tbodyRenderedCallback = function (a) {
                        //取得tbody每一行的高
                        var tbody = this;
                        function delay() {
                            var cell = tbody.getElementsByTagName('td')[0] || tbody.getElementsByTagName('th')[0];
                            var fns = getHiddenParent(vm.widgetElement);
                            fns[0]();
                            var table = vm.bottomTable = tbody.parentNode;
                            var noResultHeight = !vmodel._data.size() ? vmodel.noResultHeight : 0;
                            //求出可见区的总高度
                            vm.tbodyHeight = avalon(table).innerHeight() + noResultHeight;
                            //取得总行数,以免行数为0时, vm.tbodyHeight / rowCount 得出Infinite
                            var rowCount = tbody.rows.length;
                            //求出每一行的高
                            vm._rowHeight = rowCount ? vm.tbodyHeight / rowCount : 35;
                            //根据是否分页, 求得每页的行数
                            var perPages = vm.pageable ? vm.pager.perPages : vm.data.length;
                            vm.tbodyScrollHeight = vm._rowHeight * perPages;
                            var borderHeight = cell ? Math.max(avalon.css(cell, 'borderTopWidth', true), avalon.css(cell, 'borderBottomWidth', true)) : 0;
                            vm._rowHeightNoBorders = vm._rowHeight - borderHeight * 2;
                            fns[1]();
                            vm.tbodyRenderedCallback.call(tbody, vmodel, options, vmodels);
                            // update scrollbar, if tbody rendered
                            setTimeout(function () {
                                vmodel.updateScrollbar(!vmodel.barUpdated);
                                vmodel.barUpdated = true;
                            });
                        }
                        //如果使用border-collapse: collapse,可能有一条边的高度被吞掉
                        setTimeout(delay, 100);
                    };
                    //::loading相关::
                    vm.showLoading = function () {
                        vmodel.loadingVModel.toggle = true;
                    };
                    vm.hideLoading = function () {
                        vmodel.loadingVModel.toggle = false;
                    };
                    vm.startResize = function (e, el) {
                        //当移动到表头的右侧,改变光标的形状,表示它可以拖动改变列宽
                        if (options._drag || !el.resizable)
                            return;
                        var cell = avalon(this);
                        var dir = getDirection(e, cell, options);
                        options._cursor = cell.css('cursor');
                        //保存原来的光标样式
                        if (dir === '') {
                            options.canResize = false;
                            cell.css('cursor', 'default');
                        } else {
                            options.canResize = cell;
                            cell.css('cursor', dir + '-resize')    //改变光标
;
                        }
                    };
                    vm.stopResize = function () {
                        if (options.canResize) {
                            options.canResize.css('cursor', options._cursor);
                            //还原光标样式
                            // update scrollbar, after resize end
                            vmodel.updateScrollbar('forceUpdate');
                            delete options.canResize;
                        }
                    };
                    //通过拖动改变列宽
                    vm.resizeColumn = function (e, el) {
                        var cell = options.canResize;
                        if (cell) {
                            //只有鼠标进入可拖动区域才能拖动
                            if (typeof el.width !== 'number') {
                                el.width = cell[0].offsetWidth;
                            }
                            var cellWidth = el.width;
                            var startX = e.pageX;
                            options._drag = true;
                            fixUserSelect();
                            var gridWidth = vm.gridWidth;
                            var moveFn = avalon.bind(document, 'mousemove', function (e) {
                                    if (options._drag) {
                                        e.preventDefault();
                                        var change = e.pageX - startX;
                                        vm.gridWidth = gridWidth + change;
                                        el.width = cellWidth + change;
                                        // update scrollbar while table size changed right now
                                        vmodel.updateScrollbar('forceUpdate');
                                    }
                                });
                            var upFn = avalon.bind(document, 'mouseup', function (e) {
                                    e.preventDefault();
                                    if (options._drag) {
                                        restoreUserSelect();
                                        delete options._drag;
                                        vm.gridWidth = gridWidth + e.pageX - startX;
                                        el.width = cellWidth + e.pageX - startX;
                                        avalon.unbind(document, 'mousemove', moveFn);
                                        avalon.unbind(document, 'mouseup', upFn);
                                    }
                                });
                        }
                    };
                    vm.sortIndex = NaN;
                    vm.getArrow = function (el, $index) {
                        var sortIndex = vm.sortIndex;
                        var asc = el.sortAsc;
                        return $index !== sortIndex ? 'ndb' : asc ? 'asc' : 'desc';
                    };
                    //如果当前列可以排序，那么点击标题旁边的icon,将会调用此方法
                    vm.sortColumn = function (el, $index) {
                        vm.sortIndex = $index;
                        var trend = el.sortAsc = !el.sortAsc;
                        var field = el.field;
                        var opts = vmodel.$model;
                        trend = trend ? 1 : -1;
                        if (typeof opts.remoteSort === 'function' && !remptyfn.test(opts.remoteSort)) {
                            vmodel.remoteSort(field, trend, vmodel);
                        } else if (typeof el.localSort === 'function' && !remptyfn.test(el.localSort)) {
                            // !isEmptyFn(el.localSort)
                            //如果要在本地排序,并且指定排数函数
                            vmodel._data.sort(function (a, b) {
                                return trend * el.localSort(a, b, field, opts) || 0;
                            });
                            if (typeof vmodel.onSort === 'function') {
                                setTimeout(function () {
                                    vmodel.onSort(vmodel);
                                }, 500);
                            }
                        } else {
                            //否则默认处理
                            vmodel._data.sort(function (a, b) {
                                return trend * (a[field] - b[field]) || 0;
                            });
                        }
                    };
                    //得到要渲染出来的列的名字的数组
                    vm.getColumnsOrder = function () {
                        return vm.columnsOrder;
                    };
                    //在指定列的位置添加一列
                    vm.addColumn = function (obj, i) {
                        var el = options.getColumns([obj], vm)[0];
                        var field = el.field;
                        if (vm.columnsOrder.indexOf(field) === -1) {
                            var index = parseInt(i, 10) || 0;
                            var defaultValue = el.defaultValue || '';
                            vm.columns.splice(index, 0, el);
                            vm.columnsOrder.splice(index, 0, field);
                            vm.addColumnCallbacks[field] = function (array) {
                                array.forEach(function (elem) {
                                    if (!elem.hasOwnProperty(field)) {
                                        elem[field] = defaultValue;
                                    }
                                });
                            };
                        }
                        vm.reRender(vm.data, vm);
                    };
                    //得到可视区某一个格子的显示情况,长度,align
                    vm.getCellProperty = function (name, prop) {
                        for (var i = 0, el; el = vm.columns[i++];) {
                            if (el.field === name) {
                                return el[prop];
                            }
                        }
                    };
                    //重新渲染表身
                    vm.throttleRenderTbody = function (n, o) {
                        vmodel.tbodyScrollTop = n;
                        cancelAnimationFrame(requestID);
                        requestID = requestAnimationFrame(function () {
                            reRenderTbody(n, o);
                        });
                    };
                    //::与滚动条相关::计算滚动条的高
                    vm.getScrollerHeight = function () {
                        var h = vmodel.tbodyScrollHeight + vmodel.tbodyScrollTop - vmodel.theadHeight, max = vmodel._rowHeight * vmodel.data.length;
                        // 设置一个上限，修复回滚bug
                        h = h > max ? max : h;
                        // until change is applied to element, change scrollerHeight
                        setTimeout(function (loop) {
                            var _h = vmodel.getScrollbar().getScroller().css('height');
                            if (h != _h && !loop) {
                                arguments.callee(1);
                                return;
                            }
                            vmodel.scrollerHeight = h;
                        }, 100);
                        return h;
                    };
                    //::与滚动条相关:: 滚动条的相关配置项
                    vm.$spgScrollbarOpts = {
                        onScroll: function (n, o, dir) {
                            // 竖直方向滚动
                            if (dir == 'v') {
                                clearTimeout(scrollbarTimer);
                                scrollbarTimer = setTimeout(function () {
                                    vmodel.throttleRenderTbody(n, o);
                                }, 16)    // 水平方向
;
                            } else {
                                vmodel.cssLeft = n == void 0 ? 'auto' : -n + 'px';
                            }
                        },
                        //::与滚动条相关::得到表身的高?
                        // 计算滚动视图区的高度，表格这边由于表头是不参与滚动的，所有视图区域高度是表格高度 - 表头高度
                        viewHeightGetter: function (ele) {
                            return ele.innerHeight() - vmodel.theadHeight;
                        },
                        show: vm.showScrollbar
                    };
                    vm.getScrollbar = function () {
                        return avalon.vmodels['$simplegrid' + optId];
                    };
                    // update scrollbar
                    //     var scrollbarInited
                    vm.updateScrollbar = function (force) {
                        if (!force)
                            return;
                        var scrollbar = vmodel.getScrollbar(), scroller = scrollbar.getScroller();
                        if (scrollbar) {
                            scrollbar.update();
                        }
                    };
                    vm.$watch('showRows', function (rows) {
                        vmodel.endIndex = rows;
                    });
                });
            vmodel._data = vmodel.getStore(vmodel.data, vmodel);
            //.data.slice(vm.startIndex, vm.endIndex)
            //<-----------开始渲染分页栏----------
            if (vmodel.pageable) {
                var flagPager = false;
                var intervalID = setInterval(function () {
                        var elem = document.getElementById('pager-' + vmodel.$id);
                        if (elem && !flagPager) {
                            elem.setAttribute('ms-widget', 'pager,pager-' + vmodel.$id);
                            avalon(elem).addClass('oni-simplegrid-pager-wrapper');
                            avalon.scan(elem, vmodel);
                            flagPager = true;
                        }
                        var pagerVM = avalon.vmodels['pager-' + vmodel.$id];
                        if (pagerVM) {
                            vmodel.pager = pagerVM;
                            clearInterval(intervalID);
                        }
                    }, 100);
            }
            //-----------结束渲染分页栏---------->
            //那一部分转换为监控数组就行,这样能大大提高性能)
            var requestID, prevScrollTop = 0, lastRenderedScrollTop = 0;
            function reRenderTbody(n, o) {
                // 不再读取scrollTop
                // var panel = vmodel.scrollPanel
                // var scrollTop = panel.scrollTop
                var scrollTop = n;
                var scrollDir = scrollTop > prevScrollTop ? 'down' : 'up';
                prevScrollTop = scrollTop;
                var distance = Math.abs(lastRenderedScrollTop - scrollTop);
                var rowHeight = vmodel._rowHeight;
                if (distance >= vmodel._rowHeightNoBorders) {
                    var linage = distance / rowHeight;
                    var integer = Math.floor(linage);
                    //取得整数部分
                    var decimal = linage - integer;
                    //取得小数部分
                    if (decimal > 0.55) {
                        //四舍五入
                        integer += 1    //要添加或删除的行数
;
                    }
                    var length = vmodel.data.length, count = 0, showRows = vmodel.showRows;
                    if (scrollDir === 'down') {
                        while (vmodel.endIndex + 1 < length) {
                            vmodel.endIndex += 1;
                            vmodel.startIndex += 1;
                            count += 1;
                            var el = vmodel.data[vmodel.endIndex];
                            // 优化，避免过度操作_data
                            if (integer - count <= showRows) {
                                vmodel._data.push(el);
                                vmodel._data.shift();
                            }
                            if (count === integer) {
                                break;
                            }
                        }
                    } else {
                        while (vmodel.startIndex >= 0) {
                            vmodel.endIndex -= 1;
                            vmodel.startIndex -= 1;
                            count += 1;
                            var el = vmodel.data[vmodel.startIndex];
                            // 优化，避免过度操作_data
                            if (integer - count <= showRows) {
                                vmodel._data.unshift(el);
                                vmodel._data.pop();
                            }
                            if (count === integer) {
                                break;
                            }
                        }
                    }
                    // 不在设置panel的scrollTop
                    lastRenderedScrollTop = vmodel.tbodyScrollTop = vmodel.startIndex * rowHeight    // lastRenderedScrollTop = panel.scrollTop = vmodel.tbodyScrollTop = vmodel.startIndex * rowHeight
;
                }
            }
            // 监听这个改变更靠谱
            vmodel.$watch('scrollerHeight', function (n) {
                if (n > 0) {
                    vmodel.getScrollbar().disabled = false;
                    vmodel.getScrollbar().toggle = true;
                    vmodel.updateScrollbar('forceUpdate');
                } else {
                    vmodel.getScrollbar().disabled = true;
                    vmodel.getScrollbar().toggle = false;
                }
            });
            return vmodel;
        };
    widget.defaults = {
        theadHeight: 35,
        noResultHeight: 100,
        tbodyScrollHeight: 'auto',
        rowClass: 'even',
        showScrollbar: 'always',
        //滚动条什么时候显示，默认一直，可设置为never，scrolling
        tbodyScrollTop: 0,
        tbodyHeight: 'auto',
        evenClass: 'even',
        _rowHeight: 35,
        //实际行高,包含border什么的
        _rowHeightNoBorders: 0,
        columnWidth: 160,
        edge: 15,
        _data: [],
        topTable: {},
        bottomTable: {},
        scrollPanel: {},
        addColumnCallbacks: {},
        pageable: false,
        syncTheadColumnsOrder: true,
        remoteSort: avalon.noop,
        //远程排数函数
        noResultContent: '\u6682\u65E0\u7ED3\u679C',
        theadRenderedCallback: function (vmodel, options, vmodels) {
        },
        tbodyRenderedCallback: function (vmodel, options, vmodels) {
            if (vmodel._init) {
                vmodel._init = false;
            } else {
                vmodel.widgetElement.scrollIntoView();
            }
        },
        renderCell: function (val, key, row) {
            return val;
        },
        getColumnTitle: function () {
            return '';
        },
        getTemplate: function (tmpl, options) {
            return tmpl;
        },
        reRender: function (data, vm) {
            avalon.each(vm.addColumnCallbacks, function (n, fn) {
                fn(data);
            });
            vm.data = data;
            vm._data = vm.getStore(data, vm);
            if (typeof vm.onSort === 'function') {
                setTimeout(function () {
                    vm.onSort(vm);
                }, 500);
            }
        },
        getStore: function (array, vm) {
            return array.slice(vm.startIndex, vm.endIndex);
        },
        getColumn: function (el, options) {
            return el;
        },
        getPager: function (pager, options) {
            return pager;
        },
        getColumns: function (array, options) {
            var ret = [];
            for (var i = 0, el; el = array[i++];) {
                //如果是字符串数组转换为对象数组,原来的值变成新对象的field属性
                if (typeof el === 'string') {
                    el = { field: el };
                }
                //field用于关联data中的字段
                el.text = el.text || el.field;
                //真正在表格里显示的内容
                el.title = options.getColumnTitle(el);
                //当前当元素格的title属性
                el.width = el.width || options.columnWidth;
                //指定宽度,可以是百分比
                el.className = el.className || '';
                //当前当元素格添加额外类名
                el.align = el.align || '';
                //赋给align属性,表示是对齐方向 left, right, center
                el.localSort = typeof el.localSort === 'function' ? el.localSort : false;
                //当前列的排序函数
                makeBool(el, 'sortable', true);
                //能否排序
                makeBool(el, 'resizable', false);
                //能否改变列宽
                makeBool(el, 'sortAsc', true);
                //排序方向
                makeBool(el, 'toggle', true);
                //是否显示当前列
                makeBool(el, 'disabledToggle');
                //禁止改变当前列的显示状态
                makeBool(el, 'disabledResize');
                //禁止改变当前列的宽度
                options.getColumn(el, options);
                ret.push(el);
            }
            return ret;
        }
    };
    var fixUserSelect = function () {
        avalon(body).addClass('oni-helper-noselect');
    };
    var restoreUserSelect = function () {
        avalon(body).removeClass('oni-helper-noselect');
    };
    if (window.VBArray && !('msUserSelect' in document.documentElement.style)) {
        var _ieSelectBack;
        //fix IE6789
        function returnFalse(event) {
            event.returnValue = false;
        }
        fixUserSelect = function () {
            _ieSelectBack = body.onselectstart;
            body.onselectstart = returnFalse;
        };
        restoreUserSelect = function () {
            body.onselectstart = _ieSelectBack;
        };
    }
    //优化scroll事件的回调次数
    var requestAnimationFrame = window.requestAnimationFrame || function (callback) {
            return window.setTimeout(callback, 1000 / 60);
        };
    var cancelAnimationFrame = window.cancelAnimationFrame || function (id) {
            clearTimeout(id);
        };
    //得到移动的方向
    function getDirection(e, target, data) {
        var dir = '';
        var offset = target.offset();
        var width = target[0].offsetWidth;
        var edge = data.edge;
        if (e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
            dir = 'e';
        }
        return dir === 'e' ? dir : '';
    }
    function makeBool(elem, name, value) {
        value = !!value;
        elem[name] = typeof elem[name] === 'boolean' ? elem[name] : value;
    }
    function getHiddenParent(parent) {
        do {
            if (avalon(parent).css('display') === 'none') {
                var oldV, $parent = avalon(parent);
                return [
                    function show() {
                        $parent.css('display', 'block');
                        oldV = $parent.css('visibility');
                    },
                    function hide() {
                        $parent.css('display', 'none');
                        $parent.css('visibility', oldV);
                    }
                ];
            }
            if (parent.tagName === 'BODY') {
                break;
            }
        } while (parent = parent.parentNode);
        return [
            avalon.noop,
            avalon.noop
        ];
    }
    function makeTemplate(opts, name, value) {
        opts[name] = typeof opts[name] === 'function' ? opts[name](value, opts) : typeof opts[name] === 'string' ? opts[name] : value;
    }
    return avalon;
}
)();
},{"../dropdown/avalon.dropdown":21,"../loading/avalon.loading":33,"../pager/avalon.pager":46,"../scrollbar/avalon.scrollbar":52,"avalon":2}],55:[function(innerRequire,module,exports){
var avalon = innerRequire("../draggable/avalon.draggable"),
sourceHTML = "<div class=\"oni-slider oni-widget oni-corner-all\"\n     ms-class-1 = \"oni-slider-horizontal: orientation==='horizontal'\"\n     ms-class-2 = \"oni-slider-vertical: orientation !== 'horizontal'\"\n     ms-class-oni-state-disabled=\"disabled\"> \n    <div class=\"oni-slider-range oni-widget-header oni-corner-all\" \n         ms-class-1 = \"oni-slider-range-min:range==='min'\"\n         ms-class-2 = \"oni-slider-range-max:range==='max'\"\n         ms-css-MS_OPTION_WIDTHORHEIGHT = \"{{range === 'max' ? 100-percent : percent}}%\"\n         ms-css-MS_OPTION_LEFTORBOTTOM = \"{{ $twohandlebars ? percent0 : 'auto'}}%\"\n         ms-if = \"range\"\n         style=\"width: 100%;\">\n    </div>\n    <b  class=\"oni-slider-handle  oni-corner-all hander___flag\"\n        ms-css-MS_OPTION_LEFTORBOTTOM = \"{{percent}}%\"\n        ms-data-axis = \"$axis\"\n        ms-draggable\n        data-draggable-start=\"dragstart\" \n        data-draggable-stop=\"dragend\" \n        data-draggable-drag=\"drag\" \n        data-draggable-containment=\"parent\" \n        ms-hover=\"oni-state-hover\"\n        ms-if = \"!$twohandlebars\"\n        ></b>\n    <b  class=\"oni-slider-handle  oni-corner-all\"\n        ms-css-MS_OPTION_LEFTORBOTTOM = \"{{percent0}}%\"\n        ms-data-axis = \"$axis\"\n        ms-draggable\n        data-draggable-start=\"dragstart\" \n        data-draggable-stop=\"dragend\" \n        data-draggable-drag=\"drag\" \n        data-draggable-containment=\"parent\" \n        ms-hover=\"oni-state-hover\"\n        ms-if = \"$twohandlebars\"\n        ></b>\n    <b  class=\"oni-slider-handle  oni-corner-all\"\n        ms-css-MS_OPTION_LEFTORBOTTOM = \"{{percent1}}%\"\n        ms-data-axis = \"$axis\"\n        ms-draggable\n        data-draggable-start=\"dragstart\" \n        data-draggable-stop=\"dragend\" \n        data-draggable-drag=\"drag\" \n        data-draggable-containment=\"parent\" \n        ms-hover=\"oni-state-hover\"\n     \n        ms-if = \"$twohandlebars\"\n        ></b>\n</div>";
innerRequire("../avalon.getModel");

module.exports = (
function () {
    /**
     * @global Handlers ： 保存页面上所有滑动手柄
     * @global Index :点中手柄在Handlers中的索引，或滑动手柄在handlers中的索引 
     * @gloabal focusElement: 页面上点中的手柄元素的引用，当按下方向键时，滑动作用域此元素
     **/
    var Handlers = [], Index = 0, FocusElement, template = sourceHTML;
    var widget = avalon.ui['slider'] = function (element, data, vmodels) {
            var $element = avalon(element);
            var options = data.sliderOptions;
            var isHorizontal = options.orientation === 'horizontal';
            //将整个slider划分为N等分, 比如100, 227
            var valueMin = options.min;
            var valueMax = options.max;
            var oRange = options.range;
            //true min max， 默认为false
            var values = options.values;
            var twohandlebars = oRange === true;
            var value = Number(options.value);
            //第几等份
            if (isNaN(value)) {
                var valVM = avalon.getModel(options.value, vmodels);
                if (valVM) {
                    value = valVM[1][valVM[0]];
                }
            }
            options.template = options.getTemplate(template, options);
            // 固定最小的一边
            if (oRange === 'min' && values) {
                value = values[0];
            } else if (oRange === 'max' && values) {
                // 固定最大的一边
                value = values[1];
            }
            // 如果没有配置value和values,且range是min或者max，重置value
            if (!value && oRange === 'min' && !values) {
                value = valueMin || value;
            } else if (!value && oRange === 'max' && !values) {
                value = valueMax || value;
            }
            if (options.step !== 1 && !/\D/.test(options.step)) {
                value = correctValue(value);
            }
            // 如果滑动块有双手柄，重置values
            if (twohandlebars) {
                if (Array.isArray(values)) {
                    values = values.length === 1 ? [
                        values[0],
                        values[0]
                    ] : values.concat();
                } else {
                    values = [
                        valueMin,
                        valueMax
                    ];
                }
            }
            // 修正模板
            var sliderHTML = options.template.replace(/MS_OPTION_WIDTHORHEIGHT/g, isHorizontal ? 'width' : 'height').replace(/MS_OPTION_LEFTORBOTTOM/g, isHorizontal ? 'left' : 'bottom');
            // handlers保存滑动块上的手柄，域Handlers进行区分
            var slider = avalon.parseHTML(sliderHTML).firstChild, handlers = [];
            element.parentNode.insertBefore(slider, element.nextSibling);
            $element.addClass('oni-helper-hidden-accessible');
            function value2Percent(val) {
                // 将value值转换为百分比
                if (val < valueMin) {
                    val = valueMin;
                }
                if (val > valueMax) {
                    val = valueMax;
                }
                return parseFloat(((val - valueMin) / (valueMax - valueMin) * 100).toFixed(5));
            }
            function percent2Value(percent) {
                //0~1
                var val = (valueMax - valueMin) * percent + valueMin;
                val = correctValue(val);
                return parseFloat(val.toFixed(3));
            }
            function correctValue(val) {
                var step = options.step > 0 ? options.step : 1;
                var valModStep = (val - valueMin) % step;
                var n = (val - valueMin) / step;
                val = valueMin + (valModStep * 2 >= step ? step * Math.ceil(n) : step * Math.floor(n));
                return val;
            }
            var vmodel = avalon.define(data.sliderId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'template',
                        'rootElement',
                        'widgetElement',
                        'step',
                        '_dragEnd'
                    ];
                    vm.rootElement = slider;
                    vm.widgetElement = element;
                    vm.step = options.step > 0 ? options.step : 1;
                    vm.disabled = element.disabled;
                    vm.percent = twohandlebars ? value2Percent(values[1] - values[0] + valueMin) : value2Percent(value);
                    vm.percent0 = twohandlebars ? value2Percent(values[0]) : 0;
                    vm.percent1 = twohandlebars ? value2Percent(values[1]) : 0;
                    vm.value = twohandlebars ? values.join() : value;
                    vm.values = values;
                    vm.$axis = isHorizontal ? 'x' : 'y';
                    vm.$valueMin = valueMin;
                    vm.$valueMax = valueMax;
                    vm.$twohandlebars = twohandlebars;
                    vm.$percent2Value = percent2Value;
                    vm.$pixelTotal = 0;
                    vm._dragEnd = false;
                    vm.dragstart = function (event, data) {
                        vmodel.$pixelTotal = isHorizontal ? slider.offsetWidth : slider.offsetHeight;
                        Handlers = handlers;
                        // 很关键，保证点击的手柄始终在Handlers中，之后就可以通过键盘方向键进行操作
                        data.started = !vmodel.disabled;
                        data.dragX = data.dragY = false;
                        Index = handlers.indexOf(data.element);
                        data.$element.addClass('oni-state-active');
                        options.onDragStart.call(null, event, data);
                    };
                    vm.dragend = function (event, data, keyVal) {
                        data.$element.removeClass('oni-state-active');
                        // dragCaculate(event, data, keyVal)
                        options.onDragEnd.call(null, event, data);
                        vmodel._dragEnd = false;
                    };
                    vm.drag = function (event, data, keyVal) {
                        dragCaculate(event, data, keyVal);
                        options.onDrag.call(null, vmodel, data);
                        vmodel._dragEnd = true;
                    };
                    vm.$init = function () {
                        var a = slider.getElementsByTagName('b');
                        for (var i = 0, el; el = a[i++];) {
                            el.sliderModel = vmodel;
                            if (!twohandlebars && avalon(el).hasClass('hander___flag')) {
                                handlers.push(el);
                                avalon(el).removeClass('hander___flag');
                                break;
                            } else if (twohandlebars && !avalon(el).hasClass('hander___flag')) {
                                handlers.push(el);
                            }
                        }
                        avalon(element).css({
                            display: 'none',
                            height: 0,
                            width: 0,
                            padding: 0
                        });
                        avalon(slider).css('width', vmodel.width);
                        avalon.scan(slider, [vmodel].concat(vmodels));
                        if (typeof options.onInit === 'function') {
                            //vmodels是不包括vmodel的
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.$remove = function () {
                        slider.innerHTML = slider.textContent = '';
                        slider.parentNode.removeChild(slider);
                    };
                });
            vmodel.$watch('value', function (val) {
                val = correctValue(Number(val) || 0);
                if (!val || val < Number(vmodel.min)) {
                    val = 0;
                } else if (val > Number(vmodel.max)) {
                    val = vmodel.max;
                }
                vmodel.value = val;
                vmodel.percent = value2Percent(val);
                if (!vmodel._dragEnd) {
                    options.onDragEnd.call(null, data);
                }
            });
            function dragCaculate(event, data, keyVal) {
                if (isFinite(keyVal)) {
                    var val = keyVal;
                } else {
                    var prop = isHorizontal ? 'left' : 'top';
                    var pixelMouse = data[prop] + parseFloat(data.$element.css('border-top-width'));
                    //如果是垂直时,往上拖,值就越大
                    var percent = pixelMouse / vmodel.$pixelTotal;
                    //求出当前handler在slider的位置
                    if (!isHorizontal) {
                        // 垂直滑块，往上拖动时pixelMouse变小，下面才是真正的percent，所以需要调整percent
                        percent = Math.abs(1 - percent);
                    }
                    if (percent > 0.999) {
                        percent = 1;
                    }
                    if (percent < 0.001) {
                        percent = 0;
                    }
                    val = percent2Value(percent);
                }
                if (twohandlebars) {
                    //水平时，小的0在左边，大的1在右边，垂直时，小的0在下边，大的1在上边
                    if (Index === 0) {
                        var check = vmodel.values[1];
                        if (val > check) {
                            val = check;
                        }
                    } else {
                        check = vmodel.values[0];
                        if (val < check) {
                            val = check;
                        }
                    }
                    vmodel.values[Index] = val;
                    vmodel['percent' + Index] = value2Percent(val);
                    vmodel.value = vmodel.values.join();
                    vmodel.percent = value2Percent(vmodel.values[1] - vmodel.values[0] + valueMin);
                } else {
                    vmodel.value = val;
                    vmodel.percent = value2Percent(val);
                }
            }
            return vmodel;
        };
    widget.defaults = {
        max: 100,
        //@config 组件的最大值
        min: 0,
        //@config 组件的最小值
        width: -1,
        orientation: 'horizontal',
        //@config 组件是水平拖动还是垂直拖动，垂直是“vertical”
        /**
         * @config 滑块是否显示滑动范围，配置值可以是true、min、max
            <p>true: 显示滑动范围</p>
            <p>min: 滑块值最小的一端固定</p>
            <p>max: 滑块值最大的一端固定</p>
         */
        range: false,
        step: 1,
        //@config 滑块滑动的步值
        value: 0,
        //@config 滑块的当前值，当range为true时，value是滑块范围表示的两个值，以“,”分隔
        values: null,
        //@config 当range为true时，values数组需要有两个值，表示滑块范围
        disabled: false,
        //@config 是否禁用滑块, 设为true时滑块禁用
        /**
         * @config {Function} 滑动开始的回调
         * @param event {Object} 事件对象
         * @param data {Object} 滑动的数据信息
         */
        onDragStart: avalon.noop,
        /**
         * @config {Function} 滑动时的回调
         * @param vmodel {Object} 组件对应的Vmodel
         * @param data {Object} 滑动的数据信息
         */
        onDrag: avalon.noop,
        /**
         * @config {Function} 滑动结束时的回调
         * @param data {Object} 滑动的数据信息
         */
        onDragEnd: avalon.noop,
        getTemplate: function (str, options) {
            return str;
        }
    };
    avalon(document).bind('click', function (e) {
        // 当点击slider之外的区域取消选中状态
        e.stopPropagation();
        var el = e.target;
        var Index = Handlers.indexOf(el);
        if (Index !== -1) {
            if (FocusElement) {
                FocusElement.removeClass('oni-state-focus');
            }
            FocusElement = avalon(el).addClass('oni-state-focus');
        } else if (FocusElement) {
            FocusElement.removeClass('oni-state-focus');
            FocusElement = null;
        }
    });
    avalon(document).bind('keydown', function (e) {
        // 当选中某个手柄之后通过键盘上的方向键控制手柄的slider
        // e.preventDefault();
        if (FocusElement) {
            var vmodel = FocusElement[0].sliderModel;
            var percent = Handlers.length == 1 ? vmodel.percent : vmodel['percent' + Index];
            var val = vmodel.$percent2Value(percent / 100), keyVal;
            switch (e.which) {
            case 34:
            // pageDown
            case 39:
            // right
            case 38:
                // down
                keyVal = Math.min(val + 1, vmodel.$valueMax);
                break;
            case 33:
            // pageUp
            case 37:
            // left
            case 40:
                // up
                keyVal = Math.max(val - 1, vmodel.$valueMin);
                break;
            case 36:
                // home
                keyVal = vmodel.$valueMin;
                break;
            case 35:
                // end
                keyVal = vmodel.$valueMax;
                break;
            }
            if (isFinite(keyVal)) {
                vmodel.drag(e, {}, keyVal);
            }
        }
    });
    return avalon;
}
)();
},{"../avalon.getModel":6,"../draggable/avalon.draggable":20}],56:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-smartgrid\">\n    <table>\n        <colgroup>\n            <col ms-repeat-column=\"columns\" \n                 ms-class=\"oni-smartgrid-{{column.toggle? 'show': 'hide'}}\"\n                 ms-css-width=\"column.width\"/>\n        </colgroup>\n        <thead class=\"oni-smartgrid-header\">\n            <tr class=\"oni-smartgrid-header-fixed\" \n                ms-if=\"isAffix\"\n                ms-css-top=\"_headerTop\" \n                ms-visible=\"_fixHeaderToggle\" \n                ms-css-position=\"_position\" \n                ms-css-width=\"_gridWidth\">\n                <th ms-repeat-column=\"columns\" \n                    ms-visible=\"column.toggle\" \n                    ms-css-width=\"column._fixWidth\" \n                    ms-css-text-align=\"column.align\" \n                    ms-class=\"{{column.customClass}}\"\n                    ms-class-1=\"oni-state-hidden: _hiddenAffixHeader(column, allChecked)\">\n                    {{column.name|sanitize|html}}\n                    <span  ms-click=\"sortColumn(column, $index, $event)\"\n                           ms-if=\"column.sortable\" \n                           ms-class=\"oni-helper-{{column.sortTrend}}\">\n                        <span class=\"oni-helper-sort-top\"></span>\n                        <span class=\"oni-helper-sort-bottom\"></span>\n                    </span>\n                </th>\n            </tr>\n            <tr>\n                <th ms-repeat-column=\"columns\" \n                    ms-visible=\"_toggleColumn(column.toggle, $index)\" \n                    ms-css-text-align=\"column.align\" \n                    ms-class=\"{{column.customClass}}\"\n                    ms-class-1=\"oni-state-hidden: _hiddenAffixHeader(column, allChecked)\">\n                    {{column.name|sanitize|html}}\n                    <span  ms-click=\"sortColumn(column, $index, $event)\"\n                           ms-if=\"column.sortable\" \n                           ms-class=\"oni-helper-{{column.sortTrend}}\">\n                        <span class=\"oni-helper-sort-top\"></span>\n                        <span class=\"oni-helper-sort-bottom\"></span>\n                    </span>\n                </th>\n            </tr>\n        </thead>\n        <tbody class=\"oni-smartgrid-body\">\n        </tbody>\n        <tfoot class=\"oni-smartgrid-footer\">\n            <tr>\n                <td ms-attr-colspan=\"{{columns.size()}}\" class=\"oni-smartgrid-pager-wrapper\">\n                    <div ms-visible=\"pageable && _pagerShow\">\n                        <div ms-if=\"pageable\" ms-widget=\"pager, $, $pagerConfig\"></div>\n                    </div>\n                </td>\n            </tr>\n        </tfoot>\n    </table>\n    <div ms-widget=\"loading\"></div>\n</div>\nMS_OPTION_EJS\n<&- var trl = @data.length &>\n<&- if(!trl) { &>\n    <tr><td colspan=\"<&=@columns.length&>\"><div class=\"oni-smartgrid-nodata\"><&=@noResult&></div></td></tr>\n<&- } else { &>\n    <&- for(var i=0, tr; i<trl; i++) { &>\n        <&- tr = @data[i]; \n            var selectedClass = \"\";\n            if (i%2==0) {\n                selectedClass = \"oni-smartgrid-odd\";\n\n            } else {\n                selectedClass = \"oni-smartgrid-even\"\n            } \n            if (tr.selected && @checkRow) {\n                selectedClass += \" oni-smartgrid-selected\"\n            }\n            if (tr.disable) {\n                selectedClass += \" oni-state-disabled\"\n            }&>\n        <tr id=\"<&=tr.$id&>\" class=\"<&=selectedClass&>\" ms-hover=\"oni-state-hover\">\n            <&- for(var j=0, tdl=@columns.length, td; j<tdl; j++) { &>\n                <&- td=@columns[j].$model; \n                    var display=td.toggle ? \"display:table-cell;\" : \"display:none;\", \n                    textAlign=\"text-align:\"+td.align, style=display+textAlign,\n                    customClass = td.customClass || \"\",\n                    format = td.format;&>\n                <td style=\"<&= style &>\" class=\"<&= customClass &>\">\n                    <&= format(@vmId, td.key , i, tr[td.key], tr, tr.disable) &>\n                </td>\n            <& } &>\n        </tr>  \n    <& } &>  \n<& } &>    \n";
innerRequire("../loading/avalon.loading");
innerRequire("../pager/avalon.pager");
innerRequire("../dropdown/avalon.dropdown");

module.exports = (
function () {
    var tempId = new Date() - 0, templateArr = template.split('MS_OPTION_EJS'), gridHeader = templateArr[0],
        // 表格视图结构
        userAgent = (window.navigator.userAgent || '').toLowerCase(), positionAbsolute = userAgent.indexOf('msie 6') !== -1 || userAgent.indexOf('msie 7') !== -1, remptyfn = /^function\s+\w*\s*\([^)]*\)\s*{\s*}$/m, sorting = false,
        // 页面在排序的时候不用更新排序icon的状态为ndb，但如果是重新渲染数据的话重置icon状态为ndb
        callbacksNeedRemove = {};
    template = templateArr[1];
    // 静态模板渲染部分view
    var EJS = avalon.ejs = function (id, data, opts) {
            var el, source;
            if (!EJS.cache[id]) {
                opts = opts || {};
                var doc = opts.doc || document;
                data = data || {};
                if ($.fn) {
                    //如果引入jQuery, mass
                    el = $(id, doc)[0];
                } else if (doc.querySelectorAll) {
                    //如果是IE8+与标准浏览器
                    el = doc.querySelectorAll(id)[0];
                } else {
                    el = doc.getElementById(id.slice(1));
                }
                if (!el)
                    throw 'can not find the target element';
                source = el.innerHTML;
                if (!/script|textarea/i.test(el.tagName)) {
                    source = avalon.filters.unescape(source);
                }
                var fn = EJS.compile(source, opts);
                ejs.cache[id] = fn;
            }
            return ejs.cache[id](data);
        };
    //如果第二配置对象指定了tid，则使用它对应的编译模板
    EJS.compile = function (source, opts) {
        opts = opts || {};
        var tid = opts.tid;
        if (typeof tid === 'string' && typeof EJS.cache[tid] == 'function') {
            return EJS.cache[tid];
        }
        var open = opts.open || '<&';
        var close = opts.close || '&>';
        var helperNames = [], helpers = [];
        for (var name in opts) {
            if (opts.hasOwnProperty(name) && typeof opts[name] == 'function') {
                helperNames.push(name);
                helpers.push(opts[name]);
            }
        }
        var flag = true;
        //判定是否位于前定界符的左边
        var codes = [];
        //用于放置源码模板中普通文本片断
        var time = new Date() * 1;
        // 时间截,用于构建codes数组的引用变量
        var prefix = ' ;r += txt' + time + '[';
        //渲染函数输出部分的前面
        var postfix = '];';
        //渲染函数输出部分的后面
        var t = 'return function(data){\'use strict\'; try{var r = \'\',line' + time + ' = 0;';
        //渲染函数的最开始部分
        var rAt = /(^|[^\w\u00c0-\uFFFF_])(@)(?=\w)/g;
        var rstr = /(['"])(?:\\[\s\S]|[^\ \\r\n])*?\1/g;
        // /"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'/
        var rtrim = /(^-|-$)/g;
        var rmass = /mass/;
        var js = [];
        var pre = 0, cur, code, trim;
        for (var i = 0, n = source.length; i < n;) {
            cur = source.indexOf(flag ? open : close, i);
            if (cur < pre) {
                if (flag) {
                    //取得最末尾的HTML片断
                    t += prefix + codes.length + postfix;
                    code = source.slice(pre + close.length);
                    if (trim) {
                        code = code.trim();
                        trim = false;
                    }
                    codes.push(code);
                } else {
                    throw Error('\u53D1\u751F\u9519\u8BEF\u4E86');
                }
                break;
            }
            code = source.slice(i, cur);
            //截取前后定界符之间的片断
            pre = cur;
            if (flag) {
                //取得HTML片断
                t += prefix + codes.length + postfix;
                if (trim) {
                    code = code.trim();
                    trim = false;
                }
                codes.push(code);
                i = cur + open.length;
            } else {
                //取得javascript罗辑
                js.push(code);
                t += ';line' + time + '=' + js.length + ';';
                switch (code.charAt(0)) {
                case '=':
                    //直接输出
                    code = code.replace(rtrim, function () {
                        trim = true;
                        return '';
                    });
                    code = code.replace(rAt, '$1data.');
                    if (code.indexOf('|') > 1) {
                        //使用过滤器
                        var arr = [];
                        var str = code.replace(rstr, function (str) {
                                arr.push(str);
                                //先收拾所有字符串字面量
                                return 'mass';
                            }).replace(/\|\|/g, '@');
                        //再收拾所有短路或
                        if (str.indexOf('|') > 1) {
                            var segments = str.split('|');
                            var filtered = segments.shift().replace(/\@/g, '||').replace(rmass, function () {
                                    return arr.shift();
                                });
                            for (var filter; filter = arr.shift();) {
                                segments = filter.split(':');
                                name = segments[0];
                                args = '';
                                if (segments[1]) {
                                    args = ', ' + segments[1].replace(rmass, function () {
                                        return arr.shift();    //还原
                                    });
                                }
                                filtered = 'avalon.filters.' + name + '(' + filtered + args + ')';
                            }
                            code = '=' + filtered;
                        }
                    }
                    t += ' ;r +' + code + ';';
                    break;
                case '#':
                    //注释,不输出
                    break;
                case '-':
                default:
                    //普通逻辑,不输出
                    code = code.replace(rtrim, function () {
                        trim = true;
                        return '';
                    });
                    t += code.replace(rAt, '$1data.');
                    break;
                }
                i = cur + close.length;
            }
            flag = !flag;
        }
        t += ' return r; }catch(e){ avalon.log(e);\navalon.log(js' + time + '[line' + time + '-1]) }}';
        var body = [
                'txt' + time,
                'js' + time,
                'filters'
            ];
        var fn = Function.apply(Function, body.concat(helperNames, t));
        var args = [
                codes,
                js,
                avalon.filters
            ];
        var compiled = fn.apply(this, args.concat(helpers));
        if (typeof tid === 'string') {
            return EJS.cache[tid] = compiled;
        }
        return compiled;
    };
    EJS.cache = {};
    //用于保存编译好的模板函数
    avalon.filters.unescape = function (target) {
        return target.replace(/&quot;/g, '"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
        //处理转义的中文和实体字符
        return target.replace(/&#([\d]+);/g, function ($0, $1) {
            return String.fromCharCode(parseInt($1, 10));
        });
    };
    var cnt = 0;
    function guid() {
        return 'smartgridTr' + cnt++;
    }
    var countter = 0;
    var widget = avalon.ui.smartgrid = function (element, data, vmodels) {
            var options = data.smartgridOptions, $element = avalon(element), pager = options.pager, vmId = data.smartgridId, $initRender = true;
            perfectColumns(options, element);
            initContainer(options, element);
            options._position = positionAbsolute ? 'absolute' : 'fixed';
            options.loading.onInit = function (vm, options, vmodels) {
                vmodel.loadingVModel = vm;
            };
            options.$pagerConfig = {
                canChangePageSize: true,
                options: [
                    10,
                    20,
                    50,
                    100
                ],
                //默认[10,20,50,100]
                onInit: function (pagerVM, options, vmodels) {
                    vmodel && (vmodel.pager = pagerVM);
                    pagerVM && vmodel._entryCount(pagerVM);
                }
            };
            options.pageable = options.pageable !== void 0 ? options.pageable : true;
            if (avalon.type(pager) === 'object') {
                pager.prevText = pager.prevText || '\u4E0A\u4E00\u9875';
                pager.nextText = pager.nextText || '\u4E0B\u4E00\u9875';
                if (options.pageable) {
                    pager.getTemplate = typeof pager.getTemplate === 'function' ? pager.getTemplate : function (tmpl, options) {
                        var optionsStr = '';
                        if (Array.isArray(pager.options) && options.canChangePageSize) {
                            optionsStr = '<div class="oni-smartgrid-pager-options"><div class="oni-smartgrid-showinfo">\u6BCF\u9875\u663E\u793A</div><select ms-widget="dropdown" data-dropdown-list-width="50" data-dropdown-width="50" ms-duplex="perPages"><option ms-repeat="options" ms-value="el.value" ms-attr-label="el.value">{{el.text}}</option></select><div class="oni-smartgrid-showinfo">\u6761, {{totalItems}}\u6761\u7ED3\u679C</div></div>';
                        } else {
                            optionsStr = '<div class="oni-smartgrid-pager-options">{{totalItems}}\u6761\u7ED3\u679C</div>';
                        }
                        return tmpl + optionsStr;
                    };
                }
                if (pager.onInit && typeof pager.onInit === 'function') {
                    var onInit = pager.onInit;
                    pager.onInit = function (pagerVM, options, vmodels) {
                        vmodel && (vmodel.pager = pagerVM);
                        onInit(pagerVM, options, vmodels);
                        pagerVM && vmodel._entryCount(pagerVM);
                    };
                }
                avalon.mix(options.$pagerConfig, options.pager);
            }
            options.pager = null;
            //方便用户对原始模板进行修改,提高制定性
            options.template = options.getTemplate(template, options);
            options.$skipArray = [
                '_allEnabledData',
                'template',
                'widgetElement',
                'container',
                '_container',
                '_position',
                'htmlHelper',
                'selectable',
                'loadingVModel',
                'loading',
                'pageable',
                'noResult',
                'sortable',
                'pager',
                'data',
                // 一定不要去掉啊，去掉了就会出错
                'containerMinWidth',
                '_disabledData',
                '_enabledData',
                '_filterCheckboxData'
            ].concat(options.$skipArray);
            var vmodel = avalon.define(vmId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm._headerTop = 0 + options.affixHeight;
                    vm._container = null;
                    vm._fixHeaderToggle = false;
                    vm._gridWidth = 0;
                    vm._pagerShow = false;
                    vm._allEnabledData = [];
                    vm._disabledData = [];
                    vm._enabledData = [];
                    vm._filterCheckboxData = [];
                    vm.loadingVModel = null;
                    vm._dataRender = false;
                    vm.perPages = void 0;
                    vm._hiddenAffixHeader = function (column, allChecked) {
                        var selectable = vmodel.selectable;
                        return selectable && selectable.type && column.key == 'selected' && !allChecked;
                    };
                    vm.getRawData = function () {
                        return vmodel.data;
                    };
                    vm.getSelected = function () {
                        var disabledData = vmodel._disabledData, selectedData = [];
                        disabledData.forEach(function (dataItem, index) {
                            if (dataItem.selected) {
                                selectedData.push(dataItem);
                            }
                        });
                        return selectedData.concat(vmodel._enabledData);
                    };
                    vm._entryCount = function (pagerVM) {
                        if (vm.perPages !== void 0)
                            return;
                        function countEntry(n) {
                            var data = vm.data;
                            vm.perPages = n;
                            if (data.length > n)
                                vm.render(data.slice(0, n));
                        }
                        pagerVM.$watch('perPages', countEntry);
                        countEntry(pagerVM.perPages);
                    };
                    vm.selectAll = function (b) {
                        b = b !== void 0 ? b : true;
                        vmodel._selectAll(null, b);
                    };
                    vm.isSelectAll = function () {
                        return vmodel._allSelected;
                    };
                    //如果当前列可以排序，那么点击标题旁边的icon,将会调用此方法
                    vm.sortColumn = function (column, index, event) {
                        var target = event.target, $target = avalon(target), sortTrend = '', field = column.key, trend = 0, onColumnSort = vmodel.onColumnSort;
                        if (!vmodel.data.length)
                            return;
                        if ($target.hasClass('oni-helper-sort-top')) {
                            sortTrend = 'asc';
                        } else {
                            sortTrend = 'desc';
                        }
                        sorting = true;
                        sortTrend == 'asc' ? trend = 1 : trend = -1;
                        column.sortTrend = sortTrend;
                        if (vmodel.sortable.remoteSort && typeof vmodel.remoteSort === 'function' && !remptyfn.test(vmodel.remoteSort)) {
                            vmodel.remoteSort(field, sortTrend, vmodel);
                            // onColumnSort回调对于远程排序的最好时机是在remoteSort中数据渲染之后自行处理
                            ;
                        } else if (typeof column.localSort === 'function' && !remptyfn.test(column.localSort)) {
                            // !isEmptyFn(el.localSort)
                            //如果要在本地排序,并且指定排数函数
                            vmodel.data.sort(function (a, b) {
                                return trend * column.localSort(a, b, field, vmodel.$model) || 0;
                            });
                            vmodel.render();
                            if (avalon.type(onColumnSort) === 'function') {
                                onColumnSort.call(vmodel, sortTrend, field);
                            }
                        } else {
                            //否则默认处理
                            if (column.type === 'Number') {
                                vmodel.data.sort(function (a, b) {
                                    return trend * (a[field] - b[field]) || 0;
                                });
                            } else {
                                vmodel.data.sort(function (a, b) {
                                    return trend * a[field].localeCompare(b[field]);
                                });
                            }
                            vmodel.render();
                            if (avalon.type(onColumnSort) === 'function') {
                                onColumnSort.call(vmodel, sortTrend, field);
                            }
                        }
                    };
                    vm.setColumns = function (columns, b) {
                        var columnsOption = vmodel.columns;
                        columns = [].concat(columns);
                        b = b !== void 0 ? b : true;
                        for (var i = 0, len = columnsOption.length; i < len; i++) {
                            var column = columnsOption[i], key = column.$model.key, keyIndex = columns.indexOf(key);
                            if (keyIndex != -1 && !column.isLock) {
                                column.toggle = b;
                            }
                        }
                    };
                    vm.showNoResult = function (text) {
                        // 只要数据为空组件会自动showNoResult,考虑到使用习惯保留了showNoResult，不过其实完全可以不用
                        vmodel.noResult = text || vmodel.noResult;
                        vmodel.data = [];
                        vmodel.render();
                    };
                    vm.showLoading = function () {
                        vmodel.loadingVModel.toggle = true;
                    };
                    vm.hideLoading = function () {
                        vmodel.loadingVModel.toggle = false;
                    };
                    vm._selectAll = function (event, selected) {
                        var datas = vmodel.data, trs = vmodel._container.getElementsByTagName('tr'), onSelectAll = vmodel.onSelectAll;
                        setTimeout(function () {
                            var val = event ? event.target.checked : selected, enableData = datas.concat();
                            vmodel._allSelected = val;
                            for (var i = 0, len = trs.length; i < len; i++) {
                                var tr = trs[i], $tr = avalon(tr), data, input = tr.cells[0].getElementsByTagName('input')[0], dataIndex = input && avalon(input).attr('data-index');
                                if (dataIndex !== null && dataIndex !== void 0) {
                                    data = datas[dataIndex];
                                    if (!data.disable) {
                                        data.selected = val;
                                        input.checked = val;
                                        $tr[val ? 'addClass' : 'removeClass']('oni-smartgrid-selected');
                                    }
                                } else {
                                    continue;
                                }
                            }
                            if (val) {
                                vmodel._enabledData = vmodel._allEnabledData.concat();
                            } else {
                                vmodel._enabledData = [];
                            }
                            if (avalon.type(onSelectAll) === 'function') {
                                onSelectAll.call(vmodel, datas, val);
                            }
                        }, 100);
                    };
                    vm._toggleColumn = function (toggle, index) {
                        if (!vmodel._container)
                            return toggle;
                        var trs = vmodel._container.getElementsByTagName('tr'), cell = null;
                        for (var i = 0, tr, len = trs.length; i < len; i++) {
                            tr = trs[i];
                            cell = tr.cells[index];
                            if (cell) {
                                if (toggle) {
                                    tr.cells[index].style.display = 'table-cell';
                                } else {
                                    tr.cells[index].style.display = 'none';
                                }
                            }
                        }
                        setTimeout(function () {
                            vmodel._setColumnWidth();
                        }, 100);
                        return toggle;
                    };
                    vm._setColumnWidth = function (resize) {
                        var cells = vmodel._container.getElementsByTagName('tr')[0].cells, columns = vmodel.columns, _columns = columns.$model, $gridContainer = avalon(vmodel.container), containerWidth = $gridContainer.width(), minColumnWidth = getMinColumnWidth(_columns), firstStringColumn = getFirstStringColumn(columns, vmodel);
                        if (minColumnWidth > containerWidth && !resize || !vm.autoResize) {
                            $gridContainer.css('width', minColumnWidth);
                            firstStringColumn.width = firstStringColumn.configWidth;
                        } else {
                            $gridContainer.css('width', 'auto');
                            firstStringColumn.width = 'auto';
                        }
                        for (var i = 0, len = cells.length; i < len; i++) {
                            var $cell = avalon(cells[i]), cellWidth = $cell.width(), column = columns[i];
                            column._fixWidth = cellWidth;
                        }
                        vmodel._gridWidth = containerWidth;
                    };
                    vm._getTemplate = function (defineDatas, startIndex) {
                        var fn, html, id = 'smartgrid_tmp_' + tempId, dt = defineDatas || vmodel.data, _columns = vmodel.columns, columns = _columns.$model, selectableType = vmodel.selectable && vmodel.selectable.type || '', datas = [];
                        avalon.each(dt, function (i, item) {
                            if (item.$id && item.$id != 'remove')
                                datas.push(item);
                        });
                        var dataLen = datas.length;
                        checkRow = selectableType === 'Checkbox';
                        if (!EJS[id]) {
                            fn = EJS.compile(options.template, vmodel.htmlHelper);
                            EJS[id] = fn;
                        } else {
                            fn = EJS[id];
                        }
                        for (var i = 0, len = columns.length; i < len; i++) {
                            var column = columns[i], name = column.key;
                            if (!sorting) {
                                //如果sortTrend属性不存在，在IE下直接给它赋值会报错
                                _columns[i].sortTrend && (_columns[i].sortTrend = 'ndb');
                            }
                            for (var j = 0; j < dataLen; j++) {
                                var data = datas[j];
                                data[name] = data[name] !== void 0 ? data[name] : column.defaultValue;
                            }
                        }
                        if (vm.pageable && vm.pager && vm.pager.perPages) {
                            if (datas.length > vm.pager.perPages)
                                datas = datas.slice(0, vm.pager.perPages);
                        }
                        html = fn({
                            data: datas,
                            columns: _columns,
                            len: 2,
                            noResult: vmodel.noResult,
                            vmId: vmId,
                            startIndex: startIndex || 0,
                            checkRow: checkRow
                        });
                        return html;
                    };
                    vm._getAllCheckboxDisabledStatus = function (allSelected) {
                        var disabledCheckboxLen = vmodel._filterCheckboxData.length, disabledData = vmodel._disabledData.length, noneSelectedDataLen = disabledCheckboxLen + disabledData;
                        if (allSelected) {
                            return noneSelectedDataLen === vmodel.data.length ? true : false;
                        } else {
                            return false;
                        }
                    };
                    /**
             * @interface 增加行，已經渲染的不會再操作
             * @param 新增的行
             */
                    vm.addRows = function (data, init, noShowLoading) {
                        // 防止 addRows([])带来问题
                        if ((!data || !data.length) && !init)
                            return;
                        var tableTemplate = '', rows, container = vmodel.container, containerWrapper = container.getElementsByTagName('tbody')[0] || container.getElementsByTagName('table')[0], selectable = vmodel.selectable, len = vmodel.getLen(vmodel.data), arrLen = vmodel.data.length;
                        if (!containerWrapper)
                            return;
                        if (len === 0 || init)
                            avalon.clearHTML(containerWrapper);
                        vmodel._pagerShow = !len ? false : true;
                        // 做数据拷贝
                        if (data) {
                            var _data = [];
                            avalon.each(data, function (i, item) {
                                _data.push(avalon.mix({}, item));
                                _data[i].$id = guid();
                            });
                            vmodel.data.push.apply(vmodel.data, _data);
                        }
                        avalon.each(vmodel.data, function (i, item) {
                            item.$id = item.$id || guid();
                        });
                        tableTemplate = vmodel.addRow(vmodel._getTemplate(data ? vmodel.data.slice(arrLen) : data, data ? arrLen : 0), vmodel.columns.$model, vmodels);
                        rows = avalon.parseHTML(tableTemplate);
                        containerWrapper.appendChild(rows);
                        if (selectable && (selectable.type === 'Checkbox' || selectable.type === 'Radio')) {
                            var allSelected = isSelectAll(vmodel.data);
                            vmodel._allSelected = allSelected;
                            getSelectedData(vmodel);
                        }
                        if (!noShowLoading)
                            vmodel.showLoading(vmodel.data);
                        avalon.nextTick(function () {
                            avalon.scan(vmodel.container, [vmodel].concat(vmodels));
                            vmodel._setColumnWidth();
                            if (!noShowLoading)
                                vmodel.hideLoading();
                        });
                        if (sorting)
                            sorting = false;
                    };
                    vm.getLen = function (arr) {
                        var cnt = 0;
                        for (var i = 0, len = arr.length; i < len; i++) {
                            if (arr[i] && arr[i].$id != 'remove')
                                cnt++;
                        }
                        return cnt;
                    };
                    vm.removeRow = function (index, removeData) {
                        var data = vmodel.data[index];
                        if (!data)
                            return;
                        var id = data.$id, tr = document.getElementById(id);
                        tr && tr.parentNode.removeChild(tr);
                        if (removeData === false) {
                            data.$id = 'remove';
                        } else {
                            vmodel.data.splice(index, 1);
                        }
                        if (!vmodel.getLen(vmodel.data))
                            vmodel.render(void 0, true);
                    };
                    vm.render = function (data, init, noShowLoading) {
                        if (avalon.type(data) === 'array') {
                            vmodel.data = data;
                        } else {
                            init = data;
                        }
                        init = init === void 0 || init ? true : false;
                        if (!$initRender) {
                            dataFracte(vmodel);
                            vmodel._dataRender = !vmodel._dataRender;
                        } else {
                            $initRender = false;
                        }
                        vmodel.addRows(void 0, init, noShowLoading);
                        if (sorting) {
                            sorting = false;
                        } else if (!init) {
                            vmodel.container.scrollIntoView();
                        }
                    };
                    vm.$init = function () {
                        var container = vmodel.container, gridFrame = '';
                        gridFrame = gridHeader.replace('MS_OPTION_ID', vmodel.$id);
                        container.innerHTML = gridFrame;
                        dataFracte(vmodel);
                        avalon.scan(container, vmodel);
                        avalon.nextTick(function () {
                            vmodel._container = container.getElementsByTagName('tbody')[0];
                            vmodel.render(true);
                            bindEvents(vmodel);
                        });
                        if (vmodel.isAffix) {
                            callbacksNeedRemove.scrollCallback = avalon(window).bind('scroll', function () {
                                var scrollTop = Math.max(document.body.scrollTop, document.documentElement.scrollTop), offsetTop = $element.offset().top, headerHeight = avalon(element.getElementsByTagName('thead')[0]).css('height'), top = scrollTop - offsetTop + vmodel.affixHeight, clientHeight = avalon(window).height(), tableHeight = $element.outerHeight(), _position = vmodel._position;
                                if (tableHeight > clientHeight && scrollTop > offsetTop + headerHeight && offsetTop + tableHeight > scrollTop) {
                                    if (_position === 'absolute') {
                                        vmodel._headerTop = Math.floor(top);
                                    }
                                    if (!vmodel.$model._fixHeaderToggle) {
                                        vmodel._fixHeaderToggle = true;
                                    }
                                } else {
                                    if (_position === 'absolute') {
                                        vmodel._headerTop = 0;
                                    }
                                    if (vmodel.$model._fixHeaderToggle) {
                                        vmodel._fixHeaderToggle = false;
                                    }
                                }
                            });
                        }
                        element.resizeTimeoutId = 0;
                        callbacksNeedRemove.resizeCallback = avalon(window).bind('resize', function () {
                            if (!vmodel.autoResize)
                                return;
                            clearTimeout(element.resizeTimeoutId);
                            var clientWidth = avalon(window).width();
                            if (clientWidth <= vmodel.containerMinWidth) {
                                element.style.width = vmodel.containerMinWidth + 'px';
                            }
                            element.resizeTimeoutId = setTimeout(function () {
                                vmodel._container && vmodel._setColumnWidth(true);
                            }, 150);
                        });
                        if (typeof options.onInit === 'function') {
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.$remove = function () {
                        var container = vmodel.container;
                        container.innerHTML = container.textContent = '';
                        avalon(window).unbind('resize', callbacksNeedRemove.resizeCallback).unbind('scroll', callbacksNeedRemove.scrollCallback);
                    };
                });
            return vmodel;
        };
    widget.defaults = {
        container: '',
        // element | id
        autoResize: true,
        data: [],
        columns: [],
        allChecked: true,
        htmlHelper: {},
        noResult: '\u6682\u65F6\u6CA1\u6709\u6570\u636E',
        remoteSort: avalon.noop,
        isAffix: false,
        affixHeight: 0,
        containerMinWidth: 600,
        selectable: false,
        loading: {
            toggle: false,
            modal: true,
            modalBackground: '#000'
        },
        sortable: { remoteSort: true },
        addRow: function (tmpl, columns, vmodel) {
            return tmpl;
        },
        getTemplate: function (str, options) {
            return str;
        }
    };
    function initContainer(options, element) {
        var container = options.container;
        if (container) {
            if (typeof container == 'string') {
                container = document.getElementById(container);
            }
            if (!container.nodeType || container.nodeType != 1 || !document.body.contains(container)) {
                container = null;
            }
        }
        container = container || element;
        options.container = container;
    }
    function bindEvents(options) {
        if (!options.selectable)
            return;
        var type = options.selectable.type, container = options._container;
        if (type === 'Checkbox' || type === 'Radio') {
            avalon.bind(container, 'click', function (event) {
                var target = event.target, $target = avalon(target), $tr = avalon(target.parentNode.parentNode), datas = options.data, onSelectAll = options.onSelectAll, enabledData = options._enabledData, disabledData = options._disabledData, dataIndex = $target.attr('data-index'), filterCheckboxData = options._filterCheckboxData;
                if (!$target.attr('data-role') || dataIndex === null) {
                    return;
                }
                if ($target.attr('data-role') === 'selected') {
                    var rowData = datas[dataIndex], isSelected = target.checked;
                    if (isSelected) {
                        options.selectable.type === 'Checkbox' ? $tr.addClass('oni-smartgrid-selected') : 0;
                        if (options.selectable.type === 'Radio') {
                            enabledData.splice(0, enabledData.length);
                        }
                        rowData.selected = true;
                        avalon.Array.ensure(enabledData, rowData);
                    } else {
                        $tr.removeClass('oni-smartgrid-selected');
                        rowData.selected = false;
                        avalon.Array.remove(enabledData, rowData);
                    }
                    if (avalon.type(options.onRowSelect) === 'function') {
                        options.onRowSelect.call($tr[0], rowData, isSelected);
                    }
                }
                if (enabledData.length == datas.length - disabledData.length - filterCheckboxData.length) {
                    options._allSelected = true;
                } else {
                    options._allSelected = false;
                }
            });
        }
    }
    function dataFracte(vmodel) {
        var data = vmodel.data, enabledData = vmodel._enabledData = [], disabledData = vmodel._disabledData = [], filterCheckboxData = vmodel._filterCheckboxData = [];
        for (var i = 0, len = data.length, dataItem; i < len; i++) {
            dataItem = data[i];
            if (dataItem.disable) {
                disabledData.push(dataItem);
                continue;
            }
            if (dataItem.checkboxShow == false) {
                filterCheckboxData.push(dataItem);
                continue;
            }
            enabledData.push(dataItem);
        }
        vmodel._allEnabledData = enabledData.concat();
    }
    function getSelectedData(vmodel) {
        var datas = vmodel.data, enabledData = vmodel._enabledData = [];
        for (var i = 0, len = datas.length; i < len; i++) {
            var data = datas[i], selected = data.selected;
            if (selected && !data.disable) {
                enabledData.push(data);
            }
        }
    }
    function getFirstStringColumn(columns, vmodel) {
        for (var i = 0, len = columns.length; i < len; i++) {
            var column = columns[i], type = column.type;
            type = type === void 0 ? 'String' : type;
            if (column.toggle && type === 'String') {
                return column;
            }
        }
        if (vmodel.selectable && vmodel.selectable.type) {
            return columns[1];
        } else {
            return columns[0];
        }
    }
    function getMinColumnWidth(columns) {
        var showColumnWidth = 0;
        for (var i = 0, len = columns.length; i < len; i++) {
            var column = columns[i];
            if (column.toggle) {
                showColumnWidth += parseInt(column.configWidth) || 0;
            }
        }
        return showColumnWidth;
    }
    function isSelectAll(datas) {
        var allSelected = true, len = datas.length, checkboxFilterAll = 0;
        if (!len) {
            allSelected = false;
            return;
        }
        for (var i = 0; i < len; i++) {
            var data = datas[i];
            if (data.selected === void 0) {
                data.selected = false;
            }
            if (data.checkboxShow !== false && !data.selected && !data.disable) {
                allSelected = false;
            }
            if (data.checkboxShow === false) {
                checkboxFilterAll++;
            }
        }
        if (checkboxFilterAll === len) {
            allSelected = false;
        }
        return allSelected;
    }
    function perfectColumns(options, element) {
        var columns = options.columns, selectColumn = {}, parentContainerWidth = avalon(element.parentNode).width(), allColumnWidth = 0, maxWidth = 0, maxWidthColumn = {};
        for (var i = 0, len = columns.length; i < len; i++) {
            var column = columns[i], format = column.format, htmlFunction = '', _columnWidth = column.width, columnWidth = ~~_columnWidth;
            column.align = column.align || 'center';
            if (column.toggle === void 0 || column.isLock) {
                column.toggle = true;
            }
            column.configWidth = columnWidth;
            if (!columnWidth) {
                if (_columnWidth.indexOf('%')) {
                    columnWidth = parentContainerWidth * parseInt(_columnWidth) / 100;
                    column.configWidth = columnWidth;
                } else {
                    columnWidth = 'auto';
                }
            }
            column.width = column._fixWidth = columnWidth;
            allColumnWidth += ~~columnWidth;
            ~~columnWidth > maxWidth ? (maxWidth = columnWidth) && (maxWidthColumn = column) : 0;
            column.customClass = column.customClass || '';
            if (column.sortable) {
                column.sortTrend = 'ndb';
            }
            // 防止某些情形下format被覆盖
            if(avalon.isFunction(format)) return
            if (format && !options.htmlHelper[format]) {
                options.htmlHelper[format] = function (vmId, field, index, cellValue, rowData) {
                    avalon.log('\u65B9\u6CD5' + format + '\u672A\u5B9A\u4E49');
                    return cellValue;
                };
            }
            htmlFunction = options.htmlHelper[format];
            if (!htmlFunction) {
                htmlFunction = function (vmId, field, index, cellValue, rowData) {
                    return cellValue;
                };
            }
            column.format = htmlFunction;
            // EJS模板对于helper的渲染是通过将helper中的方法分别作为compiler的参数存在的，为了在静态模板中可以使用fn()这种方式渲染数据，只好统一将渲染数据的方法保存在format中
            ;
        }
        if (options.selectable) {
            var type = options.selectable.type, selectFormat, allSelected = true;
            if (type === 'Checkbox' || type === 'Radio') {
                selectFormat = function (vmId, field, index, selected, rowData, disable, allSelected) {
                    if (allSelected && type === 'Radio')
                        return;
                    if (rowData.checkboxShow === false) {
                        return '';
                    }
                    return '<input type=\'' + type.toLowerCase() + '\'' + ' ms-disabled=\'_getAllCheckboxDisabledStatus(' + (allSelected ? true : false) + ', _dataRender)\' ' + (selected ? 'checked=\'checked\'' : '') + ' name=\'selected\' ' + (allSelected ? ' ms-click=\'_selectAll\' ms-duplex-radio=\'_allSelected\'' : ' data-index=\'' + index + '\'') + ' data-role=\'selected\'/>';
                };
                allSelected = isSelectAll(options.data) || false;
                options._allSelected = allSelected;
            }
            selectColumn = {
                key: 'selected',
                name: selectFormat(options.$id, 'selected', -1, allSelected, [], null, true),
                width: 25,
                configWidth: 25,
                sortable: false,
                type: options.selectable.type,
                format: selectFormat,
                toggle: true,
                align: 'center',
                customClass: ''
            };
            allColumnWidth += 25;
            selectColumn.width = selectColumn._fixWidth = 25;
            columns.unshift(selectColumn);
        }
        if (allColumnWidth > parentContainerWidth) {
            if (~~maxWidthColumn.width) {
                maxWidthColumn.width = 'auto';
            } else {
                for (i = 0; i < len; i++) {
                    column = columns[i];
                    if (~~column.width) {
                        column.width = 'auto';
                        break;
                    }
                }
            }
        }
        options.columns = columns;
    }
    return avalon;
}
)();
},{"../dropdown/avalon.dropdown":21,"../loading/avalon.loading":33,"../pager/avalon.pager":46,"avalon":2}],57:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<div class=\"oni-spinner oni-widget\">\n    <button type=\"button\" class=\"oni-btn\" \n            ms-click=\"_sub\" \n            ms-disabled=\"min==value || disabled\"\n            ms-class=\"oni-state-disabled:min==value || disabled\">\n        <i class=\"oni-icon oni-icon-minus\">&#xf085;</i>\n    </button>\n    <div class=\"oni-textbox oni-widget-content\" ms-class=\"oni-state-disabled:disabled\">\n        <div class=\"oni-textbox-input-wrap\">\n            <b>tmp</b>\n        </div>\n    </div>\n    <button type=\"button\" class=\"oni-btn\" \n            ms-click=\"_add\" \n            ms-disabled=\"max==value || disabled\"\n            ms-class=\"oni-state-disabled:max==value || disabled\">\n        <i class=\"oni-icon oni-icon-plus\">&#xf016;</i>\n    </button>\n</div>";

module.exports = (
function () {
    var widget = avalon.ui.spinner = function (element, data, vmodels) {
            var options = data.spinnerOptions, template = sourceHTML, duplex = function () {
                    var inputMsData = element.msData;
                    for (var i in inputMsData) {
                        if (i.indexOf('ms-duplex') === 0) {
                            return inputMsData[i];
                        }
                    }
                }(), duplexVM = duplex && avalon.getModel(duplex, vmodels) || null, disabled = element.msData['ms-disabled'], disabledVM = disabled && avalon.getModel(disabled, vmodels) || null, min = Number(options.min), max = Number(options.max), oldValue = 0, minVM, maxVM;
            if (duplexVM) {
                duplexVM[1].$watch(duplexVM[0], function (val) {
                    if (/[^0-9]/.test(val + '')) {
                        vmodel.value = element.value = oldValue;
                        return;
                    }
                    if (val === '') {
                        return;
                    }
                    val = checkNum(val);
                    vmodel.value = element.value = oldValue = val;
                });
            }
            if (disabledVM) {
                disabledVM[1].$watch(disabledVM[0], function (val) {
                    vmodel.disabled = val;
                });
            }
            if (isNaN(min) && typeof options.min === 'string') {
                minVM = avalon.getModel(options.min, vmodels) || null;
                if (minVM) {
                    minVM[1].$watch(minVM[0], function (val) {
                        vmodel.min = val;
                    });
                    options.min = minVM[1][minVM[0]];
                } else {
                    options.min = NaN;
                }
            }
            if (isNaN(max) && typeof options.max === 'string') {
                maxVM = avalon.getModel(options.max, vmodels) || null;
                if (maxVM) {
                    maxVM[1].$watch(maxVM[0], function (val) {
                        vmodel.max = val;
                    });
                    options.max = maxVM[1][maxVM[0]];
                } else {
                    options.max = NaN;
                }
            }
            options.template = options.getTemplate(template, options);
            element.value = options.value || element.value;
            if (options.value === void 0) {
                options.value = element.value;
            }
            options.disabled = disabled && disabledVM && disabledVM[1][disabledVM[0]] || element.disabled || false;
            var vmodel = avalon.define(data.spinnerId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'step'
                    ];
                    vm.widgetElement = element;
                    var wrapper = null    /*, focusValue = 0*/;
                    vm.$init = function () {
                        wrapper = avalon.parseHTML(options.template).firstChild;
                        var tmpBElement = wrapper.getElementsByTagName('b')[0], tmpBParent = tmpBElement.parentNode, tmpDiv = document.createElement('div'), elementParent = element.parentNode;
                        // 插入临时标签，保证包裹了element的文档碎片最终插入到element原来所在位置
                        decorateElement();
                        // 为element添加相应的类，并绑定事件
                        elementParent.insertBefore(tmpDiv, element);
                        tmpBParent.appendChild(element);
                        // 模板中插入临时DOM节点b，为了方便查找放置input的父节点，将element放到合适的位置之后要移除临时节点
                        tmpBParent.removeChild(tmpBElement);
                        elementParent.replaceChild(wrapper, tmpDiv);
                        avalon.scan(wrapper, [vmodel].concat(vmodels));
                        // 如果输入域的初始值不在spinner的范围，调整它
                        ajustValue();
                        if (typeof options.onInit === 'function') {
                            //vmodels是不包括vmodel的
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.$remove = function () {
                        wrapper.innerHTML = wrapper.textContent = '';
                        wrapper.parentNode.removeChild(wrapper);
                    };
                    vm._add = function (event) {
                        // add number by step
                        var value = Number(element.value), subValue = 0;
                        subValue = value + (options.step || 1);
                        // 如果subValue不是number类型说明value包含非数值字符，或者options.step包含非数值字符
                        // if(isNaN(subValue)) {
                        //     throw new Error("输入域的值非数值，或者step的设置为非数值，请检查");
                        // }
                        subValue = checkNum(subValue);
                        vmodel.value = element.value = subValue;
                        options.onIncrease.call(event.target, subValue);
                    };
                    vm._sub = function (event) {
                        // minus number by step
                        var value = Number(element.value), subValue = 0;
                        subValue = value - (options.step || 1);
                        if (isNaN(subValue)) {
                            throw new Error('\u8F93\u5165\u57DF\u7684\u503C\u975E\u6570\u503C\uFF0C\u6216\u8005step\u7684\u8BBE\u7F6E\u4E3A\u975E\u6570\u503C\uFF0C\u8BF7\u68C0\u67E5');
                        }
                        subValue = checkNum(subValue);
                        vmodel.value = element.value = subValue;
                        options.onDecrease.call(event.target, subValue);
                    };
                    vm.$watch('min', function () {
                        ajustValue();
                    });
                    vm.$watch('max', function () {
                        ajustValue();
                    });
                });
            function ajustValue() {
                var min = vmodel.min, max = vmodel.max, value = Number(element.value);
                if (typeof min == 'number' && !isNaN(Number(min)) && value < min) {
                    value = min;
                }
                if (typeof max == 'number' && !isNaN(Number(max)) && value > max) {
                    value = max;
                }
                vmodel.value = element.value = value;
            }
            function decorateElement() {
                var $element = avalon(element);
                $element.addClass('oni-textbox-input');
                $element.attr('ms-css-width', 'width');
                $element.attr('ms-class', 'oni-state-disabled:disabled');
                $element.bind('blur', function () {
                    value = element.value;
                    if (!isNaN(Number(value))) {
                        value = checkNum(element.value);
                    }
                    vmodel.value = element.value = value;
                });
                $element.bind('keydown', function (event) {
                    switch (event.which) {
                    case 38:
                        // up
                        vmodel._add(event);
                        return false;
                    case 40:
                        // down
                        vmodel._sub(event);
                        return false;
                    }
                });
            }
            function checkNum(val) {
                // 如果val包含非数值字符，设置为0
                var v = Number(val) || 0, min = vmodel.min, max = vmodel.max;
                // 当设置了数值options.min，且不是NaN，重置v，否则忽略
                if (typeof min == 'number' && !isNaN(Number(min))) {
                    if (v < min)
                        v = min;
                }
                // 当设置了数值options.max，且不是NaN，重置v，否则忽略
                if (typeof max == 'number' && !isNaN(Number(max))) {
                    if (v > max)
                        v = max;
                }
                return parseFloat(v);
            }
            return vmodel;
        };
    widget.version = 1;
    widget.defaults = {
        min: NaN,
        //@config spinner的最小值,默认不存在最小值限制
        max: NaN,
        //@config spinner的最大值，默认不存在最大值限制
        step: 1,
        //@config spinner的步长
        width: 'auto',
        //@config 设置spinner的width
        value: 0,
        //@config spinner的当前值
        disabled: false,
        //@config 是否禁用spinner
        widgetElement: '',
        // accordion容器
        getTemplate: function (str, options) {
            return str;
        },
        /**
         * @config {Function} 减值更新spinner之后的回调
         * @param value {Number} 当前值
         */
        onDecrease: avalon.noop,
        /**
         * @config {Function} 增值更新spinner之后的回调
         * @param value {Number} 当前值
         */
        onIncrease: avalon.noop
    };
    return avalon;
}
)();
},{"../avalon.getModel":6}],58:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");
innerRequire("../json/avalon.json");

module.exports = (
function () {
    var store = {
            //一些接口(空实现)
            disabled: false,
            /*
         *  @interface 添加或设置某一数据
         *  @param name {String} 
         *  @param value {String} 
         */
            set: function (key, value) {
            },
            /*
         *  @interface 获取某一数据
         *  @param name {String} 
         *  @return {String}
         */
            get: function (key) {
            },
            /*
         *  @interface 移除某一数据
         *  @param key {String} 
         */
            remove: function (key) {
            },
            /*
         *  @interface 清空一数据
         */
            clear: function () {
            },
            /*
         *  @interface 遍历所有数据
         *  @param callback {Function} 里面会依次传入key与value
         */
            forEach: function (callback) {
            },
            /*
         *  @interface 得到所有数据，以对象形式返回
         *  @returns {Object}
         */
            getAll: function () {
                var ret = {};
                store.forEach(function (key, val) {
                    ret[key] = val;
                });
                return ret;
            },
            serialize: function (value) {
                return JSON.stringify(value);
            },
            parse: function (value) {
                if (typeof value !== 'string') {
                    return void 0;
                }
                try {
                    return JSON.parse(value);
                } catch (e) {
                    return value || undefined;
                }
            }
        };
    //http://wojodesign.com/full-browser-support-for-localstorage-without-cookies/
    //http://mathiasbynens.be/notes/localstorage-pattern
    var name = 'test' + (new Date() - 0), localStorageName = 'localStorage', storage;
    var supportLocalStorage = false;
    try {
        localStorage.setItem(name, 'mass');
        localStorage.removeItem(name);
        supportLocalStorage = true;
    } catch (e) {
    }
    if (supportLocalStorage) {
        storage = localStorage;
        avalon.mix(store, {
            //重写
            set: function (key, val) {
                if (val === void 0) {
                    return store.remove(key);
                }
                storage.setItem(key, store.serialize(val));
                return val;
            },
            get: function (key) {
                return store.parse(storage.getItem(key));
            },
            remove: function (key) {
                storage.removeItem(key);
            },
            clear: function () {
                storage.clear();
            },
            forEach: function (callback) {
                for (var i = 0; i < storage.length; i++) {
                    var key = storage.key(i);
                    callback(key, store.get(key));
                }
            }
        });
    } else if (document.documentElement.addBehavior) {
        var storageOwner, storageContainer;
        //由于＃userData的存储仅适用于特定的路径，
        //我们需要以某种方式关联我们的数据到一个特定的路径。我们选择/favicon.ico作为一个非常安全的目标，
        //因为所有的浏览器都发出这个URL请求，而且这个请求即使是404也不会有危险。
        //我们可以通过一个ActiveXObject(htmlfle)对象的文档来干这事。
        //(参见:http://msdn.microsoft.com/en-us/library/aa752574(v = VS.85). aspx)
        //因为iframe的访问规则允许直接访问和操纵文档中的元素，即使是404。
        //这文档可以用来代替当前文档（这被限制在当前路径）执行＃userData的存储。
        try {
            var scriptTag = 'script';
            storageContainer = new ActiveXObject('htmlfile');
            storageContainer.open();
            storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>');
            storageContainer.close();
            storageOwner = storageContainer.w.frames[0].document;
            storage = storageOwner.createElement('div');
        } catch (e) {
            storage = document.createElement('div');
            storageOwner = document.body;
        }
        function withIEStorage(storeFunction) {
            return function () {
                var args = Array.prototype.slice.call(arguments, 0);
                args.unshift(storage);
                //  http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
                //  http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
                storageOwner.appendChild(storage);
                storage.addBehavior('#default#userData');
                storage.load(localStorageName);
                var result = storeFunction.apply(store, args);
                try {
                    storageOwner.removeChild(storage);
                } catch (e) {
                }
                return result;
            };
        }
        // In IE7, keys may not contain special chars. See all of https://github.com/marcuswestin/store.js/issues/40
        var forbiddenCharsRegex = new RegExp('[!"#$%&\'()*+,/\\\\:;<=>?@[\\]^`{|}~]', 'g');
        function ieKeyFix(key) {
            return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___');
        }
        avalon.mix(store, {
            //重写
            set: withIEStorage(function (storage, key, val) {
                key = ieKeyFix(key);
                if (val === void 0) {
                    return store.remove(key);
                }
                storage.setAttribute(key, store.serialize(val));
                storage.save(localStorageName);
                return val;
            }),
            get: withIEStorage(function (storage, key) {
                key = ieKeyFix(key);
                return store.parse(storage.getAttribute(key));
            }),
            remove: withIEStorage(function (storage, key) {
                key = ieKeyFix(key);
                storage.removeAttribute(key);
                storage.save(localStorageName);
            }),
            clear: function () {
                store.forEach(function (name) {
                    store.remove(name);
                });
            },
            forEach: withIEStorage(function (storage, callback) {
                var attributes = storage.XMLDocument.documentElement.attributes;
                for (var i = 0, attr; attr = attributes[i]; ++i) {
                    callback(attr.name, store.parse(storage.getAttribute(attr.name)));
                }
            })
        });
    }
    try {
        store.set(localStorageName, localStorageName);
        if (store.get(localStorageName) != localStorageName) {
            store.disabled = true;
        }
        store.remove(localStorageName);
    } catch (e) {
        store.disabled = true;
    }
    avalon.store = store;
    return avalon;
}
)();
},{"../json/avalon.json":27,"avalon":2}],59:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
tmpl = "<div class=\"oni-dropdown\"\n     ms-class=\"oni-dropdown-disabled:!enable\"\n     ms-class-1=\"oni-state-focus: focusClass\"\n     ms-css-width=\"{{width}}\"\n     ms-hover=\"oni-state-hover\"\n     ms-keydown=\"_keydown\"\n     tabindex=\"0\">\n    <div class=\"oni-dropdown-source\">\n        <div class=\"oni-dropdown-input\"\n             ms-title=\"title\"\n             ms-css-width=\"titleWidth\"\n             id=\"title-MS_OPTION_ID\">\n            {{currentOption.data.titleValue|sanitize|html}}\n        </div>\n        <div class=\"oni-dropdown-icon-wrap\">\n            <i class=\"oni-dropdown-icon oni-icon oni-icon-angle-up\"\n               ms-if=\"toggle\">&#xf028;</i>\n            <i class=\"oni-dropdown-icon oni-icon oni-icon-angle-down\"\n               ms-if=\"!toggle\">&#xf032;</i>\n        </div>\n    </div>\n</div>\nMS_OPTION_TEMPLATE\n<div class=\"oni-dropdown\"\n     ms-class=\"oni-dropdown-menu:!multiple\"\n     ms-class-1=\"{{listClass}}\"\n     ms-css-width=\"{{listWidth}}\"\n     ms-mouseenter=\"_listenter\"\n     ms-mouseleave=\"_listleave\"\n     ms-visible=\"toggle||multiple\">\n    <div class=\"oni-dropdown-menu-inner\"\n         ms-css-width=\"menuWidth\"\n         ms-css-height=\"menuHeight\"\n         ms-widget=\"scrollbar,scrollbar-MS_OPTION_ID\" id=\"menu-MS_OPTION_ID\">\n        <div class=\"oni-scrollbar-scroller\"\n             id=\"list-MS_OPTION_ID\">\n            <div ms-repeat=\"data\"  class=\"oni-dropdown-item\"\n                 ms-click-12=\"_select($index, $event)\"\n                 ms-title=\"el.title||el.label\"\n                 ms-hover=\"oni-state-hover: el.enable\"\n                 ms-class-1=\"oni-state-disabled:!el.enable\"\n                 ms-class-2=\"oni-state-active:isActive(el) \"\n                 ms-class-4=\"oni-dropdown-group:el.group\"\n                 ms-class-5=\"oni-dropdown-divider:el.group && !$first\"\n                 data-repeat-rendered=\"updateScrollbar\"\n                    >{{el.label|sanitize|html}}</div>\n        </div>\n    </div>\n</div>\n";
innerRequire("../dropdown/avalon.dropdown");
innerRequire("../avalon.getModel");

module.exports = (
function () {
    /**
     * 默认的switch item
     * @type {Array}
     * value: option的值
     * label: option的label
     * class: option webfont的样式
     * title: option的title
     * font: option webfont的字符
     */
    var defaultData = [
            {
                value: 1,
                label: ' \u542F\u7528',
                iconClass: 'g-icon-start',
                title: '\u542F\u7528',
                font: '&#xf084;',
                titleValue: ' \u5DF2\u542F\u7528'
            },
            {
                value: 2,
                label: ' \u6682\u505C',
                iconClass: 'g-icon-pause',
                title: '\u6682\u505C',
                font: '&#xf086;',
                titleValue: ' \u5DF2\u6682\u505C'
            }
        ];
    //使用switchdropdown做代理，包装option，内部使用dropdown组件实现
    var widget = avalon.ui.switchdropdown = function (element, data, vmodels) {
            var options = data.switchdropdownOptions;
            //mix defaultData, getDataFromHTML, options.data
            options.data = setItemLabel(avalon.mix(true, [], defaultData, getDataFromHTML(element), options.data));
            //检测options.value是否可以匹配到options.data中的选项
            //如果不能匹配，首先找到selected的选项
            //如果没有selected的选项，则把value设置为data中的第一项
            for (var preSet = options.value, value = options.data[0].value, i = 0, len = options.data.length, item; i < len; i++) {
                item = options.data[i];
                if (item.value === preSet) {
                    value = preSet;
                    break;
                }
                if (item.selected) {
                    value = item.value;
                }
            }
            options.value = value;
            var vmodel = avalon.define('switchdropdown' + setTimeout('1'), function (vm) {
                    vm.$opts = options;
                    vm.$init = function (continueScan) {
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('\u8BF7\u5C3D\u5FEB\u5347\u5230avalon1.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                });
            avalon(element).attr('ms-widget', [
                'dropdown',
                data.switchdropdownId,
                '$opts'
            ].join());
            //由于对数据做预先处理，使用option模式传递数据，将element的内容清空
            element.innerHTML = '';
            return vmodel;
        };
    function getDataFromHTML(select, arr, parent) {
        var ret = arr || [];
        var elems = select.children;
        parent = parent || null;
        for (var i = 0, el; el = elems[i++];) {
            if (el.nodeType === 1) {
                //过滤注释节点
                if (el.tagName === 'OPTION') {
                    var option = {
                            label: ' ' + el.text.trim(),
                            //IE9-10有BUG，没有进行trim操作
                            title: el.title.trim(),
                            value: parseData(avalon(el).val()),
                            enable: !el.disabled,
                            group: false,
                            selected: el.selected,
                            parent: parent
                        };
                    //设置了用于在标题处显示的文案：titleValue
                    if (avalon(el).attr('data-title-value')) {
                        option.titleValue = ' ' + avalon(el).attr('data-title-value').trim();
                    }
                    ret.push(option);
                    if (ret.length === 2)
                        break;
                }
            }
        }
        return ret;
    }
    //设置option的label
    function setItemLabel(items) {
        avalon.each(items, function (i, item) {
            item.text = item.label;
            item.label = [
                '<i class="oni-icon ',
                item.iconClass,
                '">',
                item.font,
                '</i>',
                item.label
            ].join('');
            item.titleValue = [
                '<i class="oni-icon ',
                item.iconClass,
                '">',
                item.font,
                '</i>',
                item.titleValue
            ].join('');
        });
        return items;
    }
    //用于将字符串中的值转换成具体值
    function parseData(data) {
        try {
            data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : data;
        } catch (e) {
        }
        return data;
    }
    widget.version = '1.0';
    widget.defaults = {
        width: 100,
        //@config 自定义宽度
        listWidth: 100,
        //@config 自定义下拉列表的宽度
        height: 60,
        //@config 下拉列表的高度
        enable: true,
        //@config 组件是否可用
        readOnly: false,
        //@config 组件是否只读
        data: [],
        //@config 下拉列表显示的数据模型
        value: '',
        //@config 设置组件的初始值
        /**
         * @config 模板函数,方便用户自定义模板
         * @param str {String} 默认模板
         * @param opts {Object} VM
         * @returns {String} 新模板
         */
        getTemplate: function () {
            return tmpl;
        },
        onInit: avalon.noop
    };
}
)();
},{"../avalon.getModel":6,"../dropdown/avalon.dropdown":21,"avalon":2}],60:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-tab-slider\"\n    ms-visible=\"toggle\">\n    <a href=\"#\" class=\"oni-tab-slider-button oni-tab-slider-button-left\" \n       ms-visible=\"prevEnable\" \n       ms-click=\"slider($event,'prev')\"><</a>\n    <div class=\"oni-tab-slider-ct oni-tab-slider-enable\" \n         ms-css-margin-left=\"-sliderIndex*100+'%'\">\n        <ul class=\"oni-tab-nav oni-helper-clearfix oni-widget-header oni-helper-reset\" \n        ms-attr-id=\"'tabs' + tabs.$id\">\n            <li class=\"oni-state-default\" \n                data-repeat-rendered=\"computeSlider\" \n                ms-repeat-tab=\"tabs\" \n                ms-class=\"oni-tab-item\"  \n                ms-class-1=\"oni-state-active:!!_canActive(tab, $index)\" \n                ms-class-2=\"oni-state-disabled:tab.disabled\" \n                ms-class-3=\"oni-tab-last:$last\" \n                ms-class-4=\"oni-tab-removable:!!_canRemove(tab)\" \n                ms-hover=\"oni-state-hover:!tab.disabled\" \n                ms-{{MS_OPTION_EVENT}}=\"activate($event, $index)\" \n                > \n                <a ms-href=\"tab.href?tab.href:'#'\" ms-attr-target=\"tab.target||target||'_self'\">{{_tabTitle(tab.title, tab, _cutCounter(), cutEnd) | sanitize | html}}</a>\n                {{MS_OPTION_REMOVABLE}}\n            </li>\n        </ul>\n    </div>\n    <a href=\"#\" class=\"oni-tab-slider-button\" \n       ms-visible=\"nextEnable\"\n       ms-click=\"slider($event,'next')\">></a>\n</div>",
panelTpl = "<div class=\"oni-tab-panel-container\" ms-each-panel=\"tabpanels\"\n\t ms-visible=\"toggle\"\n\t ms-if=\"tabpanels.size()\">\n     <div class=\"oni-tab-panel oni-widget-content\" \n          ms-visible=\"_shallPanelAlwaysShow($index)\" \n          ms-if-loop=\"_isAjax(panel)\">{{panel.content | sanitize | html }}</div>\n     <div class=\"oni-tab-panel oni-widget-content\"\n          ms-visible=\"_shallPanelAlwaysShow($index)\" \n          ms-include-src=\"panel.content\" \n          ms-if-loop=\"!_isAjax(panel)\" data-include-rendered=\"onAjaxCallback\">\n     </div>\n</div>",
closeTpl = "<span  class=\"oni-tab-close oni-icon oni-icon-close\"\n       ms-visible=\"!tab.disabled\"\n       ms-click=\"remove($event, $index)\" \n       ms-hover=\"oni-tab-close-hover\" \n       ms-if=\"!!_canRemove(tab)\">&times;\n</span>";

module.exports = (
function () {
    // 对模板进行转换
    function _getTemplate(tpl, vm) {
        return tpl.replace(/\{\{MS_[A-Z_0-9]+\}\}/g, function (mat) {
            var mat = (mat.split('{{MS_OPTION_')[1] || '').replace(/\}\}/g, '').toLowerCase().replace(/_[^_]/g, function (mat) {
                    return mat.replace(/_/g, '').toUpperCase();
                });
            // 防止事件绑定覆盖，可能匹配不对，但是不会影响实际效果
            if (mat == 'event' && vm[mat]) {
                var m, eventId;
                if (m = tpl.match(new RegExp(' ms-' + vm[mat] + '[^\'\\"]', 'g'))) {
                    eventId = m.length;
                    m = m.join(',');
                    while (m.match(new RegExp(eventId, 'g'))) {
                        eventId++;
                    }
                    return vm[mat] + '-' + eventId;
                }
            } else if (mat == 'removable') {
                return closeTpl;
            }
            return vm[mat] || '';
        });
    }
    function _getData(par, type, target) {
        var res = [];
        for (var i = 0, el; el = par && par.children[i++];) {
            if (el.tagName.toLowerCase() != type)
                continue;
            var opt = avalon(el).data(), obj = type == 'div' ? {
                    content: opt.content || el.innerHTML,
                    contentType: opt.contentType || 'content'
                } : {
                    title: el.innerHTML,
                    removable: opt.removable,
                    linkOnly: opt.linkOnly,
                    target: opt.target || target || '_self',
                    disabled: opt.disabled == void 0 ? false : opt.disabled
                };
            var href = opt.href || el.getAttribute('href');
            if (href)
                obj.href = href;
            res.push(obj);
        }
        return res;
    }
    var widget = avalon.ui.tab = function (element, data, vmodels) {
            var options = data.tabOptions, tabpanels = [], tabs = [], tabsParent;
            // 遍历tabs属性，设置disabled属性，防止在IE里面出错
            avalon.each(options.tabs, function (i, item) {
                item.disabled = !!item.disabled;
            });
            // 扫描获取tabs
            if (options.tabs == void 0) {
                tabsParent = options.tabContainerGetter(element);
                avalon.scan(tabsParent, vmodels);
                tabs = _getData(tabsParent, 'li', options.target);
                // 销毁dom
                if (options.distroyDom)
                    element.removeChild(tabsParent);
            }
            // 扫描获取panels
            if (options.tabpanels == void 0) {
                panelsParent = options.panelContainerGetter(element);
                tabpanels = _getData(panelsParent, 'div');
                if (options.distroyDom) {
                    try {
                        element.removeChild(panelsParent);
                    } catch (e) {
                    }
                }
            }
            var vmodel = avalon.define(data['tabId'], function (vm) {
                    vm.$skipArray = [
                        /*"disable", "enable", "add", "activate", "remove", "getTemplate", */
                        'widgetElement',
                        'callInit'    /*, "onActivate", "onAjaxCallback"*/,
                        'rootElement'
                    ];
                    vm.tabs = [];
                    vm.tabpanels = [];
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.rootElement = element;
                    var inited, switchTimer;
                    vm.$init = function (continueScan) {
                        var force = continueScan && !avalon.isFunction(continueScan);
                        if (inited || !force && !vm.callInit)
                            return;
                        inited = true;
                        if (!options.tabs)
                            vm.tabs = tabs;
                        if (!vm.tabpanels.length)
                            vm.tabpanels = tabpanels;
                        vm.active = vm.active >= vm.tabs.length && vm.tabs.length - 1 || vm.active < 0 && 0 || parseInt(vm.active) >> 0;
                        avalon(element).addClass('oni-tab oni-widget oni-widget-content' + (vm.event == 'click' ? ' oni-tab-click' : '') + (vm.dir == 'v' ? ' oni-tab-vertical' : '') + (vm.dir != 'v' && vm.uiSize == 'small' ? ' oni-tab-small' : ''));
                        // tab列表
                        var tabFrag = _getTemplate(vm._getTemplate(0, vm), vm), panelFrag = _getTemplate(vm._getTemplate('panel', vm), vm);
                        element.innerHTML = vmodel.bottom ? panelFrag + tabFrag : tabFrag + panelFrag;
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        if (vm.autoSwitch) {
                            vm._autoSwitch();
                        }
                    };
                    vm._clearTimeout = function () {
                        clearTimeout(switchTimer);
                    };
                    // 选中tab
                    vm.activate = function (event, index, fix) {
                        // 猥琐的解决在ie里面报找不到成员的bug
                        // !fix && event.preventDefault()
                        if (vm.tabs[index].disabled === true) {
                            if (vm.event === 'click')
                                event.preventDefault();
                            return;
                        }
                        if (vm.tabs[index].linkOnly) {
                            return;
                        }
                        var el = this;
                        // event是click，点击激活状态tab
                        if (vm.event === 'click' && vm.active === index) {
                            // 去除激活状态
                            if (vm.collapsible) {
                                vm.active = NaN;
                                event.preventDefault()    // 调用点击激活状态tab回调
;
                            } else {
                                if (!options.onClickActive.call(el, event, vmodel))
                                    event.preventDefault();
                            }
                            return;
                        }
                        if (vm.event === 'click')
                            event.preventDefault();
                        if (vm.active !== index) {
                            // avalon.nextTick(function() {
                            vm.active = index;
                            options.onActivate.call(el, event, vmodel)    // })
;
                        }
                    };
                    // 延迟切换效果
                    if (vm.event == 'mouseenter' && vm.activeDelay) {
                        var timer, tmp = vm.activate;
                        vm.activate = function ($event, $index) {
                            clearTimeout(timer);
                            var el = this, arg = arguments;
                            timer = setTimeout(function () {
                                tmp.apply(el, [
                                    $event,
                                    $index,
                                    'fix event bug in ie'
                                ]);
                            }, vm.activeDelay);
                            if (!el.getAttribute('leave-binded') && 0) {
                                el.setAttribute('leave-binded', 1);
                                avalon.bind(el, 'mouseleave', function () {
                                    clearTimeout(timer);
                                });
                            }
                        };
                    }
                    // 自动切换效果
                    vm._autoSwitch = function () {
                        clearTimeout(switchTimer);
                        if (vm.tabs.length < 2)
                            return;
                        switchTimer = setTimeout(function () {
                            var i = vm.active + 1    // 防止死循环
, loop = 0;
                            while (i != vm.active && loop < vm.tabs.length - 1) {
                                if (i >= vm.tabs.length) {
                                    i = 0;
                                }
                                if (!vm.tabs[i].disabled) {
                                    vm.active = i;
                                    vm._autoSwitch();
                                    break;
                                }
                                i++;
                                loop++;
                            }
                        }, vm.autoSwitch);
                    };
                    //清空构成UI的所有节点，一下代码继承自pilotui
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                    };
                    // 修改使用了avalon的几个方法
                    //@interface disable(index) 禁用索引指向的tab，index为数字或者元素为数字的数组
                    vm.disable = function (index, disable) {
                        disable = disable == void 0 ? true : disable;
                        if (!(index instanceof Array)) {
                            index = [index];
                        }
                        var total = vm.tabs.length;
                        avalon.each(index, function (i, idx) {
                            if (idx >= 0 && total > idx) {
                                vm.tabs[idx].disabled = disable;
                            }
                        });
                    };
                    //@interface enable(index) 启用索引指向的tab，index为数字或者元素为数字的数组
                    vm.enable = function (index) {
                        vm.disable(index, false);
                    };
                    //@interface add(config) 新增tab, config = {title: "tab title", removable: bool, disabled: bool, content: "panel content", contentType: "ajax" or "content"}
                    vm.add = function (config) {
                        var title = config.title || 'Tab Tile';
                        var content = config.content || '<div></div>';
                        var exsited = false;
                        vm.tabpanels.forEach(function (panel) {
                            if (panel.contentType == 'include' && panel.content == config.content) {
                                exsited = true;
                            }
                        });
                        if (exsited === true) {
                            return;
                        }
                        vm.tabpanels.push({
                            content: content,
                            contentType: config.contentType
                        });
                        vm.tabs.push({
                            title: title,
                            removable: config.removable,
                            disabled: false
                        });
                        if (config.actived) {
                            avalon.nextTick(function () {
                                vmodel.active = vmodel.tabs.length - 1;
                            });
                        }
                    };
                    //@interface remove(e, index) 删除索引指向的tab，绑定情形下ms-click="remove($event, index)"，js调用则是vm.remove(index)
                    vm.remove = function (e, index) {
                        if (arguments.length == 2) {
                            e.preventDefault();
                            e.stopPropagation();
                        } else {
                            index = e;
                        }
                        if (vmodel.tabs[index].disabled === true || vmodel.tabs[index].removable === false || vmodel.tabs[index].removable == void 0 && !vm.removable) {
                            return;
                        }
                        vmodel.tabs.removeAt(index);
                        vmodel.tabpanels.removeAt(index);
                        index = index > 1 ? index - 1 : 0;
                        avalon.nextTick(function () {
                            vmodel.active = index;
                        });
                        vm.bottom = options.bottom;
                    };
                    vm._canRemove = function (tab) {
                        return (tab.removable == true || tab.removable !== false && vm.removable) && !tab.disabled && vm.dir != 'v';
                    };
                    vm._canActive = function (tab, $index) {
                        return vm.active == $index && !tab.disabled;
                    };
                    vm._isAjax = function (panel) {
                        return vm.contentType == 'content' && !panel.contentType || panel.contentType == 'content';
                    };
                    vm._cutCounter = function () {
                        return (vmodel.dir == 'h' || vmodel.forceCut) && vmodel.titleCutCount;
                    };
                    vm._shallPanelAlwaysShow = function ($index) {
                        return vmodel.shallPanelAlwaysShow || $index === vmodel.active;
                    };
                    vm.sliderIndex = 0;
                    vm.sliderLength = 0;
                    vm.nextEnable = 0;
                    vm.prevEnable = 0;
                    vm.slider = function ($event, dir) {
                        $event.preventDefault();
                        var step;
                        if (dir === 'prev') {
                            step = vm.sliderIndex - 1;
                            step = step > 0 ? step : 0;
                        } else {
                            step = vm.sliderIndex + 1;
                            step = step <= vm.sliderLength - 1 ? step : vm.sliderLength - 1;
                        }
                        vm.sliderIndex = step;
                        vm.buttonEnable();
                    };
                    vm.computeSlider = function () {
                        if (vm.dir === 'v')
                            return;
                        var tabs = document.getElementById('tabs' + vm.tabs.$id);
                        if (tabs) {
                            var w = tabs.scrollWidth, pw = tabs.parentNode.parentNode.clientWidth;
                            if (w > pw) {
                                vm.sliderLength = w / pw;
                            } else {
                                vm.sliderLength = 0;
                            }
                            vm.buttonEnable();
                        }
                    };
                    vm.buttonEnable = function () {
                        if (vm.sliderIndex >= vm.sliderLength - 1) {
                            vm.nextEnable = 0;
                        } else {
                            vm.nextEnable = 1;
                        }
                        if (vm.sliderIndex <= 0) {
                            vm.prevEnable = 0;
                        } else {
                            vm.prevEnable = 1;
                        }
                    };
                    return vm;
                });
            if (vmodel.autoSwitch) {
                /*
            vmodel.tabs.$watch("length", function(value, oldValue) {
                if(value < 2) {
                    vmodel._clearTimeout()
                } else {
                    vmodel._autoSwitch()
                }
            })
            */
                avalon.bind(element, 'mouseenter', function () {
                    vmodel._clearTimeout();
                });
                avalon.bind(element, 'mouseleave', function () {
                    vmodel._clearTimeout();
                    vmodel._autoSwitch();
                });
                vmodel.$watch('autoSwitch', function (value, oldValue) {
                    vmodel._clearTimeout();
                    if (value) {
                        vmodel._autoSwitch();
                    }
                });
            }
            // return vmodel使符合框架体系，可以自动调用
            return vmodel;
        };
    widget.defaults = {
        target: '_blank',
        //@config tab item链接打开的方式，可以使_blank,_self,_parent
        toggle: true,
        //@config 组件是否显示，可以通过设置为false来隐藏组件
        autoSwitch: false,
        //@config 是否自动切换，默认否，如果需要设置自动切换，请传递整数，例如200，即200ms
        active: 0,
        //@config 默认选中的tab，默认第一个tab，可以通过动态设置该参数的值来切换tab，并可通过vmodel.tabs.length来判断active是否越界
        shallPanelAlwaysShow: false,
        //@config shallPanelAlwaysShow() panel不通过display:none,block来切换，而是一直显示，通过其他方式切换到视野，默认为false
        event: 'mouseenter',
        //@config  tab选中事件，默认mouseenter
        removable: false,
        //@config  是否支持删除，默认否，另外可能存在某些tab可以删除，某些不可以删除的情况，如果某些tab不能删除则需要在li元素或者tabs数组里给对应的元素指定removable : false，例如 li data-removable="false" or {title: "xxx", removable: false}
        activeDelay: 0,
        //@config  比较适用于mouseenter事件情形，延迟切换tab，例如200，即200ms
        collapsible: false,
        //@config  当切换面板的事件为click时，如果对处于激活状态的按钮再点击，将会它失去激活并且对应的面板会收起来,再次点击它时，它还原，并且对应面板重新出现
        contentType: 'content',
        //@config  panel是静态元素，还是需要通过异步载入，还可取值为ajax，但是需要给对应的panel指定一个正确的ajax地址
        bottom: false,
        //@config  tab显示在底部
        dir: 'h',
        //@config  tab排列方向，横向或纵向v - vertical，默认横向h - horizontal
        callInit: true,
        //@config  是否调用即初始化
        titleCutCount: 8,
        //@config  tab title截取长度，默认是8
        distroyDom: true,
        //@config  扫描dom获取数据，是否销毁dom
        cutEnd: '...',
        //@config  tab title截取字符后，连接的字符，默认为省略号
        forceCut: false,
        //@config  强制截断，因为竖直方向默认是不截取的，因此添加一个强制截断，使得在纵向排列的时候title也可以被截断
        //tabs:undefined,              //@config  <pre>[/n{/ntitle:"xx",/n linkOnly: false,/n disabled:boolen,/n target: "_self",/n removable:boolen/n}/n]</pre>，单个tabs元素的removable针对该元素的优先级会高于组件的removable设置，linkOnly表示这只是一个链接，不响应active事件，也不阻止默认事件，target对应的是链接打开方式_self默认，可以使_blank,_parent，tab里的target配置优先级高于vm的target配置，应用于某个tab上，可以在元素上 data-target="xxx" 这样配置
        //tabpanels:undefined,         //@config  <pre>[/n{/ncontent:content or url,/n contentType: "content" or "ajax"/n}/n]</pre> 单个panel的contentType配置优先级高于组件的contentType
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        tabContainerGetter: function (element) {
            return element.getElementsByTagName('ul')[0] || element.getElementsByTagName('ol')[0];
        },
        //@config tabContainerGetter(element) tab容器，如果指定，则到该容器内扫描tabs，参数为绑定组件的元素，默认返回element内第一个ul或者ol元素
        panelContainerGetter: function (element) {
            return element.getElementsByTagName('div')[0] || element;
        },
        //@config panelContainerGetter(element)  panel容器，如果指定，则到该容器内扫描panel，参数为绑定组件的元素，默认返回第element内第一个div元素
        onActivate: avalon.noop,
        //@config onActivate(event, vmode) 选中tab后的回调，this指向对应的li元素，参数是事件对象，vm对象 fn(event, vmode)，默认为avalon.noop
        onClickActive: avalon.noop,
        //@config onClickActive(event, vmode)  点击选中的tab，适用于event是"click"的情况，this指向对应的li元素，参数是事件对象，vm对象 fn(event, vmode)，默认为avalon.noop
        onAjaxCallback: avalon.noop,
        //@config onAjaxCallback  panel内容是ajax，ajax响应后的回调函数，this指向对应的panel元素，无参数，默认为空函数
        // 获取模板，防止用户自定义的getTemplate方法没有返回有效的模板
        _getTemplate: function (tplName, vm) {
            var tpl, defineTpl;
            if (tplName == 'panel') {
                tpl = panelTpl;
            } else if (tplName == 'close') {
                tpl = closeTpl;
            } else {
                tpl = template;
            }
            defineTpl = vm.getTemplate(tpl, vm, tplName);
            return defineTpl || defineTpl === '' ? defineTpl : tpl;
        },
        getTemplate: function (template, vm, tplName) {
            return template;
        },
        //@config getTemplate(template, vm, tplName)  修改模板的接口，参数分别是模板字符串，vm对象，模板名字，返回如果是空字符串则对应的tplName(close,panel,tab)返回为空，return false,null,undedined等于返回组件自带的模板，其他情况为返回值，默认返回组件自带的模板
        _tabTitle: function (title, tab, count, end) {
            var cut;
            if (tab.titleCutCount != void 0) {
                cut = tab.titleCutCount;
            } else if (count != void 0) {
                cut = count;
            }
            if (!cut)
                return title;
            var visibleTitle = title.split(/<[^>]+>/g), len = 0, res = 0, indexToIgnore;
            avalon.each(visibleTitle, function (i, item) {
                if (indexToIgnore >= 0) {
                    res = '';
                } else {
                    var s = item.trim();
                    if (len + s.length > cut) {
                        indexToIgnore = i;
                        res = s.substr(0, cut - len) + end;
                    } else {
                        len += s.length;
                        res = 0;
                    }
                }
                if (res === 0)
                    return;
                title = title.replace(item, res);
            });
            return title;
        },
        // 实现截取title逻辑
        // 保留实现配置
        // switchEffect: function() {},     // 切换效果
        // useSkin: false,                  // 载入神马皮肤
        '$author': 'skipper@123'
    };
}
)();
},{"avalon":2}],61:[function(innerRequire,module,exports){
var avalon = innerRequire("../avalon.getModel"),
sourceHTML = "<ul class='oni-suggest' ms-each-item='list' ms-visible='toggle'>\n    <li class='oni-suggest-item' \n        ms-click='clickcallback($index,$event)' \n        ms-class='oni-suggest-item-selected:list[selectedIndex] == item' tabindex='-1' \n        ms-hover='oni-suggest-item-hover'>{{_renderItem(item)|html}}</li>\n</ul>\n";

module.exports = (
function () {
    var widget = avalon.ui.suggest = function (element, data, vmodels) {
            var $element = avalon(element), options = data.suggestOptions, template = options.getTemplate(sourceHTML), suggestHtml = avalon.parseHTML(template).firstChild, dataValue = data.value.split(','), suggestOptions = !dataValue[2] ? 0 : avalon.getModel(dataValue[2], vmodels) || 0, styleReg = /^(\d+).*$/;
            suggestOptions = !!options.notpuresuggest ? suggestOptions[1][suggestOptions[0]] : 0;
            if (suggestOptions) {
                avalon.mix(options, suggestOptions);
            }
            /**
         * 如果options.notpuresuggest为true说明是与textbox组件结合的，
         * 否则与textbox组件无关，options.inputElement就是进行自动补全的输入域节点对应的id 
         */
            options.inputElement = !!options.notpuresuggest ? options.inputElement : document.getElementById(options.inputElement);
            /**
         * 如果options.textboxContainer为空，说明此suggest组件是独立的，
         * 与textbox组件无关，下面将通过输入框的位置、大小来
         * 设置suggest提示框的position和width
        */
            options.textboxContainer = options.textboxContainer == '' ? options.inputElement : options.textboxContainer;
            /*
         * suggest 下拉框
         */
            var limit = options.limit,
                // 最多显示条数配置：最多显示多少条suggest，超出显示滚动条
                suggest,
                // ui-suggest
                suggestCtr = options.suggestCtr || {
                    _minIndex: 0,
                    // 显示口第一条suggest index
                    _maxIndex: limit - 1,
                    // 显示口最后一条suggest index
                    _items: '',
                    // ui-item
                    moveUp: function (index) {
                        if (index < this._minIndex) {
                            // 如果已经跑到显示口第一条了
                            if (this._minIndex == 0) {
                                // 如果已经滚动到了最上面，滚到底部
                                this._minIndex = vmodel.list.length - limit;
                                this._maxIndex = vmodel.list.length - 1;
                                //先更新高度，再滚动
                                this._update();
                                this.scroll.set(this._getHeight(0, this._minIndex - 1));
                            } else {
                                this._minIndex--;
                                this._maxIndex--;
                                this._update();
                                this.scroll.pre();
                            }
                        } else {
                            if (this.scroll.isScolled) {
                                this.scroll.recover();
                            }
                        }
                    },
                    moveDown: function (index) {
                        if (index > this._maxIndex) {
                            // 如果已经跑到显示口最后一条了
                            if (this._maxIndex == vmodel.list.length - 1) {
                                // 如果已经滚动到了最下面，滚到顶部
                                this._minIndex = 0;
                                this._maxIndex = limit - 1;
                                this._update();
                                this.scroll.set(0);
                            } else {
                                // 向下滚动
                                this._minIndex++;
                                this._maxIndex++;
                                this._update();
                                this.scroll.next();
                            }
                        } else {
                            if (this.scroll.isScolled) {
                                this.scroll.recover();
                            }
                        }
                    },
                    reset: function () {
                        this._minIndex = 0;
                        this._maxIndex = limit - 1;
                        suggest.scrollTop = 0;
                        this._items = suggest.getElementsByTagName('li');
                        this._update();
                    },
                    scroll: {
                        isScolled: false,
                        // 记录用户是否滚动过
                        set: function (val) {
                            suggest.scrollTop = val;
                            this.isScolled = false;
                        },
                        pre: function () {
                            if (this.isScolled) {
                                this.recover();
                            } else {
                                suggest.scrollTop -= suggestCtr._items[suggestCtr._minIndex].offsetHeight;
                            }
                        },
                        next: function () {
                            if (this.isScolled) {
                                this.recover();
                            } else {
                                suggest.scrollTop += suggestCtr._items[suggestCtr._minIndex - 1].offsetHeight;
                            }
                        },
                        recover: function () {
                            this.set(suggestCtr._getHeight(0, suggestCtr._minIndex - 1));
                        }
                    },
                    _update: function () {
                        if (vmodel.list.length > limit) {
                            // 如果suggest条数大于配置数，显示滚动条
                            suggest.style.overflowY = 'scroll';
                            suggest.style.height = this._getHeight(this._minIndex, this._maxIndex) + 'px';
                        } else {
                            // 否则，取消滚动条
                            suggest.style.overflowY = 'auto';
                            suggest.style.height = 'auto';
                        }
                    },
                    _getHeight: function (fromIndex, toIndex) {
                        var _height = 0,
                            //suggest列表高度
                            _items = this._items;
                        for (var i = fromIndex; i <= toIndex; i++) {
                            _height += _items[i].offsetHeight;
                        }
                        return _height;
                    }
                };
            var vmodel = avalon.define(data.suggestId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'puresuggest',
                        'limit',
                        'suggestCtr'
                    ];
                    vm.widgetElement = element;
                    vm.list = [];
                    vm.searchText = '';
                    vm.toggle = false;
                    vm.loading = false;
                    vm.selectedIndex = 0;
                    vm.suggestCtr = suggestCtr;
                    vm._renderItem = function (item) {
                        if (!item)
                            return;
                        return vmodel.renderItem(item, vmodel);
                    };
                    // 监控toggle值变化，当toggle为true时更新提示框尺寸
                    vm.$watch('toggle', function (v) {
                        var inputElement = options.inputElement, textboxContainer = options.textboxContainer, $inputElement = avalon(inputElement), $textboxContainer = avalon(textboxContainer);
                        if (v) {
                            if (textboxContainer === inputElement) {
                                var offset = $element.offset(), suggestHtmlWidth = $inputElement.width() + 'px';
                                element.style.cssText = 'position: absolute; left:' + offset.left + 'px;top:' + offset.top + 'px;';
                                suggestHtml.style.cssText = 'margin:0;left:0;top:0;width:' + suggestHtmlWidth;
                                return;
                            }
                            suggestHtml.style.width = $textboxContainer.outerWidth() - 2 - avalon(suggestHtml).css('paddingLeft').replace(styleReg, '$1') - avalon(suggestHtml).css('paddingRight').replace(styleReg, '$1') + 'px';
                        }
                    });
                    // 监控searchText值的变化，及时更新提示列表?
                    vm.$watch('searchText', function (v) {
                        vmodel.updateSource(v, vmodel, limit);
                    });
                    // 处理提示项的鼠标点击，也就是更新input值，同时隐藏提示框?
                    vm.clickcallback = function (idx, event) {
                        var selectValue = vmodel.list[idx].value;
                        vmodel.onChangeCallback(selectValue, vmodel.inputElement, event);
                        if (typeof vmodel.onSelectItem === 'function') {
                            vmodel.onSelectItem.call(null, selectValue, vmodel.inputElement);
                        }
                        vmodel.toggle = false;
                    };
                    // 当点击input框之外的区域时，隐藏提示框?
                    vm.hidepromptinfo = function (event) {
                        if (!vmodel.toggle)
                            return false;
                        /* 此判断是关键，当点击区域是在提示框上说明是在选择提示信息，隐藏提示框的操作放在提示项的click回调上处理，反之则隐藏提示框 */
                        if (findParent(event.target, options.textboxContainer))
                            return;
                        vmodel.toggle = false;
                    };
                    vm.$init = function () {
                        avalon.bind(options.inputElement, 'keydown', function (event) {
                            vmodel.keyDownOperation(vmodel, event, limit);
                        });
                        avalon.bind(document, 'click', vm.hidepromptinfo);
                        avalon.nextTick(function () {
                            element.appendChild(suggestHtml);
                            avalon.scan(element, [vmodel].concat(vmodels));
                            // suggest 下拉框初始化
                            suggestCtr.suggest = suggest = element.getElementsByTagName('ul')[0];
                            // 绑定 scroll 事件
                            avalon.bind(suggest, 'scroll', function () {
                                suggestCtr.scroll.isScolled = true;
                            });
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        });
                    };
                    // 自动销毁
                    vm.$remove = function () {
                        element.innerHTML = '';
                    };
                });
            // 如果input元素配置了suggest-focus项，则执行此条件块?
            if (options.focus) {
                // 特殊的suggest，即当searchText与input值相等时更新提示列表list，不相等时，更新searchText
                avalon.bind(options.inputElement, 'focus', function (event) {
                    var v = this.value;
                    if (vmodel.searchText == v) {
                        vmodel.updateSource(v, vmodel, limit);
                    } else {
                        vmodel.searchText = v;
                    }
                });
            }
            if (options.onChange) {
                var arr = avalon.getModel(options.onChange, vmodels);
                var _onchange = vmodel.onChangeCallback;
                vmodel.onChangeCallback = function () {
                    _onchange.apply(null, arguments);
                    arr[1][arr[0]].apply(arr[1], arguments);
                };
            }
            return vmodel;
        };
    // 判断点击目标元素是否在查找元素内部，在则返回true，否则返回false
    function findParent(element, findElement) {
        if (!element)
            return false;
        if (element == findElement)
            return true;
        return findParent(element.parentNode, findElement);
    }
    function keyDownOperation(vmodel, event, limit) {
        switch (event.which) {
        case 9:
            if (!vmodel.toggle)
                return;
            vmodel.toggle = false;
            break;
        case 27:
            if (!vmodel.toggle)
                return;
            vmodel.toggle = false;
            break;
        case 13:
            event.preventDefault();
            if (!vmodel.toggle)
                return;
            vmodel.toggle = false;
            vmodel.onChangeCallback(vmodel.list[vmodel.selectedIndex].value, vmodel.inputElement, event);
            break;
        case 38:
            // arrow up
            if (!vmodel.toggle)
                return;
            --vmodel.selectedIndex;
            // 下拉框
            if (limit) {
                vmodel.suggestCtr.moveUp(vmodel.selectedIndex);
            }
            if (vmodel.selectedIndex === -1) {
                vmodel.selectedIndex = vmodel.list.length - 1;
            }
            vmodel.onChangeCallback(vmodel.list[vmodel.selectedIndex].value, vmodel.inputElement, event);
            // prevent default behavior to move cursor at the the begenning
            event.preventDefault();
            break;
        case 40:
            // arrow down
            if (!vmodel.toggle)
                return;
            ++vmodel.selectedIndex;
            // 下拉框
            if (limit) {
                vmodel.suggestCtr.moveDown(vmodel.selectedIndex);
            }
            if (vmodel.selectedIndex === vmodel.list.length) {
                vmodel.selectedIndex = 0;
            }
            vmodel.onChangeCallback(vmodel.list[vmodel.selectedIndex].value, vmodel.inputElement, event);
            // prevent default behavior to move cursor at the the end
            event.preventDefault();
            break;
        default:
            var keyupFn = avalon.bind(vmodel.inputElement, 'keyup', function () {
                    vmodel.searchText = this.value || String.fromCharCode(event.which);
                    avalon.unbind(vmodel.inputElement, 'keyup', keyupFn);
                });
            break;
        }
    }
    function updateSource(value, vmodel, limit) {
        if (vmodel.loading == true)
            return;
        var s = avalon.ui['suggest'].strategies[vmodel.strategy];
        if (!s)
            return;
        vmodel.loading = true;
        // 根据提示类型提供的方法过滤的数据来渲染提示视图?
        s(value, function (array) {
            vmodel.selectedIndex = 0;
            vmodel.list.removeAll();
            avalon.each(array, function (idx, val) {
                if (typeof val == 'string') {
                    vmodel.list.push({
                        text: val,
                        value: val
                    });
                } else {
                    vmodel.list.push(val);
                }
            });
            vmodel.loading = false;
            if (array.length == 0) {
                vmodel.toggle = false;
            } else {
                vmodel.toggle = true;
            }
            //重置suggest列表
            if (limit) {
                vmodel.suggestCtr.reset();
            }
        });
    }
    ;
    widget.defaults = {
        inputElement: '',
        strategy: '__getVal',
        textboxContainer: '',
        focus: false,
        changed: false,
        onSelectItem: '',
        emphasize: true,
        getTemplate: function (tmp) {
            return tmp;
        },
        keyDownOperation: keyDownOperation,
        // 当通过键盘上下箭头或者使用鼠标点击来切换提示项时触发
        onChangeCallback: function (val, input) {
            input.value = val;
        },
        updateSource: updateSource,
        renderItem: function (item, vmodel) {
            if (!vmodel.emphasize) {
                return item.text;
            }
            item = item.text;
            var query = escapeRegExp(vmodel.searchText);
            return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                // ie6 下奇怪的字符
                if (match.charCodeAt(0) < 32) {
                    match = '' + match.slice(1);
                }
                return '<b style=\'color:#f55\'>' + match + '</b>';
            });
        }
    };
    function escapeRegExp(str) {
        return str.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
    }
    // 根据提示类型的不同提供提示信息，也就是信息的过滤方式完全由用户自己决定?
    avalon.ui['suggest'].strategies = {
        __getVal: function (value, done) {
            done(value ? [
                value + '1',
                value + '2',
                value + '3',
                value + '4',
                value + '5',
                value + '6',
                value + '7',
                value + '8',
                value + '9'
            ] : []);
        }
    };
    return avalon;
}
)();
},{"../avalon.getModel":6}],62:[function(innerRequire,module,exports){
var avalon = innerRequire("./avalon.suggest"),
sourceHTML = "<div class=\"oni-textbox\" \n     ms-class=\"MS_OPTION_DISABLEDCLASS:elementDisabled\"\n     ms-hover=\"oni-textbox-hover\" \n     ms-class-1=\"oni-textbox-focus: focusClass\" \n     ms-class-2=\"{{stateClass}}\"\n     ms-visible=\"textboxToggle\">\n    <div class=\"oni-textbox-input-wrap\">\n        <span class=\"oni-textbox-placeholder\"\n              ms-if=\"!placeholderOrigin\"  \n              ms-visible=\"toggle\"\n              ms-click = \"hidePlaceholder\"\n              ms-css-width=\"placeWidth\"\n        >{{placehold}}</span>\n    </div>\n    MS_OPTION_ICON\n</div>\nMS_OPTION_SUGGEST\n<div class=\"oni-textbox-suggest\" \n     ms-widget = \"suggest,$,$suggestopts\" data-suggest-notpuresuggest=true>\n</div>";

module.exports = (
function () {
    var htmlStructArray = sourceHTML.split('MS_OPTION_SUGGEST'), suggestHTML = htmlStructArray[1], placeholderOrigin = 'placeholder' in document.createElement('input');
    var widget = avalon.ui.textbox = function (element, data, vmodels) {
            var elemParent = element.parentNode, $element = avalon(element), options = data.textboxOptions, vmSub = '', sourceList = '', inputWraper = '', placeholder = '', placehold = options.placeholder;
            // 解析html并获取需要的Dom对象引用
            sourceHTML = sourceHTML.replace(/MS_OPTION_DISABLEDCLASS/gm, options.disabledClass);
            sourceHTML = options.getTemplate(sourceHTML);
            sourceList = avalon.parseHTML(sourceHTML).firstChild;
            inputWraper = sourceList.getElementsByTagName('div')[0];
            placeholder = sourceList.getElementsByTagName('span')[0];
            if (options.suggest) {
                var suggestConfig = {
                        inputElement: element,
                        strategy: options.suggest,
                        textboxContainer: sourceList,
                        focus: options.suggestFocus || false,
                        onChange: options.suggestOnChange || '',
                        type: 'textbox',
                        limit: options.limit || 8
                    };
                $suggestopts = avalon.mix(suggestConfig, options.suggestion);
                options.$suggestopts = $suggestopts;
            }
            placehold = avalon(element).attr('placeholder') || placehold || '';
            var vmodel = avalon.define(data.textboxId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'disabledClass',
                        'autoTrim',
                        'suggest'
                    ];
                    vm.widgetElement = element;
                    vm.elementDisabled = '';
                    vm.toggle = true;
                    vm.placehold = placehold;
                    vm.focusClass = false;
                    vm.placeholderOrigin = placeholderOrigin;
                    vm.placeWidth = 0;
                    // input获得焦点时且输入域值为空时隐藏占位符
                    vm.hidePlaceholder = function () {
                        vm.toggle = false;
                        element.focus();
                    };
                    vm.blur = function () {
                        // 切换input外层包装的div元素class(ui-textbox-disabled)的显示或隐藏
                        vmodel.focusClass = false;
                        vmodel.elementDisabled = element.disabled;
                        // 切换占位符的显示、隐藏
                        if (options.autoTrim) {
                            element.value = element.value.trim();
                        }
                        if (!vmodel.placeholderOrigin) {
                            if (element.value != '' || !vmodel.placehold.length) {
                                vmodel.toggle = false;
                            } else {
                                vmodel.toggle = true;
                            }
                        }
                    };
                    vm.$remove = function () {
                        var sourceListParent = sourceList.parentNode;
                        sourceListParent.removeChild(sourceList);
                        sourceList.innerHTML = sourceList.textContent = '';
                    };
                    vm.$init = function (continueScan) {
                        avalon.bind(element, 'blur', vm.blur);
                        if (options.autoFocus) {
                            avalon.bind(element, 'mouseover', function () {
                                element.focus();
                            });
                        }
                        /**
                 * 如果存在suggest配置，说明需要自动补全功能，
                 * 此处将suggest需要的配置信息保存方便后续传给suggest widget，
                 * suggest的配置信息通过html结构的
                 * ms-widget="suggest,suggestId,$suggestopts"中的
                 * $suggestopts自动获取
                 **/
                        $element.addClass('oni-textbox-input');
                        // 包装原始输入域
                        var tempDiv = document.createElement('div');
                        elemParent.insertBefore(tempDiv, element);
                        element.msRetain = true;
                        inputWraper.appendChild(element);
                        if (~options.width) {
                            $element.width(options.width);
                        }
                        if (~options.height) {
                            $element.height(options.height);
                        }
                        if (~options.tabIndex) {
                            element.tabIndex = options.tabIndex;
                        }
                        elemParent.replaceChild(sourceList, tempDiv);
                        element.msRetain = false;
                        // 如果存在自动补全配置项的话，添加自动补全widget
                        if (options.suggest) {
                            var suggest = avalon.parseHTML(suggestHTML).firstChild;
                            sourceList.appendChild(suggest);
                        }
                        avalon.bind(element, 'focus', function () {
                            vmodel.focusClass = true;
                            if (!vmodel.placeholderOrigin) {
                                vmodel.toggle = false;
                            }
                        });
                        avalon.scan(sourceList, [vmodel].concat(vmodels));
                        if (!vmodel.placeholderOrigin) {
                            if (!vmodel.placehold.length || element.value != '') {
                                vmodel.toggle = false;
                            }
                            vmodel.placeWidth = avalon(inputWraper).innerWidth();
                        } else if (vmodel.placehold.length) {
                            $element.attr('placeholder', vmodel.placehold);
                        }
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                        // 如果输入域有值，则隐藏占位符，否则显示，默认显示
                        vm.elementDisabled = element.disabled;
                    };
                });
            var msDuplexValue, msData;
            for (var i in element.msData) {
                if (i.indexOf('ms-duplex') === 0) {
                    msDuplexValue = element.msData[i];
                    break;
                }
            }
            if (msDuplexValue) {
                vmSub = avalon.getModel(msDuplexValue, vmodels);
                if (vmSub) {
                    // 根据对元素双向绑定的数据的监听来判断是显示还是隐藏占位符，并且判定元素的禁用与否
                    vmSub[1].$watch(vmSub[0], function () {
                        vmodel.elementDisabled = element.disabled;
                        if (!vmodel.placeholderOrigin) {
                            if (element.value != '' || !vmodel.placehold.length) {
                                vmodel.toggle = false;
                            } else {
                                vmodel.toggle = true;
                            }
                        }
                    });
                }
            }
            msData = element.msData['ms-disabled'] || element.msData['ms-attr-disabled'] || element.msData['ms-enabled'] || element.msData['ms-attr-enabled'];
            if (msData) {
                vmSub = avalon.getModel(msData, vmodels);
                if (vmSub) {
                    vmSub[1].$watch(vmSub[0], function () {
                        vmodel.elementDisabled = element.disabled;
                        if (!vmodel.placeholderOrigin) {
                            if (element.value != '' || !vmodel.placehold.length) {
                                vmodel.toggle = false;
                            } else {
                                vmodel.toggle = true;
                            }
                        }
                    });
                }
            }
            return vmodel;
        };
    widget.defaults = {
        /**
         * @config 配置输入框有自动提示补全功能，提示类型由用户自定义，默认配置为false，也就是不开启自动补全功能
         */
        suggest: false,
        suggestion: {},
        autoTrim: true,
        //@config 是否自动过滤用户输入的内容头部和尾部的空格
        widgetElement: '',
        //@interface 绑定组件元素的dom对象的引用
        tabIndex: -1,
        //@config 配置textbox在进行tab切换时的tabIndex，切换顺序从值小的开始，必须配置为大于0的值
        width: -1,
        //@config 配置textbox的显示宽
        autoFocus: false,
        //@config 如果想要鼠标悬停在textbox上时就focus textbox，设置此属性为true即可
        disabledClass: 'oni-textbox-disabled',
        //@config 配置输入域disabled时组件包装元素设置的类，多个类以空格分隔
        /**
         * @config 模板函数,方便用户自定义模板
         * @param str {String} 默认模板
         * @param opts {Object} vmodel
         * @returns {String} 新模板
         */
        getTemplate: function (tmp) {
            return tmp.replace(/MS_OPTION_ICON/, '');
        },
        stateClass: '',
        //@config 为textbox添加样式，默认可以添加oni-textbox-error
        suggestOnChange: '',
        //@config 配置提示补全时切换提示项之后的callback
        suggestFocus: false    //@config 特殊的suggest，当focus时即显示特定的提示列表
    };
    return avalon;
}
)();
},{"./avalon.suggest":61}],63:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-textbox\" ms-click=\"_toggleDialog\">\n    <div class=\"oni-textbox-input-wrap\">\n        <span ms-css-width=\"width\" ms-css-color=\"_timeTextColor\">{{getTimeText(timeDate, placeHolder)}}</span>\n    </div>\n</div>\nMS_OPTION_TEXTBOX\n<div>\n    <div class=\"oni-timer\" ms-css-height=\"_timerHeight\">\n        <div class=\"oni-timer-date\">\n            <ul>\n                <li ms-repeat-item=\"dates\" ms-class=\"oni-state-active:$index == _currentDateIndex\" ms-css-color=\"item.color\">{{item.date}}</li>\n            </ul>\n        </div>\n        <div class=\"oni-timer-hour\" ms-css-left=\"_hourLeft\">\n            <ul>\n                <li ms-repeat-item=\"hours\" ms-class=\"oni-state-active:$index == _currentHourIndex\" ms-css-color=\"item.color\">{{item.hour}}</li>\n            </ul>\n        </div>\n        <div class=\"oni-timer-minute\" ms-css-left=\"_minuteLeft\">\n            <ul>\n                <li ms-repeat-item=\"minutes\" ms-class=\"oni-state-active:$index == _currentMinuteIndex\" ms-css-color=\"item.color\">{{item.minute}}</li>\n            </ul>\n        </div>\n        <p class=\"oni-timer-mask\" \n           ms-css-top=\"Math.floor(showItems/2) * 30\"\n           ms-css-width=\"_timerWidth\"></p>\n    </div>  \n</div>\n";
innerRequire("../dialog/avalon.dialog");

module.exports = (
function () {
    var currentScroll = null, touch = typeof window.ontouchstart !== 'undefined', drag = {
            eStart: touch ? 'touchstart' : 'mousedown',
            eMove: touch ? 'touchmove' : 'mousemove',
            eEnd: touch ? 'touchend' : 'mouseup'
        }, templateArr = template.split('MS_OPTION_TEXTBOX'), textbox = templateArr[0];
    template = templateArr[1];
    var widget = avalon.ui.timer = function (element, data, vmodels) {
            var options = data.timerOptions, scrollElements = {}, initIndex = 0, timerWrapper, textboxWrapper = null;
            //方便用户对原始模板进行修改,提高制定性
            options.template = options.getTemplate(template, options);
            avalon.mix(options, initDatas(options));
            initIndex = Math.floor(options.showItems / 2);
            var vmodel = avalon.define(data.timerId, function (vm) {
                    avalon.mix(vm, options);
                    vm.widgetElement = element;
                    vm.$skipArray = [
                        'widgetElement',
                        'eventType',
                        '_initIndex',
                        'dialog',
                        '_dialog',
                        'textbox'
                    ];
                    vm._initIndex = initIndex;
                    vm._timerHeight = 0;
                    vm._timerWidth = 0;
                    vm._hourLeft = 0;
                    vm._minuteLeft = 0;
                    vm._currentDateIndex = initIndex;
                    vm._currentHourIndex = initIndex;
                    vm._currentMinuteIndex = initIndex;
                    vm._dialog = null;
                    vm._timeTextColor = '#999999';
                    vm.timeDate = null;
                    vm._toggleDialog = function () {
                        var dialog = vmodel._dialog;
                        if (dialog && !dialog.toggle) {
                            dialog.toggle = true;
                        }
                    };
                    vm.dialog.onInit = function (dialog) {
                        vmodel._dialog = dialog;
                        dialog.$watch('toggle', function (val) {
                            if (val) {
                                var dateElementWidth = 0, hourElementWidth = 0, scrollEles = getScrollElements(timerWrapper), dateElement = scrollEles[0], hourElement = scrollEles[1], minuteElement = scrollEles[2];
                                dateElement._name = 'date';
                                hourElement._name = 'hour';
                                minuteElement._name = 'minute';
                                handleEvent(dateElement, scrollElements, vmodel, '_initPosition');
                                handleEvent(hourElement, scrollElements, vmodel, '_initPosition');
                                handleEvent(minuteElement, scrollElements, vmodel, '_initPosition');
                                dateElementWidth = avalon(dateElement).outerWidth();
                                vmodel._hourLeft = dateElementWidth;
                                hourElementWidth = vmodel._minuteLeft = dateElementWidth + avalon(hourElement).outerWidth();
                                vmodel._timerWidth = hourElementWidth + avalon(minuteElement).outerWidth();
                            }
                        });
                    };
                    vm.dialog.onConfirm = function () {
                        var currentDate = vmodel.getTime();
                        vmodel.timeDate = currentDate;
                        vmodel._timeTextColor = '#333';
                    };
                    vm._eventCallback = function (eventType, event) {
                        var element = this;
                        switch (eventType) {
                        case 'mousewheel':
                            handleEvent(element, scrollElements, vmodel, '_wheel', event);
                            break;
                        case 'start':
                            handleEvent(element, scrollElements, vmodel, '_' + eventType, event);
                            break;
                        }
                    };
                    vm.getTime = function () {
                        var date = vmodel.dates[vmodel._currentDateIndex], hour = vmodel.hours[vmodel._currentHourIndex]._hour, minute = vmodel.minutes[vmodel._currentMinuteIndex]._minute;
                        return new Date(date.year, date.month, date.day, hour, minute);
                    };
                    //这些属性不被监控
                    vm.$init = function () {
                        var scrollEles = [], temporary = document.createElement('span');
                        element.style.display = 'none';
                        timerWrapper = avalon.parseHTML(template).firstChild;
                        element.parentNode.insertBefore(temporary, element);
                        textboxWrapper = avalon.parseHTML(textbox).firstChild;
                        temporary.parentNode.replaceChild(textboxWrapper, temporary);
                        avalon.scan(textboxWrapper, vmodel);
                        document.body.appendChild(timerWrapper);
                        vmodel._timerHeight = 30 * options.showItems;
                        timerWrapper.setAttribute('ms-widget', 'dialog');
                        scrollEles = getScrollElements(timerWrapper);
                        bindEvents(options.eventType, scrollEles);
                        avalon.scan(timerWrapper, [vmodel].concat(vmodels));
                        if (typeof options.onInit === 'function') {
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    vm.$remove = function () {
                        timerWrapper.innerHTML = timerWrapper.textContent = '';
                        timerWrapper.parentNode.removeChild(timerWrapper);
                        textboxWrapper.innerHTML = textboxWrapper.textContent = '';
                        textboxWrapper.parentNode.removeChild(textboxWrapper);
                    };
                });
            return vmodel;
        };
    widget.defaults = {
        showItems: 9,
        width: 180,
        // 时间显示框的宽度
        placeHolder: '\u8BF7\u9009\u62E9\u65F6\u95F4',
        getTimeText: function (timeDate, placeHolder) {
            var timeText = placeHolder;
            if (timeDate) {
                timeText = timeDate.toLocaleString();
            }
            return timeText;
        },
        showYears: false,
        eventType: 'touch',
        mouseWheelSpeed: 20,
        useTransform: true,
        getDates: avalon.noop,
        getHours: avalon.noop,
        getMinutes: avalon.noop,
        dialog: {
            title: '\u9009\u62E9\u65F6\u95F4',
            width: 300,
            showClose: false
        },
        getTemplate: function (str, options) {
            return str;
        }
    };
    avalon.bind(document, drag.eMove, function (event) {
        var timerId = '', timer = null;
        if (currentScroll) {
            timerId = currentScroll.timerId;
            timer = avalon.vmodels[timerId];
            if (timer && timer.eventType != 'mousewheel') {
                currentScroll._move(currentScroll.element, event, timer);
            }
        }
    });
    avalon.bind(document, drag.eEnd, function (event) {
        var timerId = '', timer = null;
        if (currentScroll) {
            timerId = currentScroll.timerId;
            timer = avalon.vmodels[timerId];
            if (timer && timer.eventType != 'mousewheel') {
                currentScroll._end(currentScroll.element, event, timer);
            }
        }
    });
    function getScrollElements(timerWrapper) {
        var divs = timerWrapper.getElementsByTagName('div'), div = null, dateElement = null, hourElement = null, minuteElement = null, className = '';
        for (var i = 0, len = divs.length; i < len; i++) {
            div = divs[i];
            className = div.className;
            if (className.indexOf('oni-timer-date') != -1) {
                dateElement = div;
            } else if (className.indexOf('oni-timer-hour') != -1) {
                hourElement = div;
            } else if (className.indexOf('oni-timer-minute') != -1) {
                minuteElement = div;
            }
        }
        return [
            dateElement,
            hourElement,
            minuteElement
        ];
    }
    function formatNum(n, length) {
        n = String(n);
        for (var i = 0, len = length - n.length; i < len; i++) {
            n = '0' + n;
        }
        return n;
    }
    function initDatas(options) {
        var now = new Date(), oldDate = now, dates = [], date = '', year = 0, month = 0, day = 0, hours = [], hour = '', minutes = [], minute = '', i, week = [
                '\u661F\u671F\u65E5',
                '\u661F\u671F\u4E00',
                '\u661F\u671F\u4E8C',
                '\u661F\u671F\u4E09',
                '\u661F\u671F\u56DB',
                '\u661F\u671F\u4E94',
                '\u661F\u671F\u516D'
            ];
        if (!(hours = options.getHours())) {
            hours = [];
            for (i = 0; i < 24; i++) {
                hour = formatNum(i, 2);
                hours.push({
                    hour: hour,
                    _hour: i,
                    color: 'rgba(51, 51, 51, 1)'
                });
            }
        }
        if (!(minutes = options.getMinutes())) {
            minutes = [];
            for (i = 0; i < 60; i += 5) {
                minute = formatNum(i, 2);
                minutes.push({
                    minute: minute,
                    _minute: i,
                    color: 'rgba(51, 51, 51, 1)'
                });
            }
        }
        if (!(dates = options.getDates())) {
            dates = [];
            for (i = 1; i < 60; i++) {
                year = now.getFullYear();
                month = now.getMonth();
                day = now.getDate();
                date = (options.showYears ? year + '\u5E74' : '') + formatNum(month + 1, 2) + '\u6708' + formatNum(day, 2) + '\u65E5' + week[now.getDay()];
                now = new Date(oldDate.setDate(oldDate.getDate() + i));
                oldDate = new Date();
                dates.push({
                    date: date,
                    year: year,
                    month: month,
                    day: day,
                    color: 'rgba(51, 51, 51, 1)'
                });
            }
        }
        return {
            dates: dates,
            minutes: minutes,
            hours: hours
        };
    }
    function bindEvents(type, elements) {
        var eventName = '', eventValue = '';
        elements.forEach(function (element, index) {
            if (type === 'mousewheel') {
                eventName = 'ms-on-mousewheel';
                eventValue = '_eventCallback(' + '"' + type + '", $event)';
            } else {
                eventName = 'ms-on-' + drag.eStart;
                eventValue = '_eventCallback(' + '"start", $event)';
            }
            element.setAttribute(eventName, eventValue);
        });
    }
    function renderTimer(vmodel, index, dataName, indexName) {
        var initIndex = vmodel._initIndex, currentIndex = -index + initIndex, items, prevIndex = 0, nextIndex = 0, color = 0, itemsLen = 0;
        vmodel[indexName] = currentIndex;
        items = vmodel[dataName];
        itemsLen = items.length;
        if (currentIndex < 0 || currentIndex >= itemsLen) {
            return;
        }
        items[currentIndex].color = 'rgb(51, 51, 51)';
        for (var i = initIndex; i > 0; i--) {
            prevIndex = currentIndex - i;
            nextIndex = currentIndex + i;
            color = 0.2 * (4 - i + 1);
            if (color >= 1) {
                color = 0.9;
            } else if (color <= 0) {
                color = 0.1;
            }
            if (prevIndex > -1 && prevIndex < itemsLen) {
                items[prevIndex].color = 'rgba(51, 51, 51, ' + color + ')';
            }
            if (nextIndex > -1 && nextIndex < itemsLen) {
                items[nextIndex].color = 'rgba(51, 51, 51, ' + color + ')';
            }
        }
    }
    function handleEvent(element, scrollArr, vmodel, eventName, event) {
        var name = element._name;
        if (!scrollArr[name]) {
            scrollArr[name] = new Utils(vmodel.$model);
            scrollArr[name][eventName](element, event, vmodel);
            return;
        }
        scrollArr[name][eventName](element, event, vmodel);
    }
    var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
            window.setTimeout(callback, 1000 / 60);
        };
    var Utils = function () {
            var util = {}, _elementStyle = document.createElement('div').style, _vendor = function () {
                    var vendors = [
                            't',
                            'webkitT',
                            'MozT',
                            'msT',
                            'OT'
                        ], transform, i = 0, l = vendors.length;
                    for (; i < l; i++) {
                        transform = vendors[i] + 'ransform';
                        if (transform in _elementStyle)
                            return vendors[i].substr(0, vendors[i].length - 1);
                    }
                    return false;
                }();
            function _prefixStyle(style) {
                if (_vendor === false)
                    return false;
                if (_vendor === '')
                    return style;
                return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
            }
            util.ease = {
                quadratic: {
                    style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                    fn: function (k) {
                        return k * (2 - k);
                    }
                },
                circular: {
                    style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',
                    // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
                    fn: function (k) {
                        return Math.sqrt(1 - --k * k);
                    }
                },
                back: {
                    style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                    fn: function (k) {
                        var b = 4;
                        return (k = k - 1) * k * ((b + 1) * k + b) + 1;
                    }
                },
                bounce: {
                    style: '',
                    fn: function (k) {
                        if ((k /= 1) < 1 / 2.75) {
                            return 7.5625 * k * k;
                        } else if (k < 2 / 2.75) {
                            return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
                        } else if (k < 2.5 / 2.75) {
                            return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
                        } else {
                            return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
                        }
                    }
                },
                elastic: {
                    style: '',
                    fn: function (k) {
                        var f = 0.22, e = 0.4;
                        if (k === 0) {
                            return 0;
                        }
                        if (k == 1) {
                            return 1;
                        }
                        return e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;
                    }
                }
            };
            util.hasTransition = _prefixStyle('transition') in _elementStyle;
            util.hasTransform = _prefixStyle('transform') !== false;
            util.hasTouch = 'ontouchstart' in window;
            util.getTime = Date.now || function getTime() {
                return new Date().getTime();
            };
            util.style = {
                transform: _prefixStyle('transform'),
                transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
                transitionDuration: _prefixStyle('transitionDuration')
            };
            util.momentum = function (current, start, time, lowerMargin, higherMargin, wrapperSize, deceleration) {
                var distance = current - start, speed = Math.abs(distance) / time, destination, duration;
                deceleration = deceleration === undefined ? 0.0006 : deceleration;
                destination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);
                duration = speed / deceleration;
                if (destination < lowerMargin) {
                    destination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;
                    distance = Math.abs(destination - current);
                    duration = distance / speed;
                } else if (destination > higherMargin) {
                    destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : higherMargin;
                    distance = Math.abs(current) + destination;
                    duration = distance / speed;
                }
                return {
                    destination: Math.round(destination),
                    duration: duration
                };
            };
            function Scroll(options) {
                this.y = 0;
                this.initWheel = null;
                this.useTransition = options.useTransition && util.hasTransition;
                this.useTransform = options.useTransform && util.hasTransform;
                this.maxScrollY = 0;
                this.minScrollY = 0;
                this.options = options;
                this.endTime = 0;
                this.bounce = true;
                this.bounceTime = 600;
                this.bounceEasing = '';
                this.element = null;
                this.momentum = options.momentum || true;
                this.momentHeight = 100;
            }
            Scroll.prototype._initPosition = function (element, event, vmodel) {
                var options = vmodel.$model, initY = Math.floor(options.showItems / 2) * 30, now = new Date(), curHour = now.getHours(), curMinute = now.getMinutes(), dates = vmodel.dates, hours = vmodel.hours, minutes = vmodel.minutes;
                switch (element._name) {
                case 'hour':
                    for (var i = 0, len = hours.length; i < len; i++) {
                        var hour = +hours[i]._hour;
                        if (hour === curHour) {
                            initY = initY - i * 30;
                            break;
                        }
                    }
                    break;
                case 'minute':
                    for (var i = 0, len = minutes.length; i < len; i++) {
                        var minute = +minutes[i]._minute, nextMinute = +(minutes[i + 1] && minutes[i + 1]._minute || 59), interval = Number((nextMinute - minute) / 2);
                        if (curMinute >= minute && curMinute <= nextMinute) {
                            if (curMinute + interval > nextMinute) {
                                if (i == len - 1) {
                                    initY = initY - i * 30;
                                } else {
                                    initY = initY - (i + 1) * 30;
                                }
                            } else {
                                initY = initY - i * 30;
                            }
                            break;
                        }
                    }
                    break;
                }
                this._scrollTo(null, element, vmodel, 0, initY);
            };
            Scroll.prototype._initMaxScroll = function (element, options) {
                var $element = avalon(element), halfTimerHeight = Math.floor(options.showItems / 2) * 30;
                if (!this.maxScrollY) {
                    this.maxScrollY = halfTimerHeight + 30 - $element.height();
                    this.minScrollY = halfTimerHeight;
                    this.maxMomentHeight = this.maxScrollY - this.momentHeight;
                    this.minMomentHeight = this.minScrollY + this.momentHeight;
                }
            };
            Scroll.prototype._wheel = function (element, event, vmodel) {
                event.preventDefault();
                event.stopPropagation();
                var that = element, wheelDeltaY, newY, maxScrollY = 0, minScrollY = 0, options = this.options, dir = (event.wheelDelta || -event.detail) > 0 ? 1 : -1, mouseWheelSpeed = options.mouseWheelSpeed;
                this._initMaxScroll(element, options);
                maxScrollY = this.maxScrollY;
                minScrollY = this.minScrollY;
                wheelDeltaY = dir * mouseWheelSpeed;
                newY = this.y + wheelDeltaY;
                if (newY > minScrollY) {
                    newY = minScrollY;
                } else if (newY < maxScrollY) {
                    newY = maxScrollY;
                }
                this._scrollTo(event, element, vmodel, 0, newY, 0);
            };
            Scroll.prototype._resetPosition = function (event, element, vmodel, time) {
                var y = this.y, maxScrollY = this.maxScrollY, minScrollY = this.minScrollY;
                time = time || 0;
                if (y > minScrollY) {
                    y = minScrollY;
                } else if (y < maxScrollY) {
                    y = maxScrollY;
                }
                if (y == this.y) {
                    return false;
                }
                this._scrollTo(event, element, vmodel, 0, y, time, this.bounceEasing);
                return true;
            };
            Scroll.prototype._scrollTo = function (event, element, vmodel, x, y, time, easing) {
                easing = easing || util.ease.circular;
                if (!time || this.useTransition && easing.style) {
                    // this._transitionTimingFunction(easing.style)
                    // this._transitionTime(time)
                    this._translate(element, vmodel, x, y, event);
                } else {
                    this._animate(element, vmodel, x, y, time, easing.fn, event);
                }
            };
            Scroll.prototype._translate = function (element, vmodel, x, y, event) {
                var index = Math.round(y / 30), dataName = '', indexName = '', type = event && event.type || '';
                if (type === 'mousewheel' || type === drag.eEnd) {
                    y = index * 30;
                }
                switch (element._name) {
                case 'date':
                    dataName = 'dates';
                    indexName = '_currentDateIndex';
                    break;
                case 'hour':
                    dataName = 'hours';
                    indexName = '_currentHourIndex';
                    break;
                case 'minute':
                    dataName = 'minutes';
                    indexName = '_currentMinuteIndex';
                    break;
                }
                renderTimer(vmodel, index, dataName, indexName);
                if (this.useTransform) {
                    element.style[util.style.transform] = 'translateY(' + y + 'px)';
                } else {
                    y = Math.round(y);
                    element.top = y + 'px';
                }
                this.y = y;
            };
            Scroll.prototype._animate = function (element, vmodel, destX, destY, duration, easingFn, event) {
                var that = this, startY = this.y, startTime = util.getTime(), destTime = startTime + duration;
                function step() {
                    var now = util.getTime(), newX, newY, easing;
                    if (now >= destTime) {
                        that.isAnimating = false;
                        that._translate(element, vmodel, destX, destY, event);
                        that._resetPosition(event, element, vmodel, that.bounceTime);
                        // scrollEnd回调
                        return;
                    }
                    now = (now - startTime) / duration;
                    easing = easingFn(now);
                    newY = (destY - startY) * easing + startY;
                    that._translate(element, vmodel, newX, newY, event);
                    if (that.isAnimating) {
                        rAF(step);
                    }
                }
                this.isAnimating = true;
                step();
            };
            Scroll.prototype._start = function (element, event, vmodel) {
                var point = event.touches ? event.touches[0] : event, options = this.options, pos;
                currentScroll = this;
                this.timerId = vmodel.$id;
                this.element = element;
                this.distY = 0;
                this.initiated = true;
                this._initMaxScroll(element, options);
                this.startTime = util.getTime();
                this.startY = this.y;
                this.pointY = point.pageY;
            };
            Scroll.prototype._move = function (element, event, vmodel) {
                // 如果start未触发，或者this.element未定义或者currentScroll为null都说明不是拖动状态
                if (!this.initiated || !this.element || !currentScroll)
                    return;
                var point = event.touches ? event.touches[0] : event, deltaY = point.pageY - this.pointY, timestamp = util.getTime(), newY, absDistY, minScrollY, maxScrollY;
                this.pointY = point.pageY;
                this.distY += deltaY;
                absDistY = Math.abs(this.distY);
                // We need to move at least 10 pixels for the scrolling to initiate
                if (timestamp - this.endTime > 300 && absDistY < 10)
                    return;
                newY = this.y + deltaY;
                if (this.momentum) {
                    minScrollY = this.minMomentHeight;
                    maxScrollY = this.maxMomentHeight;
                }
                if (newY > minScrollY || newY < maxScrollY) {
                    newY = this.bounce ? this.y + deltaY / 3 : newY > minScrollY ? minScrollY : maxScrollY;
                }
                this._translate(element, vmodel, 0, newY, event);
                if (timestamp - this.startTime > 300) {
                    this.startTime = timestamp;
                    this.startY = this.y;
                }
            };
            Scroll.prototype._end = function (element, event, vmodel) {
                var point = event.changedTouches ? event.changedTouches[0] : event, momentumY, duration = util.getTime() - this.startTime, newY = Math.round(this.y), distanceY = Math.abs(newY - this.startY), time = 0, easing = '', minScrollY = this.minScrollY, maxScrollY = this.maxScrollY;
                currentScroll = null;
                this.initiated = false;
                this.endTime = util.getTime();
                if (this._resetPosition(event, element, vmodel, this.bounceTime))
                    return;
                this._scrollTo(event, element, vmodel, 0, newY);
                // ensures that the last position is rounded
                //start momentum animation if needed
                if (this.momentum && duration < 300) {
                    //current, start, time, lowerMargin, wrapperSize, deceleration
                    momentumY = util.momentum(this.y, this.startY, duration, maxScrollY, minScrollY, this.bounce ? this.options._timerHeight : 0, this.deceleration);
                    newY = momentumY.destination;
                }
                if (newY != this.y) {
                    // change easing function when scroller goes out of the boundaries
                    if (newY > minScrollY || newY < maxScrollY) {
                        easing = util.ease.quadratic;
                    }
                    this._scrollTo(event, element, vmodel, 0, newY, time, easing);
                }
                this._scrollTo(event, element, vmodel, 0, newY);
            };
            return Scroll;
        }();
    return avalon;
}
)();
},{"../dialog/avalon.dialog":18,"avalon":2}],64:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<div class=\"oni-widget oni-tooltip oni-helper-reset oni-widget-content oni-corner-all oni-tooltip oni-tooltip-hidden\" \n\t ms-class=\"oni-tooltip-{{arrClass}}\" \n\t ms-css-height=\"height\" \n\t ms-css-width=\"width\">\n\t<div class=\"oni-tooltip-content\">\n\t\t{{(content+\"\") | html}}\n\t</div>\n\t<b ms-if=\"arrow\" class=\"oni-tooltip-arrow-out\"></b>\n\t<b ms-if=\"arrow\" class=\"oni-tooltip-arrow-in\"></b>\n</div>";
innerRequire("../position/avalon.position");

module.exports = (
function () {
    var undefine;
    function hideElement(ele) {
        ele.style.display = 'none';
    }
    function showElement(ele) {
        ele.style.display = 'block';
    }
    var widget = avalon.ui.tooltip = function (element, data, vmodels) {
            var options = data.tooltipOptions, selfContent = '', hideTimer, animateTimer, tooltipElem, customAt = options.positionAt, customMy = options.positionMy, lessH = 2, lessW = 1, arrH = 10, arrW = 10, p = options.position, constantInited, ofElement, _event_ele, setContent;
            // showBy指定的content
            //方便用户对原始模板进行修改,提高定制性
            options.template = options.getTemplate(template, options);
            function _init(p) {
                var cName = 'left', p = p == undefine ? options.position : p;
                if (!(customMy && customAt)) {
                    switch (p) {
                    case 'tc':
                        //正上方
                        customMy = 'center bottom-' + arrH;
                        customAt = 'center top';
                        cName = 'bottom';
                        break;
                    case 'tl':
                        //上方靠左
                        customMy = 'left bottom-' + arrH;
                        customAt = 'left top';
                        cName = 'bottom';
                        break;
                    case 'tr':
                        //上方靠右
                        customMy = 'right bottom-' + arrH;
                        customAt = 'right top';
                        cName = 'bottom';
                        break;
                    case 'lt':
                        //左方靠上
                        customMy = 'right-' + arrW + ' top';
                        customAt = 'left top';
                        cName = 'right';
                        break;
                    case 'lc':
                        //正左方
                        customMy = 'right-' + arrW + ' center';
                        customAt = 'left center';
                        cName = 'right';
                        break;
                    case 'lb':
                        //左方靠下
                        customMy = 'right-' + arrW + ' bottom';
                        customAt = 'left bottom';
                        cName = 'right';
                        break;
                    case 'rt':
                        //右方靠上
                        customMy = 'left+' + arrW + ' top';
                        customAt = 'right top';
                        cName = 'left';
                        break;
                    case 'rc':
                        //正右方
                        customMy = 'left+' + arrW + ' center';
                        customAt = 'right center';
                        cName = 'left';
                        break;
                    case 'rb':
                        //右方靠下
                        customMy = 'left+' + arrW + ' bottom';
                        customAt = 'right bottom';
                        cName = 'left';
                        break;
                    case 'bl':
                        //下方靠左
                        customMy = 'left top+' + arrH;
                        customAt = 'left bottom';
                        cName = 'top';
                        break;
                    case 'bc':
                        //正下方
                        customMy = 'center top+' + arrH;
                        customAt = 'center bottom';
                        cName = 'top';
                        break;
                    case 'br':
                        //下方靠右
                        customMy = 'right top+' + arrH;
                        customAt = 'right bottom';
                        cName = 'top';
                        break;
                    case 'cc':
                        //居中
                        customMy = customAt = 'center center';
                        cName = 'bottom';
                        break;
                    default:
                        customMy = 'left top+' + arrH;
                        customAt = 'left bottom';
                        cName = 'bottom';
                        break;
                    }
                } else {
                    var ats = customAt.replace(/[0-9\+\-]+/g, '').split(/\s+/), mys = customMy.replace(/[0-9\+\-]+/g, '').split(/\s+/);
                    // top or bottom
                    if (ats[0] == mys[0]) {
                        if (ats[1] == 'top') {
                            cName = 'bottom';
                        } else {
                            cName = 'top';
                        }
                    } else if (ats[1] == mys[1]) {
                        if (ats[0] == 'left') {
                            cName = 'right';
                        } else {
                            cName = 'left';
                        }
                    } else {
                        cName = mys[1] || 'bottom';
                    }
                }
                return cName;
            }
            var vmodel = avalon.define(data.tooltipId, function (vm) {
                    avalon.mix(vm, options);
                    if (vm.content == undefine)
                        vm.content = element.getAttribute('title');
                    vm.widgetElement = element;
                    vm.arrClass = 'left';
                    var tooltipElems = {};
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'delegate',
                        'rootElement'
                    ];
                    vm.rootElement = '';
                    vm.toggle = '';
                    var inited;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        vmodel.arrClass = _init(vmodel.position);
                        // 埋个钩子
                        vmodel.widgetElement.setAttribute('oni-tooltip-id', vmodel.$id);
                        if (vmodel.event == 'mouseenter' && vmodel.delegate) {
                            vmodel.event = 'mouseover';
                        }
                        tooltipElem = tooltipELementMaker(vmodel.container);
                        vm.rootElement = tooltipElem;
                        avalon.scan(tooltipElem, [vmodel].concat(vmodels));
                        vmodel.event && element.setAttribute('ms-' + vmodel.event + '-101', '_showHandlder($event)');
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    vm.$remove = function () {
                        if (tooltipElem && tooltipElem.parentNode)
                            tooltipElem.parentNode.removeChild(tooltipElem);
                    };
                    //@interface show(elem) 用这个方法来刷新tooltip的位置
                    vm.show = function (elem) {
                        if (vmodel.disabled || !tooltipElem)
                            return;
                        if (elem == undefine)
                            elem = ofElement;
                        if (elem) {
                            ofElement = elem;
                            var tipElem = avalon(tooltipElem), atEle = avalon(elem), tipElemAt = customAt, tipElemMy = customMy, bs = tooltipElem.getElementsByTagName('b'), arrOut, arrIn, container = vmodel.container;
                            for (var i = 0, len = bs.length; i < len; i++) {
                                var tb = avalon(bs[i]);
                                if (tb.hasClass('oni-tooltip-arrow-out')) {
                                    arrOut = tb;
                                } else if (tb.hasClass('oni-tooltip-arrow-in')) {
                                    arrIn = tb;
                                }
                            }
                            // 哎，无语的加个延时
                            avalon.nextTick(function () {
                                showElement(tooltipElem);
                                // 定位toolp元素
                                tipElem.position({
                                    of: elem,
                                    at: tipElemAt,
                                    my: tipElemMy,
                                    collision: vmodel.collision,
                                    within: (avalon.isFunction(container) ? container() : container) || document.body
                                });
                                var tipPos = tipElem.offset(), elemPos = atEle.offset();
                                // position组件自动调整的时候调整箭头上下朝向
                                if (elem.nodeName) {
                                    if (tipPos.top > atEle.offset().top + elem.offsetHeight && vmodel.arrClass == 'bottom') {
                                        vmodel.arrClass = 'top';
                                        tipElem.removeClass('oni-tooltip-bottom').addClass('oni-tooltip-top');
                                    } else if (tipPos.top + tooltipElem.offsetHeight < atEle.offset().top && vmodel.arrClass == 'top') {
                                        vmodel.arrClass = 'bottom';
                                        tipElem.removeClass('oni-tooltip-top').addClass('oni-tooltip-bottom');
                                    }
                                    // 根据元素和tooltip元素的宽高调整箭头位置
                                    if (arrOut && arrIn) {
                                        var dir = vmodel.arrClass == 'bottom' || vmodel.arrClass == 'left', avalonElem = avalon(elem), moveToLeft = tipPos.left + tooltipElem.offsetWidth / 2 > avalonElem.offset().left + elem.offsetWidth, moveToRight = tipPos.left + tooltipElem.offsetWidth / 2 < avalonElem.offset().left;
                                        // tip元素中线偏出elem
                                        if ((vmodel.arrClass == 'top' || vmodel.arrClass == 'bottom') && (moveToRight || moveToLeft)) {
                                            arrOut.position({
                                                of: tooltipElem,
                                                at: (moveToRight ? 'right' : 'left') + ' ' + (dir ? 'bottom' : 'top'),
                                                my: (moveToRight ? 'right-10' : 'left+10') + ' ' + (dir ? 'top' : 'bottom'),
                                                within: tooltipElem
                                            });
                                            arrIn.position({
                                                of: tooltipElem,
                                                at: (moveToRight ? 'right' : 'left') + ' ' + (dir ? 'bottom' : 'top'),
                                                my: (moveToRight ? 'right-11' : 'left+11') + ' ' + (dir ? 'top-' : 'bottom+') + lessH / 2,
                                                within: tooltipElem
                                            })    // 竖直方向，高度不够  
;
                                        } else if ((vmodel.arrClass == 'bottom' || vmodel.arrClass == 'top') && tooltipElem.offsetWidth < elem.offsetWidth) {
                                            arrOut.position({
                                                of: tooltipElem,
                                                at: 'center ' + (dir ? 'bottom' : 'top'),
                                                my: 'center ' + (dir ? 'top' : 'bottom'),
                                                within: tooltipElem
                                            });
                                            arrIn.position({
                                                of: tooltipElem,
                                                at: 'center ' + (dir ? 'bottom' : 'top'),
                                                my: 'center ' + (dir ? 'top-' : 'bottom+') + lessH,
                                                within: tooltipElem
                                            })    // 水平方向，宽度不够
;
                                        } else if ((vmodel.arrClass == 'left' || vmodel.arrClass == 'right') && tooltipElem.offsetHeight < elem.offsetHeight) {
                                            arrOut.position({
                                                of: tooltipElem,
                                                at: (dir ? 'left' : 'right') + ' center',
                                                my: (dir ? 'right' : 'left') + ' center',
                                                within: tooltipElem
                                            });
                                            arrIn.position({
                                                of: tooltipElem,
                                                at: (dir ? 'left' : 'right') + ' center',
                                                my: (dir ? 'right+' : 'left-') + lessW + ' center',
                                                within: tooltipElem
                                            });
                                        } else {
                                            // vvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                                            var elemH = elem.offsetHeight, elemW = elem.offsetWidth, oleft;
                                            switch (vmodel.arrClass) {
                                            case 'left':
                                            case 'right':
                                                if (vmodel.arrClass == 'left') {
                                                    arrOut[0].style.left = '-6px';
                                                    arrIn[0].style.left = '-5px';
                                                } else {
                                                    arrOut[0].style.right = '-5px';
                                                    arrIn[0].style.right = '-4px';
                                                }
                                                oleft = Math.floor(elemH / 2) - tipPos.top + elemPos.top;
                                                arrOut[0].style.top = oleft + 'px';
                                                arrIn[0].style.top = oleft + 1 + 'px';
                                                break;
                                            case 'top':
                                            case 'bottom':
                                            default:
                                                if (vmodel.arrClass == 'top') {
                                                    arrOut[0].style.top = '-6px';
                                                    arrIn[0].style.top = '-5px';
                                                } else {
                                                    arrOut[0].style.top = arrIn[0].style.top = 'auto';
                                                    arrOut[0].style.bottom = '-6px';
                                                    arrIn[0].style.bottom = '-5px';
                                                }
                                                oleft = Math.floor(elemW / 2) - tipPos.left + elemPos.left;
                                                arrOut[0].style.left = oleft + 'px';
                                                arrIn[0].style.left = oleft + 1 + 'px';
                                            }
                                        }
                                    }
                                }
                                // IE里面透明箭头显示有问题，屏蔽掉
                                if (vmodel.animated && !!-[1]) {
                                    clearInterval(animateTimer);
                                    var now = avalon(tooltipElem).css('opacity') * 100 >> 0;
                                    if (now != 100) {
                                        var dis = vmodel._animateArrMaker(now, 100);
                                        dis.splice(0, 1);
                                        animateTimer = setInterval(function () {
                                            if (dis.length <= 0) {
                                                return clearInterval(animateTimer);
                                            }
                                            avalon(tooltipElem).css('opacity', dis[0] / 100);
                                            dis.splice(0, 1);
                                        }, 16);
                                    }
                                }
                            });
                        }
                    };
                    //@interface hide($event) 隐藏tooltip，参数是$event，可缺省
                    vm.hide = function (e) {
                        e && e.preventDefault && e.preventDefault();
                        if (vmodel.toggle) {
                            vmodel.toggle = false;
                        } else {
                            vmodel._hide();
                        }
                    };
                    // 隐藏效果动画
                    vm._hide = function (e) {
                        if (!tooltipElem)
                            return;
                        if (vmodel.animated && !!-[1]) {
                            clearInterval(animateTimer);
                            var now = avalon(tooltipElem).css('opacity') * 100 >> 0;
                            if (now) {
                                var dis = vmodel._animateArrMaker(now, 0);
                                animateTimer = setInterval(function () {
                                    if (dis.length <= 0) {
                                        hideElement(tooltipElem);
                                        avalon(tooltipElem).addClass('oni-tooltip-hidden');
                                        return clearInterval(animateTimer);
                                    }
                                    avalon(tooltipElem).css('opacity', dis[0] / 100);
                                    dis.splice(0, 1);
                                }, 50);
                            }
                        } else {
                            hideElement(tooltipElem);
                        }
                    };
                    // 为了实现通过toggle属性控制显示隐藏
                    vm._hideHandlder = function () {
                        if (vmodel.toggle) {
                            vmodel.toggle = false;
                        } else {
                            vmodel._hide();
                        }
                    };
                    // 响应widget元素的事件
                    vm._showHandlder = function (event, force) {
                        vmodel._show(event, undefine, this);
                    };
                    vm._show = function (e, content, ele) {
                        var tar = ele || _event_ele || vmodel.widgetElement, src = e && (e.srcElement || e.target) || ofElement || vmodel.widgetElement, content = content || setContent;
                        // delegate情形下，从src->this找到符合要求的元素
                        if (content === undefine) {
                            if (vmodel.delegate) {
                                content = vmodel.contentGetter.call(vmodel, src);
                                while (!content && src && src != tar) {
                                    src = src.parentNode;
                                    content = vmodel.contentGetter.call(vmodel, src);
                                }
                                tar = src;
                            } else {
                                content = vmodel.contentGetter.call(vmodel, tar);
                            }
                        } else {
                            tar = src;
                        }
                        if (content == undefine) {
                            return;
                        }
                        ofElement = tar;
                        clearTimeout(hideTimer);
                        clearTimeout(animateTimer);
                        var inited = tar.getAttribute('oni-tooltip-inited');
                        // 禁用默认的title
                        var oldTitle = tar.title;
                        if (vmodel.content != content)
                            vmodel.content = content;
                        if (tar.title)
                            tar.title = '';
                        if (!tooltipElem) {
                            tooltipElem = tooltipELementMaker(vmodel.container);
                            avalon.scan(tooltipElem, [vmodel].concat(vmodels));
                        }
                        avalon(tooltipElem).removeClass('oni-tooltip-hidden');
                        // 减少抖动
                        if (!vmodel.track) {
                            _init(vmodel.arrClass);
                        }
                        vmodel.show(vmodel.track ? e || tar : tar);
                        var inited = tar.getAttribute('oni-tooltip-inited');
                        if (!inited) {
                            tar.setAttribute('oni-tooltip-inited', 1);
                            // 自动隐藏
                            vmodel.autohide && avalon(tar).bind(vmodel.event != 'focus' ? 'mouseout' : 'blur', function (e) {
                                if (oldTitle)
                                    tar.title = oldTitle;
                                clearTimeout(hideTimer);
                                if (vmodel.autohide)
                                    hideTimer = setTimeout(vmodel._hideHandlder, vmodel.hiddenDelay);
                            });
                            // 鼠标跟随
                            if (vmodel.track && (vmodel.event == 'mouseover' || vmodel.event == 'mouseenter')) {
                                avalon(tar).bind('mousemove', function (e) {
                                    // 阻止冒泡，防止代理情况下的重复执行过多次
                                    e.stopPropagation();
                                    ofElement = e;
                                    vmodel.show(e);
                                    // 减少抖动
                                    avalon(tooltipElem).removeClass('oni-tooltip-hidden');
                                });
                            }
                        }
                    };
                    /*
             * @interface showBy($event, content) 参数满足 {target: elem}这样，或者是一个elem元素亦可，tooltip会按照elem定位，并作为参数传递给contentGetter，如果指定content，则忽略contentGetter的返回，直接显示content内容
             * @param $event 定位参照物，可以是一个事件，也可以是一个元素，如果未提供有效的元素或者事件，则采用上一次定位的元素或者事件来定位
             * @param content 用来填充tooltip的内容
             */
                    vm.showBy = function (obj, content) {
                        var tar = obj && obj.tagName ? obj : obj && obj.target || obj && obj.srcElement || ofElement || element;
                        // 如果已显示则更新内容
                        if (vmodel.toggle)
                            vmodel.content = content || vmodel.contentGetter.call(vmodel, tar);
                        _event_ele = ofElement = tar;
                        setContent = content;
                        if (!vmodel.toggle) {
                            vmodel.toggle = true;
                        } else {
                            vmodel.show(tar)    // 更新位置
;
                        }
                        setContent = undefine;
                    };
                    vm._isShown = function () {
                        var elem = avalon(tooltipElem);
                        return elem.css('display') != 'none' && !elem.hasClass('oni-tooltip-hidden');
                    };
                    /**
             *  @interface 将toolTip元素注入到指定的元素内，请在调用appendTo之后再调用showBy
             *  @param 目标元素
             */
                    vm.appendTo = function (ele) {
                        if (ele) {
                            ele.appendChild(tooltipElem);
                            // 更新位置
                            vmodel.toggle && vmodel.show();
                        }
                    };
                });
            function tooltipELementMaker(container) {
                var f = avalon.parseHTML(vmodel.template);
                var tooltipElem = f.childNodes[0];
                container = (avalon.isFunction(container) ? container() : container) || document.body;
                container.appendChild(f);
                return tooltipElem;
            }
            vmodel.$watch('position', function (newValue) {
                _init(vmodel.position);
                vmodel._isShown() && vmodel.show();
            });
            vmodel.$watch('positionAt', function (newValue) {
                customAt = newValue;
                _init(vmodel.position);
                vmodel._isShown() && vmodel.show();
            });
            vmodel.$watch('positionMy', function (newValue) {
                customMy = newValue;
                _init(vmodel.position);
                vmodel._isShown() && vmodel.show();
            });
            vmodel.$watch('toggle', function (n) {
                if (n) {
                    vmodel._show(ofElement, setContent || vmodel.content);
                } else {
                    vmodel._hide();
                }
            });
            return vmodel;
        };
    widget.defaults = {
        toggle: false,
        //@config 组件是否显示，可以通过设置为false来隐藏组件，设置为true来显示【在原来的位置展示原来的内容，如果需要改变位置、内容，请使用showBy】
        collision: 'none',
        //@config 溢出检测，当被定位元素在某些方向上溢出窗口，则移动它到另一个位置。与 my 和 at 选项相似，该选项会接受一个单一的值或一对 horizontal/vertical 值。例如：flip、fit、fit flip、fit none。/nflip：翻转元素到目标的相对一边，再次运行 collision 检测一遍查看元素是否适合。无论哪一边允许更多的元素可见，则使用那一边。/nfit：把元素从窗口的边缘移开。/nflipfit：首先应用 flip 逻辑，把元素放置在允许更多元素可见的那一边。然后应用 fit 逻辑，确保尽可能多的元素可见。/nnone: 不检测
        event: 'mouseenter',
        //@config 显示tooltip的事件，默认hover的时候显示tooltip，为false的时候就不绑定事件，如果后面设置了自动隐藏，则mouseenter对应的是mouseleave,focus对应的是blur，进行自动隐藏事件侦听，使用代理的时候，目测不支持focus,blur，event可以配置为空，则不会添加事件侦听
        content: void 0,
        //@config tooltip显示内容，默认去获取element的title属性
        container: void 0,
        //@config {Element} 把tooltip元素append到container指定的这个元素内，可以是一个函数，用以返回一个元素
        width: 'auto',
        //@config tip宽度，默认是auto
        height: 'auto',
        //@config tip高度，默认是auto    
        arrow: true,
        //@config 是否显示尖角图标，默认为true
        autohide: true,
        //@config 元素hoverout之后，是否自动隐藏tooltip，默认true
        delegate: false,
        //@config 元素是否只作为一个代理元素，这样适合对元素内多个子元素进行tooltip绑定
        disabled: false,
        //@config 禁用
        track: false,
        //@config tooltip是否跟随鼠标，默认否
        animated: true,
        //@config 是否开启显示隐藏切换动画效果
        position: 'rt',
        //@config tooltip相对于element的位置，like: rt,rb,rc...
        positionMy: false,
        //@config tooltip元素的定位点，like: left top+11
        positionAt: false,
        //@config element元素的定位点，like: left top+11,positionAt && positionMy时候忽略position设置
        hiddenDelay: 16,
        //@config tooltip自动隐藏时间，单位ms
        //@config onInit(vmodel, options, vmodels) 完成初始化之后的回调,call as element's method
        onInit: avalon.noop,
        contentGetter: function (elem) {
            if (elem.tagName.toLowerCase() != 'a')
                return;
            return elem.title;
        },
        //@config contentGetter() 获取内容接口，讲srcElement作为参数传递过来，默认是返回a标签的title，如果该函数返回为空，那么则不会显示tooltip
        //@config _animateArrMaker(from, to) 不支持css3动画效果步长生成器函数，返回一个数组，类似[0,xx,xx,xx,50]
        _animateArrMaker: function (from, to) {
            var arr = [], unit = 10, from = Math.floor(from / unit) * unit, to = Math.floor(to / unit) * unit, dis = to - from, d = dis > 0 ? unit : -unit;
            while (from != to) {
                from += d;
                from = from > 100 ? 100 : from;
                dis = parseInt(dis - d);
                if (Math.abs(dis) <= 1)
                    from = to;
                arr.push(from);
            }
            if (!arr.length)
                arr = [to];
            return arr;
        },
        getTemplate: function (tmpl, opts) {
            return tmpl;
        },
        //@config getTemplate(tpl, opts) 定制修改模板接口
        $author: 'skipper@123'
    };
}
)();
},{"../position/avalon.position":47,"avalon":2}],65:[function(innerRequire,module,exports){
innerRequire("avalon");
innerRequire("./avalon.tree");
innerRequire("../mmRequest/mmRequest");

module.exports = (
function () {
    var undefine = void 0;
    // 排除辅助字段
    avalon.ui.tree.leafIgnoreField.push('zAsync');
    avalon.ui.tree.AddExtention(['async'], {
        data: {
            // 擴展異步標記key
            key: {
                zAsync: 'zAsync'    // 是否異步加載過
            }
        },
        async: {
            enable: false,
            url: './avalon.tree.data.php',
            contentType: 'application/x-www-form-urlencoded',
            dataType: 'json',
            autoParam: [],
            dataFilter: undefine,
            otherParam: {},
            type: 'post'
        }
    }, function (vm, vmodels) {
        avalon.mix(vm, {
            /**
			 * @interface 强行异步加载父节点的子节点
			 * @param 指定需要异步加载的父节点 JSON 数据
			 * @param reloadType = "refresh" 表示清空后重新加载 reloadType != "refresh" 时，表示追加子节点处理
			 * @param 设定异步加载后是否自动展开父节点。isSilent = true 时，不展开父节点，其他值或缺省状态都自动展开
			 * @param 異步加載成功之後的回調
			 * @param 默认是async内的dataFilter
			 */
            reAsyncChildNodes: function (leaf, reloadType, isSilent, callback, filter) {
                if (!leaf)
                    return;
                vm.asyncChildNodes(leaf, function (res) {
                    // 是否清除
                    if (reloadType === 'refresh')
                        leaf.children.clear();
                    // 展开
                    if (!isSilent)
                        leaf.open = true;
                    callback && callback({
                        e: undefine,
                        leaf: leaf,
                        vm: vm,
                        vmodels: vmodels
                    });
                }, filter);
            },
            asyncChildNodes: function (leaf, callback, filter) {
                if (!leaf)
                    return;
                var async = vm.async, filter = filter || async.dataFilter, okFun = vm.callback.onAsyncSuccess, failFun = vm.callback.onAsyncError, data = avalon.mix({}, async.otherParam.$model || {});
                // 拼合otherParam
                // 拼合autoParam
                avalon.each(async.autoParam, function (i, item) {
                    var args = item.split('=');
                    data[args[1] || args[0]] = leaf[args[0]];
                });
                vm.excute('async', {}, leaf, function () {
                    var iconSpan = avalon(g('treeIcon' + leaf.$id));
                    iconSpan.addClass('ico_loading');
                    avalon.ajax(avalon.mix({ data: data }, async)).done(function (res) {
                        callback && callback(res);
                        // 是否过滤数据
                        vm.addNodes(leaf, filter ? filter(res) : res);
                        iconSpan.removeClass('ico_loading');
                        okFun && okFun({
                            leaf: leaf,
                            e: res,
                            vm: vmodel,
                            vmodels: vmodels
                        });
                    }).fail(function (res) {
                        iconSpan.removeClass('ico_loading');
                        failFun && failFun({
                            leaf: leaf,
                            e: res,
                            vm: vmodel,
                            vmodels: vmodels
                        });
                    });
                });
            }
        });
    }, undefine, undefine, function (vmodel, vmodels) {
        // 节点展开时去检测一下是否要异步加载
        vmodel.$watch('e:expand', function (arg) {
            if (!vmodel.async.enable)
                return;
            var leaf = arg.leaf;
            if (leaf && !leaf.zAsync) {
                vmodel.asyncChildNodes(leaf, function () {
                    leaf.zAsync = true;
                });
            }
        });
    });
}
)();
},{"../mmRequest/mmRequest":40,"./avalon.tree":68,"avalon":2}],66:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
tree = innerRequire("./avalon.tree"),
check_html = "<span class=\"button chk\" \n      ms-attr-id=\"'chk'+leaf.$id\" \n      ms-if=\"exprAnd(leaf, check.enable, !leaf.nocheck)\" \n      ms-class=\"{{computeCHKClass(leaf)}}\"\n      ms-on-mouseenter=\"excute('chkFocus', $event, leaf, chkFocus)\" \n      ms-on-mouseleave=\"excute('chkBlur', $event, leaf, chkBlur)\" \n      ms-on-click=\"checkNode(leaf, void 0, true, 'callbackFlag')\"></span>";

module.exports = (
function () {
    function g(id) {
        return document.getElementById(id);
    }
    var undefine = void 0;
    // 排除辅助字段
    avalon.ui.tree.leafIgnoreField.push('chkFocus', 'chkTotal', 'checkedOld');
    avalon.ui.tree.AddExtention(['check'], {
        check: {
            enable: false,
            radioType: 'level',
            chkStyle: 'checkbox',
            nocheckInherit: false,
            chkDisabledInherit: false,
            autoCheckTrigger: false,
            chkboxType: {
                Y: 'ps',
                N: 'ps'
            }
        },
        data: {
            key: {
                checked: 'checked',
                nocheck: 'nocheck',
                chkDisabled: 'chkDisabled',
                halfCheck: 'halfCheck',
                chkFocus: 'chkFocus',
                chkTotal: '',
                checkedOld: 'checked'
            }
        },
        callback: {
            beforeCheck: avalon.noop,
            onCheck: avalon.noop,
            beforeCheckRelated: function (arg) {
                if (arg && arg.vm && arg.vm.check && !arg.vm.check.enable || arg.e && arg.e.expr === false) {
                    avalon.log('check is not enable');
                    return false;
                }
                avalon.log('check is enable');
                return true;
            },
            beforeCheckChange: avalon.noop,
            onCheckChange: avalon.noop
        }
    }, function (vm, vmodels) {
        avalon.mix(vm, {
            chkFocus: function (arg) {
                if (arg.leaf)
                    arg.leaf.chkFocus = true;
            },
            chkBlur: function (arg) {
                if (arg.leaf)
                    arg.leaf.chkFocus = false;
            },
            checkEnable: function () {
                return !!vm.check.enable;
            },
            computeCHKClass: function (leaf) {
                var type = vm.getCheckType();
                return type + '_' + !!leaf.checked + '_' + (leaf.halfCheck ? 'part' : leaf.chkDisabled ? 'disable' : 'full') + (leaf.chkFocus ? '_focus' : '');
            },
            getCheckType: function () {
                return vm.check.chkStyle === 'radio' ? 'radio' : 'checkbox';
            },
            /**
	             * @interface 勾选 或 取消勾选 单个节点
	             * @param {Object} 节点
	             * @param true 表示勾选节点  false 表示取消勾选 的节点数据
	             * @param true 表示按照 setting.check.chkboxType 属性进行父子节点的勾选联动操作 false 表示只修改此节点勾选状态，无任何勾选联动操作
	             * @param true 表示执行此方法时触发 beforeCheck & onCheck 事件回调函数  false 表示执行此方法时不触发事件回调函数
	             */
            checkNode: function (leaf, checked, checkTypeFlag, callbackFlag) {
                if (!vm.checkEnable() || leaf.nocheck || leaf.chkDisabled)
                    return;
                vm.excute('checkChange', {
                    cancelCallback: !callbackFlag,
                    checkTypeFlag: checkTypeFlag
                }, leaf, function (arg) {
                    var chk = checked === undefine ? !leaf.checked : !!checked, beforeCheck = vm.callback.beforeCheck, onCheck = vm.callback.onCheck;
                    if (callbackFlag && chk && beforeCheck && beforeCheck(arg) === false || arg.cancel)
                        return;
                    leaf.checked = chk;
                    callbackFlag && chk && onCheck && onCheck(arg);
                    return chk;
                });
            },
            /**
	             * @interface 勾选 或 取消勾选 全部节点
	             * @param true 表示勾选全部节点 false 表示全部节点取消勾选
	             * @param {Object} 可以指定一个起始的节点
	             */
            checkAllNodes: function (checked, leaf) {
                if (!vm.checkEnable() && vm.check.chkStyle !== 'checkbox')
                    return;
                vm.visitor(leaf, function (node) {
                    if (!node.nocheck && !node.chkDisabled) {
                        node.checked = !!checked;
                    }
                });
            },
            /**
	             * @interface 获取输入框被勾选 或 未勾选的节点集合
	             * @param true 表示勾选 false 表示未勾选
	             * @param {Object} 可以指定一个起始的节点
	             */
            getCheckedNodes: function (checked, leaf) {
                var checked = checked === undefine ? true : !!checked;
                return vm.visitor(leaf, function (node) {
                    if (node.chkDisabled || node.nocheck)
                        return;
                    if (node.checked == checked)
                        return node;
                }, checked && vm.check.chkStyle === 'radio' && vm.check.radioType === 'all' ? function (res) {
                    return res && res.length > 0;
                } : undefine, []);
            },
            /**
	             * @interface 获取输入框勾选状态被改变的节点集合
	             * @param {Object} 可以指定一个起始的节点
	             * @param 将当前状态更新到原始数据上
	             */
            getChangeCheckedNodes: function (leaf, updateChanges) {
                return vm.visitor(leaf, function (node) {
                    if (!!node.checkedOld != !!node.checked) {
                        if (updateChanges)
                            node.checkedOld = !!node.checked;
                        return node;
                    }
                }, undefine, []);
            },
            /**
	             * @interface 禁用 或 解禁 某个节点的 checkbox / radio [check.enable = true 时有效]
	             * @param {Object} 可以指定一个起始的节点
	             * @param true 表示禁用 checkbox / radio false 表示解禁 checkbox / radio
	             * @param true 表示全部父节点进行同样的操作 false 表示不影响父节点
	             * @param true 表示全部子节点进行同样的操作 false 表示不影响子节点
	             */
            setChkDisabled: function (leaf, disabled, inheritParent, inheritChildren) {
                if (vm.checkEnable()) {
                    disabled = !!disabled;
                    leaf.chkDisabled = disabled;
                    // 操作子节点
                    if (inheritChildren) {
                        vm.visitor(leaf, function (node) {
                            if (node.nocheck)
                                return;
                            node.chkDisabled = disabled;
                        }, function (res, node) {
                            // 终止这个节点，以及其子节点
                            return node.nocheck;
                        }, []);
                    }
                    // 影响父节点
                    if (inheritParent && leaf && leaf.$parentLeaf) {
                        // 向上溯源
                        vm.cVisitor(leaf, function (node) {
                            var par = node.$parentLeaf;
                            if (!par)
                                return;
                            var disabledCount = 0, canDisabledCount = 0;
                            // 计算有多少子节点的disable情况
                            vm.brotherVisitor(node, function (node) {
                                if (node.nocheck)
                                    return;
                                canDisabledCount++;
                                if (node.chkDisabled)
                                    disabledCount++;
                            });
                            par.chkDisabled = disabledCount >= canDisabledCount;
                        });
                    }
                }
            }
        });
    }, [], { check_html: check_html }, function (vmodel, vmodels) {
        // 继承check属性
        vmodel.$watch('e:nodeCreated', function (arg) {
            var newLeaf = arg.res, vm = arg.vm, par = newLeaf.$parentLeaf;
            if (!par)
                return;
            if (!(!vm.optionToBoolen(vm.check.enable, newLeaf) || newLeaf.nocheck)) {
                newLeaf.nocheck = vm.check.nocheckInherit && par.nocheck;
            }
            if (!(!vm.optionToBoolen(vm.check.enable, newLeaf) || newLeaf.chkDisabled)) {
                newLeaf.chkDisabled = vm.check.chkDisabledInherit && par.chkDisabled;
            }
        });
        var onlyOneRadio = vmodel.getCheckedNodes()[0];
        vmodel.$watch('e:checkChange', function (arg) {
            var leaf = arg.leaf, vm = arg.vm, chk = vm.check;
            if (!chk.enable)
                return;
            var chkStyle = chk.chkStyle, radioType = chk.radioType, chkboxType = chk.chkboxType, autoCheckTrigger = chk.autoCheckTrigger, callback = vmodel.callback, beforeCheck = callback.beforeCheck, onCheck = callback.onCheck, cancelCallback = arg.e && arg.e.cancelCallback;
            if (chkStyle === 'radio') {
                if (leaf.checked) {
                    if (radioType === 'all') {
                        if (onlyOneRadio)
                            onlyOneRadio.checked = false;
                        onlyOneRadio = leaf;
                    } else {
                        vm.brotherVisitor(leaf, function (node) {
                            if (node === leaf)
                                return;
                            node.checked = false;
                        }, function (res) {
                            return res.length > 0;
                        }, []);
                    }
                }    // only for checkbox
            } else {
                leaf.halfCheck = false;
                // 关联效果
                var bool = !!leaf.checked;
                chkboxType = bool ? chkboxType.Y : chkboxType.N;
                if (chkStyle === 'checkbox' && arg.e && arg.e.checkTypeFlag) {
                    // 向上关联
                    if (chkboxType.indexOf('p') > -1) {
                        vmodel.cVisitor(leaf, function (node) {
                            var par = node.$parentLeaf;
                            if (!par)
                                return;
                            var checkedCount = 0, canCheckedCount = 0;
                            // 计算节点check数目
                            vmodel.brotherVisitor(node, function (brother) {
                                if (brother.nocheck || brother.chkDisabled)
                                    return;
                                if (brother.checked)
                                    checkedCount++;
                                canCheckedCount++;
                            }, function (res, brother, par) {
                                return par && (par.nocheck || par.chkDisabled);
                            });
                            var e = {
                                    e: arg.e,
                                    srcLeaf: leaf,
                                    leaf: node,
                                    vm: vmodel,
                                    vmodels: vmodels,
                                    preventDefault: function () {
                                        this.cancel = true;
                                    }
                                };
                            if (!cancelCallback) {
                                if (bool && autoCheckTrigger && beforeCheck && beforeCheck(e) === false)
                                    return;
                            }
                            par.checked = checkedCount > 0;
                            par.halfCheck = checkedCount <= 0 || checkedCount >= canCheckedCount ? false : true;
                            !cancelCallback && bool && autoCheckTrigger && onCheck && onCheck(e);
                        });
                    }
                    // 向下关联
                    if (chkboxType.indexOf('s') > -1) {
                        vmodel.visitor(leaf, function (node) {
                            if (node.nocheck || node.chkDisabled)
                                return;
                            var e = {
                                    e: arg.e,
                                    srcLeaf: leaf,
                                    leaf: node,
                                    vm: vmodel,
                                    vmodels: vmodels,
                                    preventDefault: function () {
                                        this.cancel = true;
                                    }
                                };
                            if (!cancelCallback) {
                                if (bool && autoCheckTrigger && beforeCheck && beforeCheck(e) === false)
                                    return;
                            }
                            node.checked = bool;
                            // 勾选父节点，让子节点的半勾选失效
                            if (bool)
                                node.halfCheck = false;
                            !cancelCallback && bool && autoCheckTrigger && onCheck && onCheck(e);
                        }, undefine, []);
                    }
                }
            }
        });
    });
}
)();
},{"./avalon.tree":68,"avalon":2}],67:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
tree = innerRequire("./avalon.tree"),
edit_html = "<span class=\"button ebutton add\"\n      ms-on-dblclick=\"editDblclick\" \n\t  ms-if=\"exprAnd(leaf, edit.enable, edit.showAddBtn, !data.keep.leaf || leaf.isParent)\" \n\t  ms-click=\"excute('nodeCreated', $event, leaf, 'addFun')\" \n\t  ms-attr-title=\"optionToBoolen(edit.addTitle,leaf)\"></span>\n<span class=\"button ebutton edit\" \n      ms-on-dblclick=\"editDblclick\" \n\t  ms-if=\"exprAnd(leaf, edit.enable, edit.showRenameBtn)\" \n\t  ms-click=\"excute('edit', $event, leaf, 'editName')\" \n\t  ms-attr-title=\"optionToBoolen(edit.renameTitle, leaf)\"></span>\n<span class=\"button ebutton remove\" \n      ms-on-dblclick=\"editDblclick\" \n\t  ms-if=\"exprAnd(leaf, edit.enable, edit.showRemoveBtn)\" \n\t  ms-click=\"excute('remove', $event, leaf, 'removeFun')\" \n\t  ms-attr-title=\"optionToBoolen(edit.removeTitle, leaf)\"></span>\n<span class=\"edit-input\"><input type=\"text\" class=\"rename\" \n      ms-attr-id=\"'input'+leaf.$id\"\n      ms-attr-value=\"leaf.name\" \n      ms-on-focus=\"excute('focus',$event,leaf,'editFocus')\"\n      ms-on-blur=\"excute('blur',$event,leaf,'saveChange')\"></span> ";

module.exports = (
function () {
    function g(id) {
        return document.getElementById(id);
    }
    function makeCallback(key) {
        return function (arg) {
            var func = arg.vm.callback[key], ele = arg.e ? arg.e.srcElement || arg.e.target : void 0;
            func && func.call(ele, arg);
        };
    }
    avalon.ui.tree.AddExtention(['edit'], // 注入默认配置
    {
        edit: {
            enable: true,
            showAddBtn: true,
            showRemoveBtn: true,
            showRenameBtn: true,
            editNameSelectAll: true,
            removeTitle: 'remove',
            renameTitle: 'rename',
            addTitle: 'add'
        },
        data: {
            keep: {
                leaf: false,
                parent: false
            }
        },
        callback: {
            beforeRemove: false,
            beforeRename: false,
            beforeNodeCreated: false,
            onRemove: avalon.noop,
            onRename: avalon.noop,
            onNodeCreated: avalon.noop,
            beforeEdit: makeCallback('beforeRename'),
            onBlur: makeCallback('onRename')
        }
    }, // 给vm新增方法
    function (vm, vmodels) {
        function changeIsParent(leaf) {
            if (!vm.data.keep.parent) {
                leaf.isParent = !!leaf.children.length;
            }
        }
        var focusLeaf;
        avalon.mix(vm, {
            editDblclick: function (event) {
                event.stopPropagation();
            },
            /**
	             * @interface 设置某节点进入编辑名称状态
	             * @param {Object} {leaf:leaf}指定节点
	             */
            editName: function (arg) {
                var event = arg.e, leaf = arg.leaf;
                event.preventDefault && event.preventDefault();
                focusLeaf = leaf;
                if (avalon(this.parentNode).hasClass('curSelectedNode'))
                    event.stopPropagation();
                // edit logic
                avalon(g(leaf.$id)).addClass('edit-focus');
                avalon(g('c' + leaf.$id)).addClass('par-edit-focus');
                var input = g('input' + leaf.$id);
                if (vm.view.editNameSelectAll) {
                    input.select();
                }
                input.focus();
            },
            /**
	             * @interface 取消节点的编辑名称状态，可以恢复原名称，也可以强行赋给新的名称
	             * @param {String} 重新给定的新名称
	             */
            cancelEditName: function (newName) {
                if (focusLeaf) {
                    if (newName !== void 0)
                        focusLeaf.name = newName;
                }
            },
            saveChange: function (arg) {
                var leaf = arg.leaf;
                if (this.value != leaf.name) {
                    vm.cancelEditName(this.value);
                } else {
                    arg.preventDefault();
                }
                focusLeaf = null;
                avalon(g(leaf.$id)).removeClass('edit-focus');
                avalon(g('c' + leaf.$id)).removeClass('par-edit-focus');
            },
            addFun: function (arg) {
                var event = arg.e, leaf = arg.leaf;
                event.preventDefault();
                event.stopPropagation();
                return vm.addNodes(leaf, avalon.mix({ name: '\u672A\u547D\u540D\u8282\u70B9' }, arg.newLeaf || {}));
            },
            removeFun: function (arg) {
                var event = arg.e, leaf = arg.leaf;
                event.preventDefault();
                event.stopPropagation();
                // remove cache
                vm.removeCacheById(leaf.$id);
                var par = leaf.$parentLeaf || vm;
                par.children.remove(leaf);
                leaf.$parentLeaf && changeIsParent(leaf.$parentLeaf);
            },
            /**
	             * @interface 删除节点
	             * @param {Object} 节点
	             * @param true 表示执行此方法时触发 beforeRemove & onRemove 事件回调函数  false 表示执行此方法时不触发事件回调函数
	             */
            removeNode: function (leaf, callbackFlag) {
                vm.excute('remove', { cancelCallback: !callbackFlag }, leaf, 'removeFun');
            },
            /**
	             * @interface 删除子节点 此方法不会触发任何事件回调函数
	             * @param {Object} 节点
	             */
            removeChildNodes: function (parentLeaf) {
                var arr = vm.getNodes(parentLeaf);
                arr && arr.clear && arr.clear();
            }
        })    // 侦听的事件，func操作内进行分发
;
    }, [
        'remove',
        'rename',
        'add'
    ], {
        // 添加html钩子
        edit_binding: ' ms-hover="oni-state-hover" ',
        edit_html: edit_html
    }, function (vmodel, vmodels) {
        vmodel.$watch('e:beforeNodeCreated', function (arg) {
            var leaf = arg.leaf;
            // 子节点锁定
            if (vmodel.data.keep.leaf && !leaf.isParent)
                arg.preventDefault();
        });
    });
}
)();
},{"./avalon.tree":68,"avalon":2}],68:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon"),
template = "<ul class=\"oni-tree oni-helper-clearfix\" \n\tms-visible=\"toggle\" \n\tms-attr-id=\"$guid\" \n    ms-class=\"no-select:!view.txtSelectedEnable\"\n\tms-live-click=\"liveClick($event)\" \n\tms-live-contextmenu=\"excute('rightClick', $event, false, 'liveContextmenu')\">\n\t{{loadNodes()|html}}\n</ul>",
leafTemplate = "<span class=\"button switch center_docu\" \n      ms-class=\"bottom_docu:$last\" \n      ms-class-100=\"{{levelClass(leaf)}}\" \n      ms-class-2=\"noline_docu:!optionToBoolen(view.showLine, leaf)\"></span>\n{{MS_CHECK_HTML}}\n<a  {{MS_EDIT_BINDING}} \n   ms-class=\"curSelectedNode:hasClassSelect(leaf)\" \n   ms-class-100=\"{{levelClass(leaf)}}\" \n   ms-attr-target=\"leaf.target || '_blank'\" \n   ms-attr-href=\"leaf.url || '#'\" \n   ms-on-mousedown=\"excute('mousedown', $event, leaf)\" \n   ms-on-mouseup=\"excute('mouseup', $event, leaf)\" \n   ms-attr-title=\"exprAnd(leaf, view.showTitle, leaf.title || leaf.name)\"\n   ms-click=\"excute('click',$event,leaf,'selectFun')\">\n    <span class=\"button ico_docu\" \n          ms-css-background=\"computeIcon(leaf)\" \n          ms-class-100=\"{{levelClass(leaf)}}\" \n          ms-if=\"exprAnd(leaf, view.showIcon,leaf.icon)\"></span>\n    <span class=\"button ico_docu\" \n          ms-class-100=\"{{levelClass(leaf)}}\" \n          ms-if=\"exprAnd(leaf, view.showIcon,!leaf.icon)\"></span>\n  \t<span \n          ms-class-100=\"{{levelClass(leaf)}}\" >{{view.nameShower(leaf)|html}}</span>\n  \t{{MS_EDIT_HTML}}\n</a>",
parentTemplate = "<span class=\"button switch\" \n      ms-class-100=\"{{levelClass(leaf)}}\" \n      ms-class=\"{{computeLineClass(leaf, $first, $last)}}\"\n      ms-click=\"toggleOpenStatue($event,leaf)\" \n      ms-if=\"exprAnd(leaf, view.showSwitch)\"></span>\n{{MS_CHECK_HTML}}\n<a {{MS_EDIT_BINDING}} \n   ms-class-100=\"{{levelClass(leaf)}}\" \n   ms-class=\"curSelectedNode:hasClassSelect(leaf)\" \n   ms-click=\"excute('click',$event,leaf,'selectFun')\" \n   ms-attr-target=\"leaf.target || '_blank'\" \n   ms-attr-href=\"leaf.url || '#'\" \n   ms-on-mousedown=\"excute('mousedown', $event, leaf)\" \n   ms-on-mouseup=\"excute('mouseup', $event, leaf)\" \n   ms-attr-title=\"exprAnd(leaf, view.showTitle, leaf.title || leaf.name)\" \n\t ms-dblclick=\"excute('dblClick', $event, leaf,'toggleOpenStatue')\">\n    <span class=\"button\" \n          ms-attr-id=\"'treeIcon'+leaf.$id\" \n          ms-css-background=\"{{computeIcon(leaf)}}\" \n          ms-class-100=\"{{levelClass(leaf)}}\" \n          ms-if=\"shallIconShow(leaf, leaf.icon_close, leaf.icon_open)\" \n          ms-class=\"{{computeIconClass(leaf)}}\"></span>\n    <span class=\"button\" \n          ms-attr-id=\"'treeIcon'+leaf.$id\" \n          ms-class-100=\"{{levelClass(leaf)}}\" \n          ms-if=\"shallIconShowReverse(leaf, leaf.icon_close, leaf.icon_open)\" \n          ms-class=\"{{computeIconClass(leaf)}}\"></span>\n  \t<span \n          ms-class-100=\"{{levelClass(leaf)}}\" >{{view.nameShower(leaf)|html}}</span>\n    {{MS_EDIT_HTML}}\n</a>\n<ul class=\"line\" \n    ms-class-100=\"{{levelClass(leaf, 1)}}\" \n    ms-if=\"hasChildren(leaf)\" \n    ms-class-2=\"noline_docu:!optionToBoolen(view.showLine,leaf)\"\n    ms-visible=\"hasChildren(leaf, 'visible')\"\n    ms-attr-id=\"'c'+leaf.$id\">\n\t  {{loadNodes(\"levelGT0\")|html}}\n    </ul>",
nodesTemplate = "<li tabindex=\"0\" \n    ms-class-100=\"{{levelClass(leaf)}}\" \n    ms-attr-id=\"leaf.$id\" \n    ms-visible=\"!leaf.isHidden\"\n    ms-attr-level=\"leaf.level\"\n    ms-attr-timeStamp=\"timeStamp()\" \n    ms-repeat-leaf=\"children\">\n    {{loadLeafTemplate(leaf)|html}}\n</li>";
innerRequire("../live/avalon.live");

module.exports = (
function () {
    var optionKeyToFixMix = {
            view: 1,
            callback: 1,
            data: 1
        }, eventList = [
            'click',
            'dblClick',
            'collapse',
            'expand',
            'select',
            'contextmenu',
            'mousedown',
            'mouseup'
        ], ExtentionMethods = [], undefine = void 0, tplDict = {}, disabelSelectArr = [], callbacks = [], cnt = 0;
    //  tool functions
    function g(id) {
        return document.getElementById(id);
    }
    function guid() {
        return 'tree' + cnt++;
    }
    function tplFormate(tpl, options) {
        return tpl.replace(/\{\{MS_[^\}]+\}\}/g, function (mt) {
            var k = mt.substr(mt.indexOf('_') + 1).replace('}}', '').toLowerCase(), v = tplDict[k] || '';
            if (avalon.isFunction(v))
                return v(tpl, options);
            return v;
        });
    }
    //  树状数据的标准化，mvvm的痛
    function dataFormator(arr, parentLeaf, dataFormated, func, vm) {
        var newArr = [];
        avalon.each(arr, function (index, item) {
            if (!dataFormated) {
                // 拷贝替换
                newArr[index] = itemFormator(avalon.mix({}, item), parentLeaf, vm);
            } else if (item) {
                item.$parentLeaf = parentLeaf;
                item.level = parentLeaf ? parentLeaf.level + 1 : 0;
                func && func(item);
            }
            if (item && item.children && item.children.length) {
                if (!dataFormated) {
                    newArr[index].children = dataFormator(item.children, newArr[index], dataFormated, undefine, vm);
                } else {
                    dataFormator(item.children, item, dataFormated, func, vm);
                }
            }
        });
        return dataFormated ? arr : newArr;
    }
    function formate(item, dict) {
        avalon.each(dict, function (key, value) {
            if (key === 'hasOwnProperty')
                return;
            item[key] = item[value] || '';
        });
    }
    /**
      * 格式化数据，补全字段
      */
    function itemFormator(item, parentLeaf, vm) {
        if (!item)
            return;
        item.level = parentLeaf ? parentLeaf.level + 1 : 0;
        item.isParent = itemIsParent(item);
        formate(item, vm.data.key);
        // 不要可监听
        item.$parentLeaf = parentLeaf || '';
        if (item.isParent) {
            item.open = !!item.open;
        } else {
            item.open = false;
        }
        // 诶，子节点也可能被编辑成父节点...         
        item.children = item.children || [];
        return item;
    }
    function itemIsParent(item) {
        return !!item.isParent || !!item.open || !!(item.children && item.children.length);
    }
    /**  将简单的数组结构数据转换成树状结构
      *  注如果是一个没有子节点的父节点必须加isParent = true，open属性只有父节点有必要有
      *  input array like [
      *      {id: 1, pId: 0, name: xxx, open: boolean, others},// parent node
      *      {id: 11, pId: 1, name: xxx, others}// 子节点
      *  ]
      */
    function simpleDataToTreeData(arr, vm) {
        if (!arr.length)
            return [];
        var dict = vm.data.simpleData, idKey = dict.idKey, pIdKey = dict.pIdKey;
        var prev, tree = [], stack = [], tar, now;
        for (var i = 0, len = arr.length; i < len; i++) {
            now = itemFormator(arr[i], undefine, vm);
            // 前一个节点是直属父节点
            if (prev && prev[idKey] === now[pIdKey]) {
                // 标记父节点
                prev.isParent = true;
                itemFormator(prev, undefine, vm);
                // 防止重复压入堆栈
                if (!tar || tar !== prev) {
                    stack.push(prev);
                    tar = prev;
                }
                tar.children.push(now)    // 当前节点是一个父节点或者没有出现过父节点或者出现的父节点非自己的父节点
;
            } else if (now.isParent || !tar || tar[idKey] !== now[pIdKey]) {
                // 出栈知道找到自己的父节点或者栈空
                while (tar && now[pIdKey] !== tar[idKey]) {
                    stack.pop();
                    tar = stack[stack.length - 1];
                }
                (tar && tar.children || tree).push(now);
                // 明确已知自己是一个父节点，压入栈中
                if (now.isParent) {
                    stack.push(now);
                    tar = now;
                }    // 非父节点以及未确认是否父节点
            } else {
                (tar && tar.children || tree).push(now);
            }
            now.level = stack.length;
            now[pIdKey] = now[pIdKey] || 0;
            prev = now;
        }
        return tree;
    }
    function arrayIndex(arr, filter) {
        for (var i = 0, len = arr.length; i < len; i++) {
            if (filter(arr[i]))
                return i;
        }
        return -1;
    }
    function upperFirstLetter(str) {
        return str.replace(/^[a-z]{1}/g, function (mat) {
            return mat.toUpperCase();
        });
    }
    var commonInit = true;
    var widget = avalon.ui.tree = function (element, data, vmodels) {
            if (commonInit) {
                avalon.bind(document.body, 'selectstart', disabelSelect);
                avalon.bind(document.body, 'drag', disabelSelect);
                commonInit = false;
            }
            var options = data.treeOptions, cache = {};
            // 缓存节点
            //方便用户对原始模板进行修改,提高定制性
            options.template = options.getTemplate(template, options);
            options.parentTemplate = options.getTemplate(parentTemplate, options, 'parent');
            options.leafTemplate = options.getTemplate(leafTemplate, options, 'leaf');
            options.nodesTemplate = options.getTemplate(nodesTemplate, options, 'nodes');
            var newOpt = { $guid: guid() }, dataBak;
            avalon.mix(newOpt, options);
            avalon.each(optionKeyToFixMix, function (key) {
                avalon.mix(true, newOpt[key], avalon.mix(true, {}, widget.defaults[key], newOpt[key]));
            });
            dataBak = options.children;
            if (newOpt.data.simpleData.enable) {
                newOpt.children = simpleDataToTreeData(newOpt.children, newOpt);
            } else {
                newOpt.children = dataFormator(newOpt.children, undefine, undefine, undefine, newOpt);
            }
            newOpt.template = tplFormate(newOpt.template, newOpt).replace(/\n/g, '').replace(/>[\s]+</g, '><');
            newOpt.parentTemplate = tplFormate(newOpt.parentTemplate, newOpt).replace(/\n/g, '').replace(/>[\s]+</g, '><');
            newOpt.leafTemplate = tplFormate(newOpt.leafTemplate, newOpt).replace(/\n/g, '').replace(/>[\s]+</g, '><');
            newOpt.nodesTemplate = tplFormate(newOpt.nodesTemplate, newOpt).replace(/\n/g, '').replace(/>[\s]+</g, '><');
            var vmodel = avalon.define(data.treeId, function (vm) {
                    // mix插件配置
                    avalon.each(ExtentionMethods, function (i, func) {
                        func && func(vm, vmodels);
                    });
                    avalon.mix(vm, newOpt);
                    vm.widgetElement = element;
                    vm.widgetElement.innerHTML = vm.template;
                    vm.rootElement = element.getElementsByTagName('*')[0];
                    vm.$skipArray = [
                        'widgetElement',
                        'template',
                        'callback',
                        'rootElement'
                    ];
                    vm._select = [];
                    var inited;
                    vm.$init = function (continueScan) {
                        if (inited)
                            return;
                        inited = true;
                        dataFormator(vm.children, undefine, '\u6784\u5EFA\u7236\u5B50\u8282\u70B9\u8854\u63A5\u5173\u7CFB', function (leaf) {
                            cache[leaf.$id] = leaf;
                        }, vm);
                        if (!vm.view.txtSelectedEnable && navigator.userAgent.match(/msie\s+[5-8]/gi)) {
                            disabelSelectArr.push(vm.widgetElement);
                        }
                        if (continueScan) {
                            continueScan();
                        } else {
                            avalon.log('avalon\u8BF7\u5C3D\u5FEB\u5347\u52301.3.7+');
                            avalon.scan(element, [vmodel].concat(vmodels));
                            if (typeof options.onInit === 'function') {
                                options.onInit.call(element, vmodel, options, vmodels);
                            }
                        }
                    };
                    vm.$remove = function () {
                        element.innerHTML = element.textContent = '';
                        cache = null;
                        vm._select = null;
                    };
                    vm.computeIconClass = function (leaf) {
                        return (leaf.iconSkin ? leaf.iconSkin + '_' : '') + 'ico_' + (leaf.isParent ? vm.hasClassOpen(leaf, 'ignoreNoline') ? 'open' : 'close' : 'docu');
                    };
                    vm.shallIconShow = function (leaf) {
                        if (!vm.exprAnd(leaf, vm.view.showIcon))
                            return false;
                        return vm.exprAnd.apply(null, arguments);
                    };
                    vm.shallIconShowReverse = function (leaf) {
                        if (!vm.exprAnd(leaf, vm.view.showIcon))
                            return false;
                        return !vm.exprAnd.apply(null, arguments);
                    };
                    vm.computeIcon = function (leaf) {
                        var ico = leaf.isParent ? vm.hasClassOpen(leaf) ? leaf.icon_open || '' : leaf.icon_close || '' : leaf.icon ? leaf.icon : '';
                        if (ico) {
                            return 'url("' + ico + '") 0 0 no-repeat';
                        }
                        return '';
                    };
                    vm.computeLineClass = function (leaf, first, last) {
                        var status = leaf.open ? 'open' : 'close', pos = first && !leaf.level ? 'roots' : last ? 'bottom' : 'center';
                        if (!vm.optionToBoolen(vm.view.showLine, leaf))
                            pos = 'noline';
                        return pos + '_' + status;
                    };
                    vm.levelClass = function (leaf, adding) {
                        var adding = adding || 0;
                        return 'level' + ((leaf.level || 0) + adding);
                    };
                    // 展开相关
                    // 展开
                    vm.hasClassOpen = function (leaf, noline) {
                        if (vm.optionToBoolen(vm.view.showLine, leaf)) {
                            return leaf.isParent && leaf.open && noline != 'noline';
                        } else {
                            return leaf.isParent && leaf.open && noline;
                        }
                    };
                    vm.toggleOpenStatue = function (event, leaf) {
                        var leaf = leaf || event.leaf;
                        if (!leaf)
                            return;
                        leaf.open ? vm.excute('collapse', event, leaf, 'collapse') : vm.excute('expand', event, leaf, 'expand');
                    };
                    /**
             * @interface 展开leaf节点
             * @param {Object} 指定节点，也可以是{leaf:leaf} or leaf
             * @param {boolen} 表示是否迭代所有子孙节点
             */
                    vm.expand = function (arg, all, openOrClose) {
                        var leaf = arg && arg.leaf || arg;
                        if (!leaf) {
                            leaf = vm;
                        } else {
                            if (!leaf.isParent)
                                return;
                            leaf.open = !openOrClose;
                        }
                        var children = leaf.children, leafDom = g(leaf.$id);
                        // 节点未渲染，或不可见，向上溯源处理
                        if (!openOrClose && (!leafDom || !leafDom.scrollHeight))
                            vm.cVisitor(leaf, function (node) {
                                if (node == vm)
                                    return;
                                node.open = true;
                            });
                        // 互斥
                        if (vm.view.singlePath && !openOrClose) {
                            vm.brotherVisitor(leaf, function (item, opt) {
                                if (item != leaf && item.open)
                                    vm.excute('collapse', arg.e, item, 'collapse');
                            });
                        }
                        if (all && children)
                            avalon.each(children, function (i, item) {
                                vm.expand(item, 'all', openOrClose);
                            });
                    };
                    /**
             * @interface 展开 / 折叠 全部节点，返回true表示展开，false表示折叠，此方法不会触发 beforeExpand / onExpand 和 beforeCollapse / onCollapse 事件回调函数
             * @param {arr} true 表示 展开 全部节点，false 表示 折叠 全部节点
             */
                    vm.expandAll = function (openOrClose) {
                        openOrClose ? vm.expand(undefine, 'all') : vm.collapse(undefine, 'all');
                        return openOrClose;
                    };
                    /**
             * @interface 折叠leaf节点的子节点
             * @param {Object} 指定节点，也可以是{leaf:leaf} or leaf
             * @param {boolen} 表示是否迭代所有子孙节点
             */
                    vm.collapse = function (leaf, all, event) {
                        vm.expand(leaf, all, 'close', event);
                    };
                    vm.hasChildren = function (leaf, visible) {
                        // 有有效子节点
                        var renderStatus = leaf.children && leaf.children.length && vm.hasClassOpen(leaf, 'ignoreNoline');
                        if (visible) {
                            return renderStatus;
                        } else {
                            return renderStatus || g('c' + leaf.$id);
                        }
                    };
                    vm.loadLeafTemplate = function (leaf) {
                        if (leaf.isParent)
                            return vm.parentTemplate;
                        return vm.leafTemplate;
                    };
                    vm.loadNodes = function (levelGT0) {
                        if (!levelGT0)
                            return vm.nodesTemplate;
                        return vm.nodesTemplate.replace(/leaf=\"children\"/g, 'leaf="leaf.children"');
                    };
                    /**
             * @interface 隐藏某个节点
             * @param {Object} 指定节点，也可以是{leaf:leaf} or leaf
             */
                    vm.hideNode = function (leaf) {
                        leaf = leaf && leaf.leaf || leaf;
                        vm.hideNodes([leaf]);
                    };
                    /**
             * @interface 隐藏节点集合
             * @param {Array} 节点集合
             */
                    vm.hideNodes = function (nodes, flag) {
                        flag = flag === undefine ? false : flag;
                        avalon.each(nodes, function (i, node) {
                            node.isHidden = flag;
                        });
                    };
                    /**
             * @interface 显示某个节点
             * @param {Object} 指定节点，也可以是{leaf:leaf} or leaf
             */
                    vm.showNode = function (node) {
                        node = node && node.leaf || node;
                        vm.showNodes([node]);
                    };
                    /**
             * @interface 显示节点集合
             * @param {Array} 节点集合
             */
                    vm.showNodes = function (nodes) {
                        vm.hideNodes(nodes, true);
                    };
                    /**
             * @interface 中序向下遍历树，返回一个数组
             * @param {Object} 起点，为空表示根
             * @param {Function} 递归操作，传递参数是当前节点，options，如果!!return != false，则将返回压入res
             * @param {Function} 终止遍历判断，传递参数是res,当前节点,起点，return true则终止遍历
             * @param {Array} 存储结果的数组，为空则会内部声明一个
             * @param {Object} 用于辅助func的参数
             */
                    vm.visitor = function (startLeaf, func, endFunc, res, options) {
                        var startLeaf = startLeaf || vm, res = res || [];
                        if (startLeaf != vm) {
                            var data = func(startLeaf, options);
                            data && res.push(data);
                            if (endFunc && endFunc(res, startLeaf, startLeaf))
                                return res;
                        }
                        if (startLeaf.children && startLeaf.children.length) {
                            for (var i = 0, children = startLeaf.children, len = children.length; i < len; i++) {
                                if (endFunc && endFunc(res, children[i], startLeaf))
                                    break;
                                vm.visitor(children[i], func, endFunc, res, options);
                            }
                        }
                        return res;
                    };
                    /**
             * @interface 向上溯源，返回一个数组
             * @param {Object} 起点
             * @param {Function} 递归操作，传递参数是当前节点，options，如果!!return != false，则将返回压入res
             * @param {Function} 终止遍历判断，传递参数是res,当前节点,起点，return true则终止遍历
             * @param {Array} 存储结果的数组，为空则会内部声明一个
             * @param {Object} 用于辅助func的参数
             */
                    vm.cVisitor = function (startLeaf, func, endFunc, res, options) {
                        var res = res || [];
                        if (startLeaf) {
                            var data = func(startLeaf, options);
                            data && res.push(data);
                            // 结束溯源
                            if (endFunc && endFunc(res, startLeaf, startLeaf))
                                return res;
                            // 继续向上
                            if (startLeaf.$parentLeaf)
                                vm.cVisitor(startLeaf.$parentLeaf, func, endFunc, res, options);
                        }
                        return res;
                    };
                    /**
             * @interface 同级访问，返回一个数组
             * @param {Object} 起点
             * @param {Function} 递归操作，传递参数是当前节点，options，如果!!return != false，则将返回压入res
             * @param {Function} 终止遍历判断，传递参数是res,当前节点,起点，return true则终止遍历
             * @param {Array} 存储结果的数组，为空则会内部声明一个
             * @param {Object} 用于辅助func的参数
             */
                    vm.brotherVisitor = function (startLeaf, func, endFunc, res, options) {
                        var res = res || [];
                        if (startLeaf) {
                            var data, brothers = vm.getBrothers(startLeaf);
                            for (var i = 0, len = brothers.length; i < len; i++) {
                                data = func && func(brothers[i], options);
                                data && res.push(data);
                                // endCheck
                                if (endFunc && endFunc(res, brothers[i], startLeaf))
                                    break;
                            }
                        }
                        return res;
                    };
                    vm.getBrothers = function (leaf) {
                        if (!leaf)
                            return [];
                        return leaf.$parentLeaf ? leaf.$parentLeaf.children : vm.children;
                    };
                    /**
             * @interface 根据$id快速获取节点 JSON 数据对象
             * @param {Object} $id，avalon生成数据的pid
             */
                    vm.getNodeByTId = function (id) {
                        return cache[id];
                    };
                    /**
             * @interface 获取某节点在同级节点中的序号
             * @param {Object} 指定的节点
             */
                    vm.getNodeIndex = function (leaf) {
                        var c = vm.getBrothers(leaf);
                        for (var i = 0, len = c.length; i < len; i++) {
                            if (c[i] === leaf)
                                return i;
                        }
                        return -1;
                    };
                    /**
             * @interface 获取全部节点数据，如果指定了leaf则返回leaf的所有子节点，不包括leaf
             * @param {Object} 指定节点
             */
                    vm.getNodes = function (leaf) {
                        return leaf ? leaf.children : vm.children;
                    };
                    /**
             * @interface 根据自定义规则搜索节点数据 JSON 对象集合 或 单个节点数据，不包含指定的起始节点
             * @param {Function} 自定义过滤器函数 function filter(node) {...}
             * @param isSingle = true 表示只查找单个节点 !!isSingle = false 表示查找节点集合
             * @param 可以指定在某个父节点下的子节点中搜索
             * @param 用户自定义的数据对象，用于 filter 中进行计算
             */
                    vm.getNodesByFilter = function (fitler, isSingle, startLeaf, options) {
                        return vm.visitor(startLeaf, function (node, opt) {
                            if (node === startLeaf)
                                return;
                            if (filter && filter(node, opt))
                                return node;
                        }, isSingle ? function (data, node) {
                            return data.length > 0;
                        } : false, [], options);
                    };
                    /**
             * @interface 根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象，不包含指定的起始节点
             * @param {String} 需要精确匹配的属性名称
             * @param 需要精确匹配的属性值，可以是任何类型，只要保证与 key 指定的属性值保持一致即可
             * @param 可以指定在某个父节点下的子节点中搜索
             */
                    vm.getNodeByParam = function (key, value, startLeaf) {
                        return vm.getNodesByParam(key, value, startLeaf, function (data, node) {
                            return data.length > 0;
                        });
                    };
                    /**
             * @interface 根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象集合，不包含指定的起始节点
             * @param {String} 需要精确匹配的属性名称
             * @param 需要精确匹配的属性值，可以是任何类型，只要保证与 key 指定的属性值保持一致即可
             * @param 可以指定在某个父节点下的子节点中搜索
             */
                    vm.getNodesByParam = function (key, value, startLeaf, endFunc) {
                        return vm.visitor(startLeaf, function (leaf) {
                            if (leaf === startLeaf)
                                return;
                            return leaf[key] === value ? leaf : false;
                        }, endFunc, []);
                    };
                    /**
             * @interface 根据节点数据的属性搜索，获取条件模糊匹配的节点数据 JSON 对象集合，不包含指定的起始节点
             * @param 需要模糊匹配的属性值，用于查找的时候执行正则匹配，不是正则表达式
             * @param 可以指定在某个父节点下的子节点中搜索
             */
                    vm.getNodesByParamFuzzy = function (key, value, startLeaf) {
                        return vm.visitor(startLeaf, function (leaf) {
                            if (leaf === startLeaf)
                                return;
                            return (leaf[key] + '').match(new RegExp(value, 'g')) ? leaf : false;
                        }, false, []);
                    };
                    /**
             * @interface 获取节点相邻的前一个节点
             * @param {Object} 指定的节点
             */
                    vm.getPreNode = function (leaf, next) {
                        var allMates = vm.getBrothers(leaf), index = vm.getNodeIndex(leaf);
                        return index > -1 ? allMates[next ? index + 1 : index - 1] : false;
                    };
                    /**
             * @interface 获取节点相邻的后一个节点
             * @param {Object} 指定节点
             */
                    vm.getNextNode = function (leaf) {
                        return vm.getPreNode(leaf, 'next');
                    };
                    /**
             * @interface 获取节点的父节点
             * @param {Object} 指定的节点
             */
                    vm.getParentNode = function (leaf) {
                        return leaf && leaf.$parentLeaf;
                    };
                    /**
             * @interface 添加多个节点，返回被添加的节点
             * @param {Object} 指定的父节点，如果增加根节点，请设置 parentNode 为 null 即可
             * @param {Array} 需要增加的节点数据 JSON 对象集合
             * @param 设定增加节点后是否自动展开父节点。isSilent = true 时，不展开父节点，其他值或缺省状态都自动展开。
             */
                    vm.addNodes = function (parentLeaf, nodes, isSilent) {
                        return vm.excute('nodeCreated', { isSilent: isSilent }, parentLeaf, function () {
                            // 数据构建
                            if (vm.data.simpleData.enable && nodes instanceof Array) {
                                nodes = vm.transformTozTreeNodes(nodes);
                            } else {
                                nodes = nodes instanceof Array ? nodes : [nodes];
                            }
                            nodes = dataFormator(nodes, parentLeaf, undefine, undefine, vm);
                            // 这里node依旧没有$id属性
                            // dataFormator(nodes, parentLeaf, "构建父子节点衔接关系", undefine, vm)
                            if (parentLeaf)
                                parentLeaf.isParent = true;
                            // open的监听可能没有捕捉到
                            if (!isSilent && parentLeaf)
                                parentLeaf.open = true;
                            var arr = vm.getNodes(parentLeaf), len = arr.length;
                            arr.pushArray(nodes);
                            var addNodes = arr.slice(len) || [];
                            // 构建，只有在nodes被push到数组之后才会拥有$id,$events等属性
                            dataFormator(addNodes, parentLeaf, '\u6784\u5EFA\u7236\u5B50\u8282\u70B9\u8854\u63A5\u5173\u7CFB', undefine, vm);
                            // 更具$id属性build cache
                            avalon.each(addNodes, function (i, leaf) {
                                cache[leaf.$id] = leaf;
                            });
                            return addNodes;
                        });
                    };
                    /**
             * @interface 将简单 Array 格式数据转换为 tree 使用的标准 JSON 嵌套数据格式
             * @param 需要被转换的简单 Array 格式数据 或 某个单独的数据对象
             */
                    vm.transformTozTreeNodes = function (data) {
                        if (!(data instanceof Array))
                            data = [data];
                        return simpleDataToTreeData(data, vm);
                    };
                    /**
             * @interface 将 tree 使用的标准 JSON 嵌套格式的数据转换为简单 Array 格式
             * @param  需要被转换的 tree 节点数据对象集合 或 某个单独节点的数据对象
             * @param {Function} 格式化过滤器函数
             */
                    vm.transformToArray = function (data, filter, res) {
                        var res = res || [], ignoreKey = arguments[3], dict = vm.data.simpleData;
                        if (!ignoreKey) {
                            // 忽略的辅助性key
                            ignoreKey = {};
                            avalon.each(avalon.ui.tree.leafIgnoreField, function (i, key) {
                                ignoreKey[key] = true;
                            });
                        }
                        if (data instanceof Array) {
                            avalon.each(data, function (i, node) {
                                vm.transformToArray(node, filter, res, ignoreKey);
                            });
                        } else if (data) {
                            var item = {}, model = data.$model;
                            for (var i in model) {
                                // ignore ^$
                                if (i.indexOf('$') === 0 || ignoreKey[i] || i === 'children' || model[i] == '')
                                    continue;
                                var key = dict[i + 'Key'] ? dict[i + 'Key'] : i;
                                item[key] = model[i];
                            }
                            res.push(filter ? filter(item) : item);
                            if (data.isParent) {
                                vm.transformToArray(data.children, filter, res, ignoreKey);
                            }
                        }
                        return res;
                    };
                    /**
             * @interface 重置树的状态
             * @param {Array} 指定用来重置的数据，为空表示用第一次初始化时候的数据来重置
             */
                    vm.reset = function (children) {
                        vm.children.clear();
                        vm.addNodes(undefine, children || dataBak);
                    };
                    /**
             * @interface 复制节点，返回clone后的节点
             * @param {Object} 参考节点
             * @param {Object} 需要被复制的节点数据
             * @param 复制到目标节点的相对位置 "inner"：成为子节点，"prev"：成为同级前一个节点，"next"：成为同级后一个节点
             * @param 设定复制节点后是否自动展开父节点，isSilent = true 时，不展开父节点，其他值或缺省状态都自动展开
             */
                    vm.copyNode = function (targetLeaf, leaf, moveType, isSilent) {
                        var newLeaf = avalon.mix({}, leaf.$model);
                        vm.moveNode(targetLeaf, newLeaf, moveType, isSilent);
                        return newLeaf;
                    };
                    /**
             * @interface 移动节点，目测这个是相当费性能的。。。，返回被移动的节点
             * @param {Object} 参考节点
             * @param {Object} 被移动的节点
             * @param 指定移动到目标节点的相对位置"inner"：成为子节点，"prev"：成为同级前一个节点，"next"：成为同级后一个节点
             * @param 设定移动节点后是否自动展开父节点，isSilent = true 时，不展开父节点，其他值或缺省状态都自动展开
             */
                    vm.moveNode = function (targetLeaf, leaf, moveType, isSilent) {
                        var parLeaf = leaf.$parentLeaf || vm, indexA = arrayIndex(parLeaf.children, function (item) {
                                return item == leaf || item == leaf.$model;
                            }), level = leaf.level;
                        if (indexA < 0)
                            return;
                        if (!targetLeaf)
                            targetLeaf = vm;
                        if (targetLeaf == vm)
                            moveType = 'inner';
                        // 移除
                        parLeaf.children.splice(indexA, 1);
                        if (moveType == 'inner') {
                            // 注入
                            if (!targetLeaf.isParent && targetLeaf != vm)
                                targetLeaf.isParent = true;
                            leaf.$parentLeaf = targetLeaf == vm ? false : targetLeaf;
                            leaf.level = leaf.$parentLeaf ? leaf.$parentLeaf.level + 1 : 0;
                            targetLeaf.children.push(leaf);
                        } else {
                            moveType = moveType === 'prev' ? 'prev' : 'next';
                            var parLeafB = targetLeaf.$parentLeaf, tarArray = parLeafB ? parLeafB.children : vm.children, indexB = arrayIndex(tarArray, function (item) {
                                    return item == targetLeaf || item == targetLeaf.$model;
                                });
                            // 挂载到新的父节点下
                            leaf.$parentLeaf = parLeafB;
                            leaf.level = targetLeaf.level;
                            tarArray.splice(indexB, 0, leaf);
                        }
                        if (leaf.$parentLeaf)
                            vm.expand(leaf.$parentLeaf);
                        // 层级变化了
                        if (level != leaf.level)
                            vm.visitor(leaf, function (node) {
                                if (node != leaf)
                                    node.level = node.$parentLeaf.level + 1;
                            });
                        // 展开父节点
                        if (!isSilent && node.$parentLeaf)
                            node.$parentLeaf.open = true;
                        return node;
                    };
                    // cache管理
                    vm.removeCacheById = function (id) {
                        delete cache[id];
                    };
                    //选中相关，可能是一个性能瓶颈，之后可以作为优化的点
                    vm.hasClassSelect = function (leaf) {
                        for (var i = 0, len = vm._select.length; i < len; i++) {
                            if (vm._select[i].$id === leaf.$id)
                                return i + 1;
                        }
                        return 0;
                    };
                    vm._getSelectIDs = function (leaf) {
                        var total = 0, dict = {};
                        if (leaf) {
                            vm.visitor(leaf, function (leaf) {
                                // 是否被选中
                                if (avalon(g(leaf.$id).getElementsByTagName('a')[0]).hasClass('curSelectedNode')) {
                                    dict[leaf.$id] = 1;
                                    total++;
                                }
                            }, false);
                        }
                        return {
                            total: total,
                            dict: dict
                        };
                    };
                    // 取消节点的选中状态
                    vm.selectFun = function (event, all) {
                        var leaf = event.leaf, event = event.e;
                        if (!leaf.url)
                            event.preventDefault && event.preventDefault();
                        if (all) {
                            var _s = vm._select, info = vm._getSelectIDs(leaf), total = count = info.total, dict = info.dict;
                            // 删除优化
                            if (total > 1)
                                _s.$unwatch();
                            for (var i = 0; i < _s.length; i++) {
                                var k = _s[i];
                                if (dict[k.$id]) {
                                    _s.splice(i, 1);
                                    i--;
                                    count--;
                                    if (count == 1 && total > 1)
                                        _s.$watch();
                                }
                            }
                            res = dict = null;
                        } else {
                            var id = leaf.$id, index = vm.hasClassSelect(leaf);
                            if (index) {
                                vm._select.splice(index - 1, 1);
                            } else {
                                if (vm.ctrlCMD(event, leaf)) {
                                    vm._select.push(leaf);
                                } else {
                                    vm._select = [leaf];
                                }
                            }
                        }
                    };
                    /**
             * @interface 将指定的节点置为选中状态，无任何返回值
             * @param {object} 指定的节点，不能为空
             * @param 是否保留原来选中的节点，否则清空原来选中的节点，当view.selectedMulti为false的时候，该参数无效，一律清空
             */
                    vm.selectNode = function (leaf, appendOrReplace) {
                        if (vm.view.selectedMulti === false)
                            appendOrReplace = false;
                        if (appendOrReplace)
                            vm._select.push(leaf);
                        else
                            vm._select = [leaf];
                    };
                    /**
             * @interface 获取以指定节点为起点，以数组形式返回所有被选中的节点
             * @param {object} 指定的节点，为空的时候表示由根开始查找
             */
                    vm.getSelectedNodes = function (startLeaf) {
                        if (!startLeaf)
                            return vm._select;
                        var info = vm._getSelectIDs(startLeaf), ids = info.dict, res = [], _s = vm._select;
                        for (var i = 0, len = _s.length; i < len; i++) {
                            var k = _s[i].$id;
                            if (ids[k])
                                res.push(_s[i]);
                        }
                        return res;
                    };
                    /**
             * @interface 取消选中子节点的选中状态，无任何返回值
             * @param {object} 指定的节点，为空的时候表示取消所有
             */
                    vm.cancelSelectedNode = function (leaf) {
                        vm._select.remove(leaf);
                    };
                    /**
             * @interface 取消节点上所有选中子节点的选中状态，无任何返回值
             * @param {object} 通过arg.leaf 指定的节点
             */
                    vm.cancelSelectedChildren = function (arg) {
                        if (!leaf) {
                            // clear all
                            vm._select.clear();
                        } else {
                            vm.selectFun(arg, 'all');
                        }
                    };
                    vm.ctrlCMD = function (event, leaf) {
                        return event.ctrlKey && vm.optionToBoolen(vm.view.selectedMulti, leaf, event);
                    };
                    vm.optionToBoolen = function () {
                        var arg = arguments[0];
                        if (!avalon.isFunction(arg))
                            return arg;
                        return arg.apply(vm, [].slice.call(arguments, 1));
                    };
                    //event
                    // 鼠标事件相关
                    vm.liveContextmenu = function (event) {
                        vm.$fire('e:contextmenu', {
                            e: event,
                            vmodel: vm,
                            vmodels: vmodels
                        });
                    };
                    vm.liveClick = function (event) {
                        vm.$fire('e:click', {
                            e: event,
                            vmodel: vm,
                            vmodels: vmodels
                        });
                    };
                    // tool function
                    // 事件分发中心
                    vm.excute = function (cmd, event, leaf, action) {
                        var evt = cmd, eventName = upperFirstLetter(cmd), beforeFunc = vm.callback['before' + eventName], onFunc = vm.callback['on' + eventName], res, arg = {
                                e: event,
                                leaf: leaf,
                                vm: vm,
                                vmodels: vmodels,
                                preventDefault: function () {
                                    this.cancel = true;
                                }
                            }, ele = event ? event.srcElement || event.target : null, callbackEnabled = !event || !event.cancelCallback;
                        // 执行前检测，返回
                        vmodel.$fire('e:before' + eventName, arg);
                        if (callbackEnabled) {
                            // callback里面可能只preventDefault
                            if (arg.cancel || beforeFunc && beforeFunc.call(ele, arg) === false || arg.cancel) {
                                arg.preventDefault();
                                return;
                            }
                        }
                        if (action) {
                            if (!(cmd === 'dblClick' && !vm.view.dblClickExpand)) {
                                if (!avalon.isFunction(action))
                                    action = vm[action];
                                if (avalon.isFunction(action))
                                    res = action.call(ele, arg);
                            }
                        }
                        if (res !== undefine)
                            arg.res = res;
                        // 被消除
                        if (arg.cancel)
                            return;
                        vmodel.$fire('e:' + cmd, arg);
                        if (callbackEnabled) {
                            onFunc && onFunc.call(ele, arg);
                        }
                        return res;
                    };
                    vm.exprAnd = function () {
                        var len = arguments.length, step = 1, res = step, leaf = arguments[0];
                        while (step < len) {
                            res = res && vm.optionToBoolen(arguments[step], leaf);
                            step++;
                        }
                        return res;
                    };
                    vm.timeStamp = function () {
                        return Date.now();
                    };
                    vm.toggleStatus = function () {
                        vm.toggle = !vm.toggle;
                        return vm.toggle;
                    };
                });
            // 展开父节点
            vmodel.$watch('e:nodeCreated', function (arg) {
                if (arg && arg.e && arg.e.isSilent)
                    return;
                var leaf = arg.leaf;
                if (leaf) {
                    leaf.isParent = true;
                    vmodel.expand(leaf);
                }
            });
            avalon.each(callbacks, function (i, func) {
                if (avalon.isFunction(func))
                    func(vmodel, vmodels);
            });
            return vmodel;
        };
    function disabelSelect(event) {
        var src = event.srcElement;
        for (var i = 0, len = disabelSelectArr.length; i < len; i++) {
            if (avalon.contains(disabelSelectArr[i], src) && src.type != 'text') {
                event.preventDefault();
                return;
            }
        }
    }
    widget.defaults = {
        toggle: true,
        view: {
            //@config {Object} 视觉效果相关的配置
            showLine: true,
            //@config 是否显示连接线
            dblClickExpand: true,
            //@config 是否双击变化展开状态
            selectedMulti: true,
            //@config true / false 分别表示 支持 / 不支持 同时选中多个节点
            txtSelectedEnable: false,
            //@config 节点文本是否可选中
            autoCancelSelected: false,
            singlePath: false,
            //@config 同一层级节点展开状态是否互斥
            showIcon: true,
            //@config zTree 是否显示节点的图标
            showTitle: true,
            //@config 分别表示 显示 / 隐藏 提示信息
            showSwitch: true,
            //@config 显示折叠展开ico
            nameShower: function (leaf) {
                return leaf.name;
            }    //@config 节点显示内容过滤器，默认是显示leaf.name
        },
        data: {
            //@config {Object} 数据相关的配置
            simpleData: {
                //@config {Object} 简单数据的配置
                idKey: 'id',
                //@config json数据里作为本身索引的字段映射
                pIdKey: 'pId',
                //@config json数据里作为父节点索引的字段映射
                enable: false    //@config 是否启用简单数据模式
            },
            key: {
                //@config {Object} json数据的字段映射
                children: 'children',
                //@config {Array} 子节点字段映射
                name: 'name',
                //@config 节点名字字段映射
                title: '',
                //@config 节点title字段映射，为空的时候，会去name字段映射
                url: 'url'    //@config 节点链接地址字段映射
            }
        },
        //@config {Object} 回调相关的配置
        callback: {},
        /**
         * @config 完成初始化之后的回调
         * @param vmodel {vmodel} vmodel
         * @param options {Object} options
         * @vmodels {Array} vmodels
         */
        onInit: avalon.noop,
        /**
         * @config 模板函数,方便用户自定义模板
         * @param str {String} 默认模板
         * @param opts {Object} vmodel
         * @returns {String} 新模板
         */
        getTemplate: function (tmpl, opts, tplName) {
            return tmpl;
        },
        $author: 'skipper@123'
    };
    avalon.each(eventList, function (i, item) {
        if (item == 'contextmenu')
            item = 'RightClick';
        widget.defaults.callback['on' + upperFirstLetter(item)] = avalon.noop;
        widget.defaults.callback['before' + upperFirstLetter(item)] = false;
    });
    /**
     * @interface avalon.ui.tree.AddExtention(fixNames, addingDefaults, addingMethodFunc, watchEvents)扩展tree
     */
    avalon.ui.tree.AddExtention = function (fixNames, addingDefaults, addingMethodFunc, watchEvents, tplHooks, callback) {
        if (fixNames)
            avalon.each(fixNames, function (i, item) {
                optionKeyToFixMix[item] = item;
            });
        if (addingDefaults)
            avalon.mix(true, widget.defaults, addingDefaults);
        if (addingMethodFunc)
            ExtentionMethods.push(addingMethodFunc);
        if (watchEvents)
            eventList = eventList.concat(watchEvents);
        if (tplHooks)
            avalon.mix(tplDict, tplHooks);
        if (callback)
            callbacks.push(callback);
    };
    avalon.ui.tree.leafIgnoreField = ['level']    // tree转化成数据的时候，忽略的字段，所有以$开头的，以及这个数组内的
;
}
)();
},{"../live/avalon.live":32,"avalon":2}],69:[function(innerRequire,module,exports){
innerRequire("./avalon.tree");

module.exports = (
function () {
    avalon.treeMenu = {
        view: {
            showLine: false,
            // 不展示树的连接线
            dblClickExpand: false,
            // 双击不改变节点的展开状态
            singlePath: true,
            // 节点间展开状态互斥
            showIcon: function (leaf) {
                if (leaf.level < 1)
                    return true;
            },
            showSwitch: function (leaf) {
                if (leaf.level > 0)
                    return true;
            }
        },
        callback: {
            // 改写click事件
            beforeClick: function (e) {
                var leaf = e.leaf, vmodel = e.vm;
                e.e && e.e.preventDefault();
                if (!leaf.isParent)
                    return;
                vmodel.expand(leaf, false);
            }
        },
        // 插入关闭展开按钮
        getTemplate: function (tpl, options, name) {
            if (name === 'nodes')
                return tpl.replace('<li', '<li ms-class="oni-leaf-selected:hasClassSelect(leaf)" ');
            if (!name)
                return tpl + '<a href="#" class="oni-menu-tree-swicth" ms-click="toggleMenuTree($event, widgetElement, $guid)" ms-class="oni-menu-tree-swicth-off:!toggle"></a>';
            return tpl;
        },
        toggleMenuTree: function (event, widgetElement, $guid) {
            event && event.preventDefault && event.preventDefault();
            var ele = avalon(widgetElement);
            if (ele.hasClass('oni-menu-tree-hidden')) {
                ele.removeClass('oni-menu-tree-hidden');
                ele.removeClass('oni-state-hover');
            } else {
                ele.addClass('oni-menu-tree-hidden');
            }
        },
        onInit: function (vmodel) {
            var ele = avalon(this);
            ele.bind('mouseenter', function (e) {
                if (ele.hasClass('oni-menu-tree-hidden'))
                    ele.addClass('oni-state-hover');
            });
            ele.bind('mouseleave', function (e) {
                ele.removeClass('oni-state-hover');
            });
        }
    };
}
)();
},{"./avalon.tree":68}],70:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");

module.exports = (
function () {
    var defaults = {
            distanceToRight: 50,
            distanceToBottom: 120,
            title: '\u56DE\u5230\u9876\u90E8',
            width: 60,
            height: 60,
            animate: false,
            toggle: false,
            backgroundUrl: 'http://source.qunarzz.com/general/oniui/uptop/up.png'
        }, template = '<div ms-css-right=\'distanceToRight\' ms-css-bottom=\'distanceToBottom\' ms-title=\'title\' ms-click=\'goTop\' ms-css-width=\'width\' ms-css-height=\'height\' ms-visible=\'toggle\' class=\'ui-icon\'></div>', element = avalon.parseHTML(template).firstChild, $element = avalon(element), $document = avalon(document), vmodel = {};
    document.body.appendChild(element);
    var goTop = avalon.bindingHandlers.uptop = function (data, vmodels) {
            var args = data.value.match(avalon.rword) || [
                    '$',
                    'uptop'
                ], ID = args[0].trim(), opts = args[1], model, vmOptions, style = {}, options = {};
            if (ID && ID != '$') {
                model = avalon.vmodels[ID];
                //如果指定了此VM的ID
                if (!model) {
                    return;
                }
            }
            data.element.removeAttribute('ms-uptop');
            if (!model) {
                //如果使用$或绑定值为空，那么就默认取最近一个VM
                model = vmodels.length ? vmodels[0] : {};
            }
            if (model && typeof model[opts] === 'object') {
                //如果指定了配置对象，并且有VM
                vmOptions = model[opts];
                if (vmOptions.$model) {
                    vmOptions = vmOptions.$model;
                }
            }
            options = avalon.mix({}, defaults, vmOptions || {}, data[opts] || {}, avalon.getWidgetData(data.element, 'uptop'));
            vmodel = avalon.define('uptop', function (vm) {
                avalon.mix(vm, options);
                vm.$skipArray = ['timeId'];
                vm.timeId = 0;
                vm.goTop = function () {
                    var scrollTop = $document.scrollTop();
                    if (options.animate) {
                        vmodel.timeId = setTimeout(function () {
                            window.scrollBy(0, -100);
                            vmodel.goTop();
                        }, 200);
                        if (scrollTop == 0) {
                            clearTimeout(vmodel.timeId);
                        }
                    } else {
                        window.scrollTo(0, 0);
                    }
                };
            });
            style = {
                position: 'fixed',
                'background-image': 'url(' + vmodel.backgroundUrl + ')',
                cursor: 'pointer'
            };
            $element.css(style);
            avalon.scan(element, vmodel);
        };
    avalon(document).bind('scroll', throttle(scrollCallback, 100, 200));
    function throttle(fn, delay, mustRunDelay, args) {
        var timer = null;
        var t_start;
        return function () {
            var context = this, t_curr = +new Date();
            clearTimeout(timer);
            if (!t_start) {
                t_start = t_curr;
            }
            if (t_curr - t_start >= mustRunDelay) {
                fn.apply(context, args);
                t_start = t_curr;
            } else {
                timer = setTimeout(function () {
                    fn.apply(context, args);
                }, delay);
            }
        };
    }
    function scrollCallback() {
        var scrollTop = $document.scrollTop();
        if (scrollTop > 200) {
            vmodel.toggle = true;
        } else {
            vmodel.toggle = false;
        }
    }
    return avalon;
}
)();
},{"avalon":2}],71:[function(innerRequire,module,exports){
var avalon = innerRequire("avalon");
innerRequire("../mmPromise/mmPromise");

module.exports = (
function () {
    if (!avalon.duplexHooks) {
        throw new Error('\u4F60\u7684\u7248\u672C\u5C11\u4E8Eavalon1.3.7\uFF0C\u4E0D\u652F\u6301ms-duplex2.0\uFF0C\u8BF7\u4F7F\u7528avalon.validation.old.js');
    }
    //==========================avalon.validation的专有逻辑========================
    function idCard(val) {
        if (/^\d{15}$/.test(val)) {
            return true;
        } else if (/^\d{17}[0-9xX]$/.test(val)) {
            var vs = '1,0,x,9,8,7,6,5,4,3,2'.split(','), ps = '7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2'.split(','), ss = val.toLowerCase().split(''), r = 0;
            for (var i = 0; i < 17; i++) {
                r += ps[i] * ss[i];
            }
            return vs[r % 11] == ss[17];
        }
    }
    function isCorrectDate(value) {
        if (rdate.test(value)) {
            var date = parseInt(RegExp.$1, 10);
            var month = parseInt(RegExp.$2, 10);
            var year = parseInt(RegExp.$3, 10);
            var xdata = new Date(year, month - 1, date, 12, 0, 0, 0);
            if (xdata.getUTCFullYear() === year && xdata.getUTCMonth() === month - 1 && xdata.getUTCDate() === date) {
                return true;
            }
        }
        return false;
    }
    var rdate = /^\d{4}\-\d{1,2}\-\d{1,2}$/;
    //  var remail = /^[a-zA-Z0-9.!#$%&amp;'*+\-\/=?\^_`{|}~\-]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*$/
    var remail = /^([A-Z0-9]+[_|\_|\.]?)*[A-Z0-9]+@([A-Z0-9]+[_|\_|\.]?)*[A-Z0-9]+\.[A-Z]{2,3}$/i;
    var ripv4 = /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i;
    var ripv6 = /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i;
    //规则取自淘宝注册登录模块
    var phoneOne = {
            //中国移动
            cm: /^(?:0?1)((?:3[56789]|5[0124789]|8[278])\d|34[0-8]|47\d)\d{7}$/,
            //中国联通
            cu: /^(?:0?1)(?:3[012]|4[5]|5[356]|8[356]\d|349)\d{7}$/,
            //中国电信
            ce: /^(?:0?1)(?:33|53|8[079])\d{8}$/,
            //中国大陆
            cn: /^(?:0?1)[3458]\d{9}$/    //中国香港
                                      //   hk: /^(?:0?[1569])(?:\d{7}|\d{8}|\d{12})$/,
                                      //澳门
                                      // macao: /^6\d{7}$/,
                                      //台湾
                                      //  tw: /^(?:0?[679])(?:\d{7}|\d{8}|\d{10})$//*,
                                      //韩国
                                      //  kr:/^(?:0?[17])(?:\d{9}|\d{8})$/,
                                      //日本
                                      // jp:/^(?:0?[789])(?:\d{9}|\d{8})$/*/
        };
    /*
     * http://login.sdo.com/sdo/PRes/4in1_2/js/login.js
     * function isPhone(val){
     var gvPhoneRegExpress=new Array();
     gvPhoneRegExpress.push(/^14[57]\d{8}$/);
     gvPhoneRegExpress.push(/^15[012356789]\d{8}$/);
     gvPhoneRegExpress.push(/^13[0-9]\d{8}$/);
     gvPhoneRegExpress.push(/^18[012456789]\d{8}$/);
     var lvCellphoneIsOk=false;
     for (var i=0;i<gvPhoneRegExpress.length;i++){
     if(gvPhoneRegExpress[i].test(val)){
     lvCellphoneIsOk=true;
     break;
     }
     }
     return lvCellphoneIsOk;
     }
     其他手机号码正则
     /^(13\d\d|15[012356789]\d|18[012356789]\d|14[57]\d|17(0[059]|[78]\d))\d{7}$/
     /^(?:(?:13|18|15)[0-9]{9}|(?:147|170|176|177|178|199|196)[0-9]{8})$/; 
     
     */
    avalon.mix(avalon.duplexHooks, {
        trim: {
            get: function (value, data) {
                if (data.element.type !== 'password') {
                    value = String(value || '').trim();
                }
                return value;
            }
        },
        required: {
            message: '\u5FC5\u987B\u586B\u5199',
            get: function (value, data, next) {
                next(value !== '');
                return value;
            }
        },
        norequired: {
            message: '\u53EF\u4EE5\u4E0D\u5199',
            get: function (value, data, next) {
                next(true);
                return value;
            }
        },
        'int': {
            message: '\u5FC5\u987B\u662F\u6574\u6570',
            get: function (value, data, next) {
                next(/^\-?\d+$/.test(value));
                return value;
            }
        },
        phone: {
            message: '\u624B\u673A\u53F7\u7801\u4E0D\u5408\u6CD5',
            get: function (value, data, next) {
                var ok = false;
                for (var i in phoneOne) {
                    if (phoneOne[i].test(value)) {
                        ok = true;
                        break;
                    }
                }
                next(ok);
                return value;
            }
        },
        decimal: {
            message: '\u5FC5\u987B\u662F\u5C0F\u6570',
            get: function (value, data, next) {
                next(/^\-?\d*\.?\d+$/.test(value));
                return value;
            }
        },
        alpha: {
            message: '\u5FC5\u987B\u662F\u5B57\u6BCD',
            get: function (value, data, next) {
                next(/^[a-z]+$/i.test(value));
                return value;
            }
        },
        alpha_numeric: {
            message: '\u5FC5\u987B\u4E3A\u5B57\u6BCD\u6216\u6570\u5B57',
            get: function (value, data, next) {
                next(/^[a-z0-9]+$/i.test(value));
                return value;
            }
        },
        alpha_dash: {
            message: '\u5FC5\u987B\u4E3A\u5B57\u6BCD\u6216\u6570\u5B57\u53CA\u4E0B\u5212\u7EBF\u7B49\u7279\u6B8A\u5B57\u7B26',
            validate: function (value, data, next) {
                next(/^[a-z0-9_\-]+$/i.test(value));
                return value;
            }
        },
        chs: {
            message: '\u5FC5\u987B\u662F\u4E2D\u6587\u5B57\u7B26',
            get: function (value, data, next) {
                next(/^[\u4e00-\u9fa5]+$/.test(value));
                return value;
            }
        },
        chs_numeric: {
            message: '\u5FC5\u987B\u662F\u4E2D\u6587\u5B57\u7B26\u6216\u6570\u5B57\u53CA\u4E0B\u5212\u7EBF\u7B49\u7279\u6B8A\u5B57\u7B26',
            get: function (value, data, next) {
                next(/^[\\u4E00-\\u9FFF0-9_\-]+$/i.test(value));
                return value;
            }
        },
        qq: {
            message: '\u817E\u8BAFQQ\u53F7\u4ECE10000\u5F00\u59CB',
            get: function (value, data, next) {
                next(/^[1-9]\d{4,10}$/.test(value));
                return value;
            }
        },
        id: {
            message: '\u8EAB\u4EFD\u8BC1\u683C\u5F0F\u9519\u8BEF',
            get: function (value, data, next) {
                next(idCard(value));
                return value;
            }
        },
        ipv4: {
            message: 'ip\u5730\u5740\u4E0D\u6B63\u786E',
            get: function (value, data, next) {
                next(ripv4.test(value));
                return value;
            }
        },
        ipv6: {
            message: 'ip\u5730\u5740\u4E0D\u6B63\u786E',
            get: function (value, data, next) {
                next(ripv6.test(value));
                return value;
            }
        },
        email: {
            message: '\u90AE\u4EF6\u5730\u5740\u9519\u8BEF',
            get: function (value, data, next) {
                next(remail.test(value));
                return value;
            }
        },
        url: {
            message: 'URL\u683C\u5F0F\u9519\u8BEF',
            get: function (value, data, next) {
                next(/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/.test(value));
                return value;
            }
        },
        repeat: {
            message: '\u5BC6\u7801\u8F93\u5165\u4E0D\u4E00\u81F4',
            get: function (value, data, next) {
                var id = data.element.getAttribute('data-duplex-repeat') || '';
                var other = avalon(document.getElementById(id)).val() || '';
                next(value === other);
                return value;
            }
        },
        date: {
            message: '\u5FC5\u987B\u7B26\u5408\u65E5\u671F\u683C\u5F0F YYYY-MM-DD',
            get: function (value, data, next) {
                next(isCorrectDate(value));
                return value;
            }
        },
        passport: {
            message: '\u62A4\u7167\u683C\u5F0F\u9519\u8BEF\u6216\u8FC7\u957F',
            get: function (value, data, next) {
                next(/^[a-zA-Z0-9]{4,20}$/i.test(value));
                return value;
            }
        },
        minlength: {
            message: '\u6700\u5C11\u8F93\u5165{{min}}\u4E2A\u5B57',
            get: function (value, data, next) {
                var elem = data.element;
                var a = parseInt(elem.getAttribute('minlength'), 10);
                if (!isFinite(a)) {
                    a = parseInt(elem.getAttribute('data-duplex-minlength'), 10);
                }
                var num = data.data.min = a;
                next(value.length >= num);
                return value;
            }
        },
        maxlength: {
            message: '\u6700\u591A\u8F93\u5165{{max}}\u4E2A\u5B57',
            get: function (value, data, next) {
                var elem = data.element;
                var a = parseInt(elem.getAttribute('maxlength'), 10);
                if (!isFinite(a)) {
                    a = parseInt(elem.getAttribute('data-duplex-maxlength'), 10);
                }
                var num = data.data.max = a;
                next(value.length <= num);
                return value;
            }
        },
        gt: {
            message: '\u5FC5\u987B\u5927\u4E8E{{max}}',
            get: function (value, data, next) {
                var elem = data.element;
                var a = parseInt(elem.getAttribute('max'), 10);
                if (!isFinite(a)) {
                    a = parseInt(elem.getAttribute('data-duplex-gt'), 10);
                }
                var num = data.data.max = a;
                next(parseFloat(value) > num);
                return value;
            }
        },
        lt: {
            message: '\u5FC5\u987B\u5C0F\u4E8E{{min}}',
            get: function (value, data, next) {
                var elem = data.element;
                var a = parseInt(elem.getAttribute('min'), 10);
                if (!isFinite(a)) {
                    a = parseInt(elem.getAttribute('data-duplex-lt'), 10);
                }
                var num = data.data.min = a;
                next(parseFloat(value) < num);
                return value;
            }
        },
        //contain
        eq: {
            message: '\u5FC5\u987B\u7B49\u4E8E{{eq}}',
            get: function (value, data, next) {
                var elem = data.element;
                var a = parseInt(elem.getAttribute('data-duplex-eq'), 10);
                var num = data.data.eq = a;
                next(parseFloat(value) == num);
                return value;
            }
        },
        contains: {
            message: '\u5FC5\u987B\u5305\u542B{{array}}\u4E2D\u7684\u4E00\u4E2A',
            get: function (val, data, next) {
                var vmValue = [].concat(val).map(String);
                var domValue = (data.element.getAttribute('data-duplex-contains') || '').split(',');
                data.data.array = domValue;
                var has = false;
                for (var i = 0, n = vmValue.length; i < n; i++) {
                    var v = vmValue[i];
                    if (domValue.indexOf(v) >= 0) {
                        has = true;
                        break;
                    }
                }
                next(has);
                return val;
            }
        },
        contain: {
            message: '\u5FC5\u987B\u5305\u542B{{array}}',
            get: function (val, data, next) {
                var vmValue = [].concat(val).map(String);
                var domValue = (data.element.getAttribute('data-duplex-contain') || '').split(',');
                data.data.array = domValue.join('\u4E0E');
                if (!vmValue.length) {
                    var has = false;
                } else {
                    has = true;
                    for (var i = 0, n = domValue.length; i < n; i++) {
                        var v = domValue[i];
                        if (vmValue.indexOf(v) === -1) {
                            has = false;
                            break;
                        }
                    }
                }
                next(has);
                return val;
            }
        },
        pattern: {
            message: '\u5FC5\u987B\u5339\u914D/{{pattern}}/\u8FD9\u6837\u7684\u683C\u5F0F',
            get: function (value, data, next) {
                var elem = data.element;
                var h5pattern = elem.getAttribute('pattern');
                var mspattern = elem.getAttribute('data-duplex-pattern');
                var pattern = data.data.pattern = h5pattern || mspattern;
                var re = new RegExp('^(?:' + pattern + ')$');
                next(re.test(value));
                return value;
            }
        }
    });
    //<input type="number" max=x min=y step=z/> <input type="range" max=x min=y step=z/>
    //
    function fixEvent(event) {
        if (event.target) {
            return event;
        }
        var ret = {};
        for (var i in event) {
            ret[i] = event[i];
        }
        var target = ret.target = event.srcElement;
        if (event.type.indexOf('key') === 0) {
            ret.which = event.charCode != null ? event.charCode : event.keyCode;
        } else if (/mouse|click/.test(event.type)) {
            var doc = target.ownerDocument || document;
            var box = doc.compatMode === 'BackCompat' ? doc.body : doc.documentElement;
            ret.pageX = event.clientX + (box.scrollLeft >> 0) - (box.clientLeft >> 0);
            ret.pageY = event.clientY + (box.scrollTop >> 0) - (box.clientTop >> 0);
            ret.wheelDeltaY = ret.wheelDelta;
            ret.wheelDeltaX = 0;
        }
        ret.timeStamp = new Date() - 0;
        ret.originalEvent = event;
        ret.preventDefault = function () {
            //阻止默认行为
            event.returnValue = false;
        };
        ret.stopPropagation = function () {
            //阻止事件在DOM树中的传播
            event.cancelBubble = true;
        };
        return ret;
    }
    var widget = avalon.ui.validation = function (element, data, vmodels) {
            var options = data.validationOptions;
            var onSubmitCallback;
            var vmodel = avalon.define(data.validationId, function (vm) {
                    avalon.mix(vm, options);
                    vm.$skipArray = [
                        'widgetElement',
                        'data',
                        'validationHooks',
                        'validateInKeyup',
                        'validateAllInSubmit',
                        'resetInBlur'
                    ];
                    vm.widgetElement = element;
                    vm.data = [];
                    /**
             * @interface 为元素绑定submit事件，阻止默认行为
             */
                    vm.$init = function () {
                        element.setAttribute('novalidate', 'novalidate');
                        avalon.scan(element, [vmodel].concat(vmodels));
                        if (vm.validateAllInSubmit) {
                            onSubmitCallback = avalon.bind(element, 'submit', function (e) {
                                e.preventDefault();
                                vm.validateAll(vm.onValidateAll);
                            });
                        }
                        if (typeof options.onInit === 'function') {
                            //vmodels是不包括vmodel的
                            options.onInit.call(element, vmodel, options, vmodels);
                        }
                    };
                    /**
             * @interface 销毁组件，移除相关回调
             */
                    vm.$destory = function () {
                        vm.data = [];
                        onSubmitCallback && avalon.unbind(element, 'submit', onSubmitCallback);
                        element.textContent = element.innerHTML = '';
                    };
                    /**
             * @interface 验证当前元素下的所有非disabled元素
             * @param callback {Null|Function} 最后执行的回调，如果用户没传就使用vm.onValidateAll
             */
                    vm.validateAll = function (callback) {
                        var fn = typeof callback === 'function' ? callback : vm.onValidateAll;
                        var promise = vm.data.filter(function (data) {
                                var el = data.element;
                                return el && !el.disabled && vmodel.widgetElement.contains(el);
                            }).map(function (data) {
                                return vm.validate(data, true);
                            });
                        Promise.all(promise).then(function (array) {
                            var reasons = [];
                            for (var i = 0, el; el = array[i++];) {
                                reasons = reasons.concat(el);
                            }
                            if (vm.deduplicateInValidateAll) {
                                var uniq = {};
                                reasons = reasons.filter(function (data) {
                                    var el = data.element;
                                    var id = el.getAttribute('data-validation-id');
                                    if (!id) {
                                        id = setTimeout('1');
                                        el.setAttribute('data-validation-id', id);
                                    }
                                    if (uniq[id]) {
                                        return false;
                                    } else {
                                        uniq[id] = true;
                                        return true;
                                    }
                                });
                            }
                            fn.call(vm.widgetElement, reasons)    //这里只放置未通过验证的组件
;
                        });
                    };
                    /**
             * @interface 重置当前表单元素
             * @param callback {Null|Function} 最后执行的回调，如果用户没传就使用vm.onResetAll
             */
                    vm.resetAll = function (callback) {
                        vm.data.filter(function (el) {
                            return el.element;
                        }).forEach(function (data) {
                            try {
                                vm.onReset.call(data.element, { type: 'reset' }, data);
                            } catch (e) {
                            }
                        });
                        var fn = typeof callback == 'function' ? callback : vm.onResetAll;
                        fn.call(vm.widgetElement);
                    };
                    /**
             * @interface 验证单个元素对应的VM中的属性是否符合格式<br>此方法是框架自己调用
             * @param data {Object} 绑定对象
             * @param isValidateAll {Undefined|Boolean} 是否全部验证,是就禁止onSuccess, onError, onComplete触发
             * @param event {Undefined|Event} 方便用户判定这是由keyup,还是blur等事件触发的
             */
                    vm.validate = function (data, isValidateAll, event) {
                        var value = data.valueAccessor();
                        var inwardHooks = vmodel.validationHooks;
                        var globalHooks = avalon.duplexHooks;
                        var promises = [];
                        var elem = data.element;
                        data.validateParam.replace(/\w+/g, function (name) {
                            var hook = inwardHooks[name] || globalHooks[name];
                            if (!elem.disabled) {
                                var resolve, reject;
                                promises.push(new Promise(function (a, b) {
                                    resolve = a;
                                    reject = b;
                                }));
                                var next = function (a) {
                                    if (data.norequired && value === '') {
                                        a = true;
                                    }
                                    if (a) {
                                        resolve(true);
                                    } else {
                                        var reason = {
                                                element: elem,
                                                data: data.data,
                                                message: elem.getAttribute('data-duplex-' + name + '-message') || elem.getAttribute('data-duplex-message') || hook.message,
                                                validateRule: name,
                                                getMessage: getMessage
                                            };
                                        resolve(reason);
                                    }
                                };
                                data.data = {};
                                hook.get(value, data, next);
                            }
                        });
                        //如果promises不为空，说明经过验证拦截器
                        var lastPromise = Promise.all(promises).then(function (array) {
                                var reasons = [];
                                for (var i = 0, el; el = array[i++];) {
                                    if (typeof el === 'object') {
                                        reasons.push(el);
                                    }
                                }
                                if (!isValidateAll) {
                                    if (reasons.length) {
                                        vm.onError.call(elem, reasons, event);
                                    } else {
                                        vm.onSuccess.call(elem, reasons, event);
                                    }
                                    vm.onComplete.call(elem, reasons, event);
                                }
                                return reasons;
                            });
                        return lastPromise;
                    };
                    //收集下方表单元素的数据
                    vm.$watch('avalon-ms-duplex-init', function (data) {
                        var inwardHooks = vmodel.validationHooks;
                        data.valueAccessor = data.evaluator.apply(null, data.args);
                        switch (avalon.type(data.valueAccessor())) {
                        case 'array':
                            data.valueResetor = function () {
                                this.valueAccessor([]);
                            };
                            break;
                        case 'boolean':
                            data.valueResetor = function () {
                                this.valueAccessor(false);
                            };
                            break;
                        case 'number':
                            data.valueResetor = function () {
                                this.valueAccessor(0);
                            };
                            break;
                        default:
                            data.valueResetor = function () {
                                this.valueAccessor('');
                            };
                            break;
                        }
                        var globalHooks = avalon.duplexHooks;
                        if (typeof data.pipe !== 'function' && avalon.contains(element, data.element)) {
                            var params = [];
                            var validateParams = [];
                            data.param.replace(/\w+/g, function (name) {
                                var hook = inwardHooks[name] || globalHooks[name];
                                if (hook && typeof hook.get === 'function' && hook.message) {
                                    validateParams.push(name);
                                } else {
                                    params.push(name);
                                }
                                if (name === 'norequired') {
                                    data.norequired = true;
                                }
                            });
                            data.validate = vm.validate;
                            data.param = params.join('-');
                            data.validateParam = validateParams.join('-');
                            if (validateParams.length) {
                                if (vm.validateInKeyup) {
                                    data.bound('keyup', function (e) {
                                        var type = data.element && data.element.getAttribute('data-duplex-event');
                                        if (!type || /^(?:key|mouse|click|input)/.test(type)) {
                                            var ev = fixEvent(e);
                                            setTimeout(function () {
                                                vm.validate(data, 0, ev);
                                            });
                                        }
                                    });
                                }
                                if (vm.validateInBlur) {
                                    data.bound('blur', function (e) {
                                        vm.validate(data, 0, fixEvent(e));
                                    });
                                }
                                if (vm.resetInFocus) {
                                    data.bound('focus', function (e) {
                                        vm.onReset.call(data.element, fixEvent(e), data);
                                    });
                                }
                                var array = vm.data.filter(function (el) {
                                        return el.element;
                                    });
                                avalon.Array.ensure(array, data);
                                vm.data = array;
                            }
                            return false;
                        }
                    });
                });
            return vmodel;
        };
    var rformat = /\\?{{([^{}]+)\}}/gm;
    function getMessage() {
        var data = this.data || {};
        return this.message.replace(rformat, function (_, name) {
            return data[name] == null ? '' : data[name];
        });
    }
    widget.defaults = {
        validationHooks: {},
        //@config {Object} 空对象，用于放置验证规则
        onSuccess: avalon.noop,
        //@config {Function} 空函数，单个验证成功时触发，this指向被验证元素this指向被验证元素，传参为一个对象数组外加一个可能存在的事件对象
        onError: avalon.noop,
        //@config {Function} 空函数，单个验证失败时触发，this与传参情况同上
        onComplete: avalon.noop,
        //@config {Function} 空函数，单个验证无论成功与否都触发，this与传参情况同上
        onValidateAll: avalon.noop,
        //@config {Function} 空函数，整体验证后或调用了validateAll方法后触发；有了这东西你就不需要在form元素上ms-on-submit="submitForm"，直接将提交逻辑写在onValidateAll回调上
        onReset: avalon.noop,
        //@config {Function} 空函数，表单元素获取焦点时触发，this指向被验证元素，大家可以在这里清理className、value
        onResetAll: avalon.noop,
        //@config {Function} 空函数，当用户调用了resetAll后触发，
        validateInBlur: true,
        //@config {Boolean} true，在blur事件中进行验证,触发onSuccess, onError, onComplete回调
        validateInKeyup: true,
        //@config {Boolean} true，在keyup事件中进行验证,触发onSuccess, onError, onComplete回调
        validateAllInSubmit: true,
        //@config {Boolean} true，在submit事件中执行onValidateAll回调
        resetInFocus: true,
        //@config {Boolean} true，在focus事件中执行onReset回调,
        deduplicateInValidateAll: false    //@config {Boolean} false，在validateAll回调中对reason数组根据元素节点进行去重
    }    //http://bootstrapvalidator.com/
         //https://github.com/rinh/jvalidator/blob/master/src/index.js
         //http://baike.baidu.com/view/2582.htm?fr=aladdin&qq-pf-to=pcqq.group
;
}
)();
},{"../mmPromise/mmPromise":38,"avalon":2}]},{},[1]);
